<!-- $Id$ -->

<appendix id="app-new-C99">
<title>Nyt i C99</title>

<sect1 id="sect-C99-kommentar">
<title>Uddrag af nyheder i ANSI revisionen fra 1999</title>

<indexterm><primary>C99 standard</primary></indexterm>

<para id="para-C99-url">
Den følgende 
<ulink url="http://anubis.dkuug.dk/JTC1/SC22/WG14/www/newinc9x.htm"> 
liste over nyheder i ANSI C </ulink> omfatter både ændringer i
selve C grammatiken (syntax-regler, regler for typekonvertering,
nye datatyper), af præprocessing, af krav til oversætter og
krav til biblioteker (lib-filer). Desværre er jeg i skrivende
stund ikke i stand til at kommentere alle punkter. 
</para>

<para>
Hvad er for eksempel de nøjere regler for Variable Length Arrays,
VLAs?  VLA er noget, som skulle være nyttigt i forbindelse med de
massive beregningsopgaver, som er en vigtig computeranvendelse i
dag.
</para>

<para>
Der er dog mange ting, som kan læses ud af n897.pdf filen omtalt
nedenfor. "Pointere med begrænsninger" er en pointer der peger på
et objekt (som pointere jo ofte gør). Men alle referencer til
dette objekt <emphasis> skal </emphasis> nu gå igennem denne
pointer. Derved kan man opnå nogle optimeringer, som ellers ikke
er mulige.  Oversætteren kan stole på, at denne pointer ikke
bliver kopieret eller "aliaset" til en eller anden variabel.
</para>

<para>
Man kan købe selve ANSI C 1999 standarden i Adobe-PDF format fra
<ulink url="http://www.ansi.org"> ANSI Standard Store</ulink>.
Næsten lige så interessant (måske endda mere interessant) er
tankerne bag standarden. Dem kan man finde i dokumentet n897.pdf på
<ulink url="http://anubis.dkuug.dk/JTC1/SC22/WG14">
anubis.dkuug.dk/JTC1/SC22/WG14, teksten på
linket er N897, draft rationale available</ulink>.
</para>

<para>
Charteret for revisionsgruppen ligger også at hente på
ovenstående adresse. Det har (selvfølgelig) været en vigtig del
af charteret, at C sproget skal være så kompatibelt med C++ som
muligt.
</para>

<para>
Der er sikkert nogle, som sammen med mig vil begræde, at man ikke
blot kan nævne en funktion uden at skrive en prototype for at
informere compileren om return type og parametertyper. Men det er
nu ikke så slemt endda; der vil i mange år endnu være en switch
som tillader ANSI-89 reglerne.
</para>

<para>
De vigtigste ændringer er:
</para>
<itemizedlist mark="bullet">


<listitem>
<indexterm><primary>implicit integer regel</primary></indexterm>
<para>
Funktioner <emphasis> skal </emphasis> erklæres med prototype,
inden de anvendes. En ukendt funktion antages ikke at have int
som return type.
</para></listitem>

<listitem><para>
Implicit integer er ligeledes afskaffet. Tidligere var det
tilladt at skrive yxi = 1 øverst i en blok, hvis man ville
erklære og initialisere en integer. Det må man ikke mere. En
variabel skal erklæres med angivelse af type. Sammenhold dette
med, at det nu skal være tilladt at erklære en variabel der, hvor
man har brug for den, ligesom i C++. 
</para></listitem>

<listitem><para>
Inline funktioner skal supporteres af oversætteren (det kan GNU-C
allerede).
</para></listitem>

<listitem><para>
Så vidt jeg kan forstå vil der også være begrænset support af
typetjek i præprocessor aritmetik. Det skal også kunne
specificeres, om præprocessor aritmetik er signed eller unsigned.
</para></listitem>

<listitem><para>
Kommentarer som i C++ og simula: // dette er en kommentar.
</para></listitem>
</itemizedlist>

<para>
I bedste open doc stil efterlyser jeg bidrag til uddybelse af
disse punkter.
</para>

<para>
Listen er hentet via http://www.ansi.org. Også her
http://www.dkuug.dk/JTC1/SC22/WG14 kan man finde oplysninger.
Men links har det med at blive gamle. Brug eventuelt
www.google.com til at finde nye links til ANSI-C standard.
</para>
</sect1>

<sect1 id="c-tilfaeldig-liste">
<title>Liste i tilfældig rækkefølge</title>

<para>
Ok, jeg har tilladt mig at gruppere emnerne på en lidt anden
måde end 
<ulink url="http://anubis.dkuug.dk/JTC1/SC22/WG14/www/newinc9x.htm"> 
det originale paper. </ulink>
</para>

<itemizedlist mark="bullet"> 
<listitem><para>
pointere med begrænsninger
</para></listitem>
<listitem><para>
variabel længde arrays
</para></listitem>
<listitem><para>
fleksible array medlemmer
</para></listitem>
<listitem><para>
udvidede heltals typer og &lt;inttypes.h> og nu &lt;stdint.h>
</para></listitem>
<listitem><para>
afskaffelse af regel om implicitte funktions erklæringer.
</para></listitem>
<listitem><para>
afskaffelse af implicit integer reglen
</para></listitem>
<listitem><para>
long long type og library funktioner for denne
</para></listitem>
<listitem><para>
forøgelse af grænser for oversættelse
</para></listitem>
<listitem><para>
længere variabelnavne
</para></listitem>
<listitem><para>
pålidelig integer division
</para></listitem>
<listitem><para>
universelle navne til det anvendte tegnsæt
</para></listitem>
<listitem><para>
binære floating point literals og printf/scanf specifikation af konvertering
</para></listitem>
<listitem><para>
sammensatte stringkonstanter
</para></listitem>
<listitem><para>
designated initializers
</para></listitem>
<listitem><para>
// slash-slash kommentarer
</para></listitem>
<listitem><para>
blanding af erklæringer og kode (erklæring af variable, hvor man
har brug for dem)
</para></listitem>
<listitem><para>
heltal (integer) konstant type - regler
</para></listitem>
<listitem><para>
ændringer af type konvertering (integer promotion)
</para></listitem>
<listitem><para>
præprocessor aritmetik kan gøres i signed/unsigned integers.
</para></listitem>
<listitem><para>
support af complex og imaginære tal (header fil &lt;complex.h>)
</para></listitem>
<listitem><para>
type generiske matematik macroer &lt;tgmath.h>
</para></listitem>
<listitem><para>
vararg makro'er
</para></listitem>
<listitem><para>
tilføjelse af flere matematik library funktioner (&lt;math.h>)
</para></listitem>
<listitem><para>
decimalbrøk miljø tilgang (for overflow? &lt;fenv.h>)
</para></listitem>
<listitem><para>
IEC 559 (IEEE aritmetik) support
</para></listitem>
<listitem><para>
udvidet time structure (struct tmx) og library funktioner
</para></listitem>
<listitem><para>
efterstillet komma tilladt i enum erklæringer
</para></listitem>
<listitem><para>
%lf konverterings specifikation er tilladt i printf
</para></listitem>
<listitem><para>
inline funktioner
</para></listitem>
<listitem><para>
boolean type (&lt;stdbool.h>)
</para></listitem>
<listitem><para>
idempotent type qualifiers
</para></listitem>
<listitem><para>
tomme makro arguments
</para></listitem>
<listitem><para>
ny struct type kompatibilitets regler (tag compatibility)
</para></listitem>
<listitem><para>
_Pragma præprocessor operator
</para></listitem>
<listitem><para>
standard pragma'er
</para></listitem>
<listitem><para>
__func__ predefineret nøgle-ord
</para></listitem>
<listitem><para>
vscanf funktionsfamilien
</para></listitem>
<listitem><para>
snprintf funktionsfamilien
</para></listitem>
<listitem><para>
VA_COPY makro
</para></listitem>
<listitem><para>
tilføjelse af flere strftime konverterings specifikationer
</para></listitem>
<listitem><para>
LIA compatibility annex
</para></listitem>
<listitem><para>
depreciering (afskaffelse på længere sigt) af ungetc i starten af
binær fil
</para></listitem>
<listitem><para>
remove deprecation of aliased array parameters
annullering af depreciering af alias-ede array parametre
</para></listitem>
</itemizedlist>
</sect1>


<sect1 id="sect-C93">
<title> Nyt i C93 (AM1)</title>

<itemizedlist mark="bullet">
<listitem><para>
begrænset support af ISO-0646 &lt;iso646.h> (bemærk at der
arbejdes på højtryk på unicode support i Gnome projektet,
oversætters anmærkning).
</para></listitem>

<listitem><para>
wide character d.v.s. 16-bit character support og library
(&lt;wchar.h> and &lt;wctype.h>)
</para></listitem>

</itemizedlist>

</sect1>
</appendix>

