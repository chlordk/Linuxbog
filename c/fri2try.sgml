<chapter id="c-intro"><title>Introduktion</title>
<sect1 id="c-prof-vaerksted"><title>Et professionelt værksted</title>
<!--comment <title>Du har lige installeret Linux ... </title> -->

<para>
Hvis du har en maskine med Linux i en af de større
distributioner (fx. Red Hat eller Debian) har du samtidig en
samling af de mest avancerede værktøjer til fremstilling af
software.
</para>

<para>
 Det er ikke blot en "sandkasse", du sidder med, men et professionelt
 udviklingsmiljø. Der er optimerende oversætter, standardiserede biblioteker,
 supplerende biblioteker med et væld af funktionalitet, debugger, source
 management med alt, hvad dertil hører, og oven i det er Linux jo et
 professionelt afviklingsmiljø med automatisk jobstart, kommandofortolkere og
 andre fortolkede sprog i mange varianter, serverfaciliteter, samt ikke mindst
 dørvogterfaciliteter (Firewall værktøjer eller TCP-IP filtrering).
</para>

<para>
Det avancerede i denne her sammenhæng ligger ikke i et
smart peg - og - klik interface til en programgenerator. Just for
the record: En programgenerator er et udmærket værktøj i visse
sammenhæng. Med sådan et værktøj kan du kan vælge mellem et
begrænset antal på forhånd programmerede moduler ved hjælp af en
mus, klik og vupti, så har du et resultat bestående af objekter,
der er sat sammen (nogen kalder peg og klik - programmering for
objektorienteret programmering, men det er en fordrejning af
begreber).
</para>

<para><emphasis>Et sidespring:</emphasis> På Linux findes mindst
én klik-og-peg generator, nemlig "glade", en GTK+ User Interface
Builder, skrevet af Damon Chaplin, http://glade.pn.org. Kan
anbefales.
</para>

<FIGURE ID="fig-glade-palet" FLOAT="1">
<TITLE>glade, en GTK+ GUI generator.</TITLE>
<GRAPHIC FILEREF="glade_palet.&magic;"  SCALE="100"></GRAPHIC>
</FIGURE>
<FIGURE ID="fig-glade-canvas" FLOAT="1">
<TITLE>glade, projekt vindue.</TITLE>
<GRAPHIC FILEREF="glade_canvas.&magic;"  SCALE="100"></GRAPHIC>
</FIGURE>


<para>
Nej, det avancerede består i, at du kan styre genereringen
af programkode fuldstændig professionelt. Hvis du fx. ønsker at
skrive en ny og bedre database server, så værsgo', gå i gang. Den
nødvendige dokumentation er til rådighed, og der findes desuden
lærebøger som forklarer om low-level ting og high-performance
problematikker på Linux.
</para>

<para>
Oven i alt dette får du den fordel, at dine Linux
programmer i de fleste tilfælde kan anvendes uden ændringer på
andre Linux-systemer, inclusive 64-bit systemer, og med få
ændringer på mange andre Unix systemer som fx. Solaris, AIX,
HP-UX.
</para>

<indexterm><primary>Cygwin</primary></indexterm>
<para>
Mere overraskende er det måske, at man også kan køre
Linux-udviklede programmer på Microsoft NT ved hjælp af
Cygwin systemet fra Cygnus.
</para>

<para>
Det er en væsentlig del af filosofien i GNU og C - sproget,
at man skal kunne genbruge sin kode, hvis hardwaren skal
udskiftes; og det skal den før eller senere! Hardware forgår,
brainware består. Sådan da.
</para>

<para>
Udover C-oversætteren har du med Linux adgang til C++ og
mange andre sprog. 
</para>

<sect2 id="hvad-er-debugger">
<title>Hvad er en debugger?</title>
<para>
Debuggeren er et værktøj, som kan vise, linie for linie,
hvad der sker i et program. Selv om det hedder en debugger, så er
det er ikke så godt at bruge den til at fjerne fejl <footnote id="C-bug">
<para> Det kaldes aflusning eller debugging, bug == insekt, - der
skulle engang være opstået en fejl i en af de første computere
p.g.a.  nogle insekter, som syntes, at der var varmt og rart at
være oven på sådan nogen elektronik-komponenter.  </para>
</footnote>. 
</para>

<para>
Hvis et program er så fejlbehæftet, at man overvejer at anvende
en debugger, så bør man begynde forfra og reimplementere sine
programmer med de nyvundne erfaringer. Ok, der er undtagelser,
hvor man kan lokalisere en vanskelig, periodisk fejl ved at
anvende en debugger med omtanke, men det er ikke noget, som man
skal gøre til en fast vane!
</para>
</sect2>

<sect2 id=bib-eksempel>
 <title>Biblioteker - et eksempel</title>
 <para>
  Det vigtigste er imidlertid, at der med de almindelige Linux-distributioner
  er et stort arsenal af Open Source-biblioteker til database, netværk, grafik
  etc.
 </para>

<para>
Som et eksempel kan det fremhæves, at der findes Open
Source netværks-biblioteker til implementering af Remote
Procedure Call - programmer (rpc - programmer), både til client
og server TCP/UDP/IP. Det er en teknik, som kan benyttes til at
udføre en "procedure" på en anden computer (som selvfølgelig skal
være forberedt til dette!) Dette er værd at understrege, idet den
meget udbredte PC-software har indført nogle økonomisk betingede
useriøse skel mellem server og klient programmer.
</para>

<para>
Desuden har du adgang til mange gode eksempler på, hvordan
i hvert fald nogle af bibliotekerne anvendes. Kort sagt, hvis du
går i gang, kan du satse på at nå et professionelt niveau på de
områder, som du udvælger.
</para>
</sect2>
<sect2 id="hvordan-i-gang">
<title>Hvordan kommer man igang?</title>
<para>
Hvad gør man så for at komme igang?
</para>

<para>
Hvis der skulle være et mirakel-ord, som er nøgle til
forståelse af computerens magi, så er det ordet
DATA-REPRÆSENTATION.
</para>

<para>
Godt nok følger computerens elektriske signaler de fysiske
love, men computeren er et instrument til at manipulere store
mængder af impulser ud fra nogle få regler valgt af programmøren.
Med andre ord, vi kan tillægge elektriske signaler en betydning.
Et enkelt elektrisk signal kaldes oftest en bit, binary digit.
Otte af dem kaldes en byte eller, mere officielt, en octet.
</para>

<para>
En enkelt bit kan være en besked om at åbne sluserne
for at undgå en oversvømmelse. Eller en prik på en billedskærm.
Eller forskellen mellem et punktum og et komma (i en dårlig
skrifttype! Anstrengende for øjnene!)
</para>

<para>
Som regel bruger man flere bits til vigtige beskedder for
at sikre, at man nu også har forstået hinanden rigtigt. Det
kaldes redundans.
</para>

<para>
Bogstaver repræsenteres som regel ved en byte, men ved
anvendelse af Unicode bruges 16 bit eller 2 bytes. Der er også
systemer, som repræsenterer bogstaver ved hjælp af variabelt
antal bytes. Kig fx. på en HTML-side.
</para>
</sect2>
</sect1>

<sect1 id="repraesentering-af-data"><title>Repræsentation af data</title>
<para>
Hvis du ved en masse om computere, så vil du nok finde
dette afsnit overflødigt. Spring straks videre!
</para>

<para>
En computer kan bruges til tekstbehandling, styring af
produktionsmaskineri, til teleudstyr, og, selvfølgelig, til den
"klassiske" lommeregner. Hvor kommer denne fleksibilitet fra? Fra
programmøren, eller mere korrekt: De forskellige applikationer af
computerteknikken beror på muligheden for at repræsentere
information af mange forskellige typer ved hjælp af elektriske
spændinger.
</para>

<para>
Konstruktøren af en harddisk bestemmer f.x., at når man
sætter strøm på ledning 77, så er det en besked til harddisken om,
at den skal begynde en read-operation.
</para>

<para>
De, der konstruerer computeren, bestemmer, hvad de
forskellige elektriske signaler skal få de forskellige dele af
maskineriet til at udføre. Når han én gang har bestemt, at
ledning 77 er read-request, og maskinen er bygget efter hans
anvisninger, så er vi bundet af denne mening med signal 77, men
det kan altså laves om - næste gang, vi konstruerer et harddisk
interface.
</para>

<para>
Den ene dag repræsenterer bit nummer 1000017 en kerne i en
tomat, næste sekund måske et punktum på en skærm, og næste dag
kunne den være en del af en ordre til en harddisk.
</para>

<para>
Hvis du vil i dybden med forståelse af computerens
virkemåde og muligheder, kan du læse fx. Joseph Weizenbaum's
"Computer Power and Human Reason".
</para>

<para>
Datarepræsentation handler om teknikker til at
repræsentere forskellige typer af objekter. For programmøren er
det vigtigere at spørge, hvilke informationer, det egentlig er
interessant at repræsentere. Det kan computeren ikke finde ud af
uden kyndig vejledning fra programmører!
</para>

<para>
Hvordan vælger vi at repræsentere en tomat, hvad vælger vi
at se? Er det prisen, der interesserer os?  Vægten? Udseendet?
Surhed? Arvelige egenskaber? Vi vælger ud fra en idé om, hvad vi
vil med objektet.
</para>
</sect1>

<sect1 id="repraesentering-af-tal"><title>Repræsentation af tal</title>
<para>
Lad os se på, hvordan computeren repræsenterer tal. Det er
vel det, den er bedst til? Jo, måske nok, men alligevel, der er
faktisk en hage eller to ved computerens måde at repræsentere tal
på.
</para>

<indexterm><primary>heltal</primary></indexterm>
<para>
Fx. taler vi om heltal, de naturlige tal, tallene fra 0 og
opefter. Eller er det fra 1 og opefter ;-) Nå, i hvert fald så
siger vi, at vi kan repræsentere heltallene med en computers
kalkulator register eller en memory celle. Men det er ikke helt
rigtigt! Det er nemlig kun et udsnit af de naturlige tal, som vi
kan repræsentere. Så ikke engang denne enkle opgave kan en
computer klare så godt som en almindelig dødelig! Forklaring
følger.
</para>

<para>
Et register er en slags tælleværk, der i dag typisk består
af 32 bits - binary digits. De enkelte digits er lavet ved hjælp
af et transistor mønster, der kan være i to tilstande, 
enten i en tilstand, hvor strømmen kan passere, eller også i en
tilstand, hvor strømmen blokeres. Når der er 32 bits, kan de
danne ca. 4 mia. mønstre eller kombinationer af on/off, 0 eller
1. Det er maximum antal kombinationer. Hvis vi altså tæller fra
0, kan vi komme op på 4 mia med et 32-bit register.
</para>

<para>
Det er derfor, at der har været en grænse for filstørrelser
på de almindeligst forekommende filsystemer. Siger 2GB grænsen
dig noget? Det er den største fil på fx. Linux' ext2-filsystemer.
Det kunne have været en 4GB grænse, men én af bit'ene er
reserveret til et andet formål, nemlig til angivelse af, om
systemet er i en fejltilstand efter en skrive- eller
læseoperation.  En bit, on/off, svarer altså til en fordobling af
kombinationsmulighederne, se nærmere nedenfor.
</para>

<para>
Bits er altså repræsenteret ved hjælp af elektriske
kredsløb, der kan aflæses af andre kredsløb.
</para>

<para>
Kalkulator registeret, det vigtigste register på den
traditionelt opbyggede CPU, er en slags tælleværk bestående af
bits (i dag som regel 32), som en kilometertæller, som
kan udføre forskellige regnestykker på det tal, den indeholder.
</para>

<para>
En CPU kan have mange kalkulator-registre. De har navne,
ofte noget med R1 og R2, i Intel-arkitekturen (x86 - CPU'er)
hedder de imidlertid EAX, EBX, ECX etc (hvilket er copyrighted!)
Mange af dem kan udføre regnestykker. På Intel 386 arkitekturen
(og Pentium m.v.) kan man dog se en vis fortrinsstilling for EAX
registeret. Men denne bog handler ikke om Intel. Hvis Intels
CPU'er interesserer dig, så hent fra www.intel.com "Intel
Architecture Software Developer's Manual" (det er 3 PDF-filer på
ialt omkring 15 MB), eller find en bog om assemblerprogrammering,
eller prøv at læse den Assembly-HOWTO, som følger med bl.a.
Red Hat Linux.
</para>

<para>
Hvis CPU-en har 32-bit registre, så kan man skrive tal fra
0 til 4 milliarder. Selv om det er mange, er det ikke ALLE de
naturlige tal - de fortsætter jo opefter, mod uendelig, som man
siger. Selv om det heller ikke er muligt at finde noget i
universet, som er uendeligt, man bliver om jeg så må sige træt
inden man når dertil, er det alligevel en mere begrænset
repræsentation af talsystemet, som vi får med en 32-bit computer
<footnote id="C-tid"><para>En lidt mere seriøs beskrivelse af tid,
uendelighed og rum kan man finde i Stephen Hawking's "Brief
History Of Time", nej, ikke Stephen King!</para></footnote>

Metoden til at tælle ved hjælp af bits, som du sikkert kender
eller allerede har regnet ud, kan illustreres med følgende tabel
(med kun 4 bit):
</para>

<para>
 <informaltable frame="all">
   <tgroup cols="5">
<thead>
  <row>
    <entry>ottere</entry>
    <entry>firere</entry>
    <entry>toere_</entry>
    <entry>enere_</entry>
    <entry>værdi med almindeligt 10-talsystem</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>0</entry>
    <entry>0</entry>
    <entry>0</entry>
    <entry>0</entry>
    <entry> == 0</entry>
  </row><row>
    <entry>0</entry>
    <entry>0</entry>
    <entry>0</entry>
    <entry>1</entry>
    <entry> == 1</entry>
  </row><row>
    <entry>0</entry>
    <entry>0</entry>
    <entry>1</entry>
    <entry>0</entry>
    <entry> == 2</entry>
  </row><row>
    <entry>0</entry>
    <entry>0</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry> == 3</entry>
  </row><row>
    <entry>0</entry>
    <entry>1</entry>
    <entry>0</entry>
    <entry>0</entry>
    <entry> == 4</entry>
  </row><row>
    <entry>0</entry>
    <entry>1</entry>
    <entry>0</entry>
    <entry>1</entry>
    <entry> == 5</entry>
  </row><row>
    <entry>0</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>0</entry>
    <entry> == 6</entry>
  </row><row>
    <entry>0</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry> == 7</entry>
  </row>
</tbody>
   </tgroup>
</informaltable>
</para>

<para>
Som man kan se kan kolonnerne kaldes ENERE, TOERE og FIRERE
i analogi med vores ti-tal system, hvor vi siger, at kolonnerne
repræsenterer enere, tiere og hundreder etc.
</para>

<para>
Hvis vi har brug for mere, kan vi imidlertid godt sætte
flere registre, eller flere memory celler, sammen, så vores tal
kan blive større. Det er forholdsvis enkelt.
</para>

<para>
De negative tal kunne vi repræsentere ved at markere med en
ekstra bit (eventuelt et helt andet sted) at vi skulle gange med
-1. Nogle maskiner kan faktisk skelne mellem +0 og -0! Men det er
ikke populært i dag. Man vælger som regel en anden metode.
</para>

<para>
Man indretter CPU registrene sådan, at når man tæller op,
så bliver 1...1111 til 0...0000 (for ikke at skrive alle 32 bit,
skriver jeg 1...1111.) Det ligner lidt en kilometertæller, som
når den har nået det største tal, den kan vise, går tilbage til
0, altså fx. går fra 99999 til 00000. 

Men altså, det skal forestille, at alle bit er tændt - det kalder
man, at de er sat. Hvis det er et 32-bit register, svarer det til
ca. 4 milliarder. Når man så lægger 1 til, bliver resultatet 0!
Det ligner ikke helt til den verden, vi ønsker at repræsentere
med vores computer programmer. Derfor bør man under programmering
altid være opmærksom på grænserne for de tal, man arbejder med.
Det er imidlertid ikke så slemt, som det lyder.
 <informaltable frame="all">
   <tgroup cols="32">
<tbody>
  <row>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
  </row>
</tbody>
   </tgroup>
</informaltable>
</para>

<para>
Altså, når alle bit er sat, og vi lægger en til, så slukker
de alle sammen. Derfor kunne det være en god idé at lade 1...1111
repræsentere det negative tal -1.
</para>

<para>
</para>

<para>
 <informaltable frame="all">
   <tgroup cols="5">
<thead>
  <row>
    <entry>fortegn</entry>
    <entry>_______</entry>
    <entry>_______</entry>
    <entry>_______</entry>
    <entry>værdi med almindeligt 10-talsystem</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>1</entry>
    <entry>0</entry>
    <entry>0</entry>
    <entry>0</entry>
    <entry> == -8</entry>
  </row><row>
    <entry>1</entry>
    <entry>0</entry>
    <entry>0</entry>
    <entry>1</entry>
    <entry> == -7</entry>
  </row><row>
    <entry>1</entry>
    <entry>0</entry>
    <entry>1</entry>
    <entry>0</entry>
    <entry> == -6</entry>
  </row><row>
    <entry>1</entry>
    <entry>0</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry> == -5</entry>
  </row><row>
    <entry>1</entry>
    <entry>1</entry>
    <entry>0</entry>
    <entry>0</entry>
    <entry> == -4</entry>
  </row><row>
    <entry>1</entry>
    <entry>1</entry>
    <entry>0</entry>
    <entry>1</entry>
    <entry> == -3</entry>
  </row><row>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>0</entry>
    <entry> == -2</entry>
  </row><row>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry>1</entry>
    <entry> == -1</entry>
  </row>
</tbody>
   </tgroup>
</informaltable>
</para>

<para>
Som man kan se, nytter det ikke noget her at kalde
kolonnerne for ENERE, TOERE og FIRERE. Hvis man skal give denne
"konvertering af betydningen" et navn, så plejer man at kalde den
2's komplement. Men egentlig er det
2<superscript>32</superscript>'s komplement, d.v.s.
2<superscript>32</superscript>-tal.
</para>

<para>
Det er nok lettere at se det for sig med en illustration.
Man repræsenterer f.x. 1 med en bit i den ene ende. Når man
vender alle bits om, så 0'er bliver til 1 og omvent (inverterer),
og lægger 1 til, så får man bitmønsteret til repræsentation af
-1.
</para>


<example id="ex-tal-0-7">
<title> tallene fra 0 til 7 og 0 til -7.</title>
<programlisting>
   0: 0000, Inverted: 1111, Complement(til 2^4): 0000
   1: 0001, Inverted: 1110, Complement(til 2^4): 1111
   2: 0010, Inverted: 1101, Complement(til 2^4): 1110
   3: 0011, Inverted: 1100, Complement(til 2^4): 1101
   4: 0100, Inverted: 1011, Complement(til 2^4): 1100
   5: 0101, Inverted: 1010, Complement(til 2^4): 1011
   6: 0110, Inverted: 1001, Complement(til 2^4): 1010
   7: 0111, Inverted: 1000, Complement(til 2^4): 1001
</programlisting>
</example>

<para>
Når der er tale om 32 bit heltals repræsentation, er det lettere
at benytte hexadecimal notation. Tallene fra 0-9 skrives som
sædvanlig 0-9, men 10-15 skrives a-f. Det betyder, at man kan
repræsentere 4 bit med ét 'ciffer', hvor ciffer skal forstås som
0-9a-f.
</para>


<example id="ex-numrep1">
<title> tallene fra 0 til 7 og 0 til -7.</title>
<programlisting>
Word: 00000000, Inverted: ffffffff, Complement: 00000000
Word: 00000001, Inverted: fffffffe, Complement: ffffffff
Word: 00000002, Inverted: fffffffd, Complement: fffffffe
Word: 00000003, Inverted: fffffffc, Complement: fffffffd
Word: 00000004, Inverted: fffffffb, Complement: fffffffc
Word: 00000005, Inverted: fffffffa, Complement: fffffffb
Word: 00000006, Inverted: fffffff9, Complement: fffffffa
Word: 00000007, Inverted: fffffff8, Complement: fffffff9
</programlisting>
</example>

<para>
Fortsætter man denne tankegang, så bliver det største tal
med 32 - bit ca. 2 milliarder, og det er stadigvæk en pæn sjat.
</para>

<para>
 Grunden til, at Linux' ext2-filsystem ikke kan have filer, som er større end
 2 GB er forresten, at grænsesnittene der bruges til at læse og skrive filer
 arbejder med 32 bit heltal (hvoraf en bit bruges til fortegnet).
</para>

<para>
Et program, som frembringer udskriften ovenfor (fig
<xref LinkEnd="ex-numrep1">) er vist i <xref
LinkEnd="outformat1">.
</para>

<para>
Det er muligt at repræsentere tal på andre måder end 
den her viste. <!-- (TODO: henvisning!) --> Men vigtigere, det er
muligt at repræsentere andet end tal. Bogstaver kan repræsenteres
ved hjælp af tal, den simpleste løsning på en computer med
mulighed for at repræsentere tekst er jo den kendte metode med en
byte pr. bogstav. Det er ikke nok, hvis der også skal være plads
til at repræsentere græske bogstaver, matematiske symboler, og
slet ikke, hvis også forskellige grafiske symboler,
skrifttypebeskrivelser etc. skal repræsenteres. Men det er en helt
anden historie.
</para>

<para>
Andre ting, som fx. grøntsager og frugt, må repræsenteres
ved bits og bytes på samme måde som tal og bogstaver. Hvis du er
ny i programmering, vil det klogeste være at afprøve nogle
programmer nu, måske endda bruge 3 - 4 måneder på eksemplerne og
øvelserne i <xref LinkEnd="tour"> kapitlet.
 Hvis du på den anden side kender lidt til programmering og
gerne vil køre tanken om repræsentation til ende, så er der to
begreber, som vi skal tygge lidt på: Simuleringer og modeller.
</para>
</sect1>

<sect1 id="simulering-modeller">
<title>Simulering - Modeller</title>
<para>
For lige at få lidt mere 'real-life' perspektiv på
datarepræsentation, så forestil dig et program, som skal simulere
noget, der foregår i det virkelige liv, matador-spil,
adventure-spil (som på visse punkter forventes at svare til ting,
vi kender fra dagligdagen), eller beregning af en vejrudsigt.
Vind fra vest med lavtryk - hvor ligger grænsen (isobar linien)
for 990 millibar etc.etc. Man kan fx. opdele luftrummet over
Skandinavien i firkanter med hver deres vejr-målinger og beregn
interaktionen mellem firkanterne efter de fysiske love for tryk
udligning, temperaturudvidelser etc. - pyha, godt det ikke skal
udregnes i hånden!
</para>

<para>
Simuleringer er så forskellige. Man kan simulere
reaktionerne på håndtag og visningen i instrumenter i et
flycockpit for at give piloterne øvelse i at betjene
styremekanismerne; eller man kan simulere eller efteligne lydene
fra et spillende symfoniorkester.  Simuleringerne svarer ikke på
alle punkter til virkeligheden, men kan være nyttige og mere
eller mindre tæt på virkeligheden.
</para>

<para>
Hvis vi skulle beregne det mest rentable dyrkningsforløb for
tomater i drivhus, hvad skulle vi så vide om dem? Jeg behøver
ikke spørge, om vi kunne spise resultatet af simuleringen! Men en
ting er sikkert, der skulle mange oplysninger til, de fleste af
dem skulle opsamles ved hjælp af grundige forsøg og målinger, som
ville ende med nogle tal, der repræsenterede egenskaber ved
forløbet.
</para>

<para>
Derimod så ligner et investeringsspil og en investerings
service for bankkunder hinanden så meget, at man kan bruge det
ene program som grundlag for den virkelige service. Her bliver
der blot koblet betalingstransaktioner på spillet, med tilhørende
retsansvar.
</para>

<para>
Kobler vi simuleringerne på virkelige objekter (med passende
teknik, som i sig selv kan være komplicerede computersystemer) kan
computeren anvendes som værktøj til at "styre virkeligheden",
måske bedre, end vi kan gøre det, men til syvende og sidst blot
som vores "forlængede arm".
</para>

<para>
Simulerings- og styringsteknikker hviler på evnen til at
repræsentere begreber og objekter ved hjælp af computerens bits.
Som nævnt er denne repræsentation altid mangelfuld. Den
opfattelse af verden, som måtte ligge til grundlag for
simuleringerne, kaldes en model. Modellen er altså ikke kun
repræsentationen af statiske, ubevægelige, egenskaber, som
tingene har, men også af deres måde at bevæge sig og indgå
forbindelser med hinanden, sådan som fx. de enkelte styrehåndtag
i en flysimulator må reagere på og med hinanden.
</para>

<para>
Men ligesom talrepræsentationen er mangelfuld, så vil
modeller også være mangelfulde. Ikke p.g.a. at der mangler den
syvende eller niende decimal, men fordi der er grænser for, hvor
meget programmøren kan forudse. Havarisituationer,
vejrsituationer, forskellige former for landskabsforhindringer
etc. kan kun i et begrænset antal være repræsenteret i en
computer. På et eller andet tidspunkt kommer man (efter meget
arbejde) formentlig til en model, som tilfredsstiller brugerne af
modellen så meget, at de opfatter modellen som en fuldt funktionel
fremstilling af virkeligheden.
</para>

<para>
Den slags tanker virker specielt tiltrækkende på børn og
reklamefolk. Måske også på fabrikanter af computerspil. Ord som
cybernetics, cyberspace og cyborg spiller på dette element af "en
verden inde i computeren".
</para>

<indexterm><primary>mapning</primary></indexterm>
<para>
Man kunne sige, at vi har "mappet", kortlagt, en del af den
virkelige verden ved hjælp af vores computers bits og nogle
programmer, som behandler dem i overensstemmelse med vores
fortolkning.
</para>

<para>
Denne teknik, at "mappe" en mængde af elementer, således at
de repræsenteres af en anden mængde, er den grundlæggende disciplin
for applikationsprogrammører. Alan Turing har omkring 1940-1950
beskrevet det teoretiske grundlag for computerens virkemåde, og hans
arbejde er stadig interessant for programmører, der vil forstå muligheder
og grænser for computerens "indre univers".
</para>
</sect1>
</chapter>

