<?xml encoding="ISO-8859-1" ?>

<chapter id="unix-adgangsstyring">
 <title>Adgangsstyring</title>

 <para>
  I Unix har man mulighed for at styre hvilke brugere der har adgang
  til at gøre bestemte ting og se bestemte data.  Brugerne er opdelt i
  et hierarki med to niveauer.  Øverst er der systemadministratoren
  (bruger nummer nul) der typisk, men ikke nødvendigvis, har
  brugernavnet "root".  Nederst er der alle de andre brugere
  (brugernumre større end nul).  Systemadministratoren har adgang til
  at gøre alt på systemet og kan dermed lave større ulykker end de
  almindelige brugere.  Derfor er det vigtigt at man kun udfører
  programmer med systemadministratorrettigheder i det omfang det er
  strengt nødvendigt.
 </para>

 <para>
  Udover brugere arbejder Unix' adgangsstyring også med grupper.  Hver
  bruger er medlem af en eller flere grupper.  Ligesom man for en
  enkelt bruger kan styre hvad han skal have adgang til, så kan man
  også gøre det for en hel gruppe ad gangen.
 </para>


 <para>
  Unix styrer adgangen til ressourcer på filniveau.  Det betyder at
  den mest detaljerede opdeling af rettigheder som Unix kan håndtere
  er enkelte dokumenter, kataloger eller eksterne enheder.  Hvis man
  har brug for en mere detaljeret opdeling af adgangen til data,
  klarer man det typisk ved at køre et databasesystem ovenpå Unix.
 </para>


 <sect1 id="unix-rettigheder">
  <title>Filer og deres rettigheder</title>

  <indexterm>
   <primary>fil-rettigheder</primary>
  </indexterm>
  <indexterm>
   <primary>rettigheder</primary>
   <secondary>til filer</secondary>
  </indexterm>

  <para>
   En harddisk i Linux er opbygget i et hierarki af kataloger
   (eng. "directory"), underkataloger samt filer. På den måde
   adskiller Linux sig ikke fra de fleste andre styresystemer. En del
   af katalogerne har specifikke formål.  For eksempel er alle
   brugernes filer placeret i underkataloger til
   <filename>/home</filename>.  Filer ejet af brugeren
   <filename>tyge</filename> vil typisk ligge i kataloget
   <filename>/home/tyge</filename> eller i underkataloger til
   dette. Kataloget <filename>/home/tyge</filename> kaldes i daglig
   tale for brugeren "tyge"s hjemmekatalog (eng. "home directory").
  </para>

  <para>
   Når du logger ind på din Linux-maskine i tekst-mode, vil du blive
   mødt af en kommando-prompt, dvs. en linie der ligner denne:

<screen>
<prompt>[tyge@hven ~]$</prompt>
</screen>
  </para>

  <para>
   Logger du ind grafisk, så skal du starte et terminal-vindue op -
   <command>xterm</command> er her den mest anvendte.
  </para>

  <para>
   <indexterm>
    <primary>pwd</primary>
   </indexterm>

   <indexterm>
    <primary>Kommandooversigt</primary>
    <secondary>pwd</secondary>
   </indexterm>

   <indexterm>
    <primary>Kommandooversigt</primary>
    <secondary>Grundlæggende kommandobeskrivelse</secondary>
    <tertiary>pwd</tertiary>
   </indexterm>

   Dit hjemmekatalog er som sagt stedet, hvor dine filer og
   underkataloger ligger placeret. Linux er et flerbrugersystem, og
   det er derfor vigtigt at kunne holde styr på, hvor de enkelte
   brugeres filer er. Kommandoen <command>pwd</command> (eng. "print
   working directory") fortæller dig, hvor i katalogstrukturen du
   pt. er:
<screen>
<prompt>[tyge@hven ~]$</prompt> <userinput>pwd</userinput>
/home/tyge
</screen>
  </para>

  <para>
   I det ovenstående eksempel er du i kataloget
   <filename>/home/tyge</filename>. Dette katalog er dit
   hjemmekatalog.  Der er to vigtige ting at bemærke. Du skal dels
   lægge mærke til, at Linux (generelt Unix) bruger en
   <filename>/</filename> (slash) og ikke en <filename>\</filename>
   (backslash) i stier, som det kendes fra Windows. Det er også
   vigtigt, at du husker at store og små bogstaver er forskellige i
   Linux. Filerne <filename>Linux.html</filename> og
   <filename>linux.html</filename> er således
   <emphasis>ikke</emphasis> den samme fil.
  </para>

  <para>
   Det er let at oprette underkataloger. F.eks. kan du oprette et
   underkatalog ved navn <filename>MitKatalog</filename> ved at
   skrive:

<indexterm>
 <primary>mkdir</primary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>mkdir</secondary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>Grundlæggende kommandobeskrivelse</secondary>
 <tertiary>mkdir</tertiary>
</indexterm>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>mkdir MitKatalog</userinput>
</screen>
  </para>

<indexterm>
 <primary>cd</primary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>cd</secondary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>Grundlæggende kommandobeskrivelse </secondary>
 <tertiary>cd</tertiary>
</indexterm>
<para>
<indexterm><primary>mkdir</primary></indexterm>
Kommandoen, som opretter et underkatalog, hedder med andre ord
<command>mkdir</command> (eng. "make directory"). I Linux er der
forskel på små og store bogstaver, og det er faktisk en god idé at
bruge stort begyndelsesbogstav i dine egne underkataloger, mens filer
begynder med et lille bogstav. Du kan nu skifte katalog
vha. kommandoen <command>cd</command> (eng. "change directory"). Lad
os skifte til kataloget <filename>MitKatalog</filename>:
</para>

<indexterm>
 <primary>cd</primary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>cd</secondary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>Grundlæggende kommandobeskrivelse</secondary>
 <tertiary>cd</tertiary>
</indexterm>

<screen>
<prompt>[tyge@hven ~]$ </prompt> <userinput>cd MitKatalog</userinput>
<prompt>[tyge@hven MitKatalog]$ </prompt> <userinput>pwd</userinput>
/home/tyge/MitKatalog
<prompt>[tyge@hven MitKatalog]$ </prompt> <userinput>cd ..</userinput>
<prompt>[tyge@hven ~]$ </prompt> <userinput>pwd</userinput>
/home/tyge
<prompt>[tyge@hven ~]$ </prompt>
</screen>
<indexterm>
 <primary>slette katalog</primary>
</indexterm>
<indexterm>
 <primary>rmdir</primary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>rmdir</secondary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>Grundlæggende kommandobeskrivelse</secondary>
 <tertiary>rmdir</tertiary>
</indexterm>
<para>
Som du kan se af ovenstående kommando-serie, skifter du til et
katalog et niveau højere oppe i strukturen ved at skrive <command>cd
..</command> Husk, at der skal være mellemrum efter <command>cd</command>.
I Linux betyder <filename>..</filename> altid kataloget
et niveau højere oppe (nogle gange kaldt forældrekataloget -
eng. "parent directory"). Hvis du ønsker at slette et tomt
underkatalog, der altså hverken indeholder filer eller underkataloger,
kan du bruge kommandoen <command>rmdir</command> (eng. "remove directory").
</para>

<indexterm><primary>slette katalog</primary></indexterm>

<indexterm>
 <primary>rmdir</primary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>rmdir</secondary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>Grundlæggende kommandobeskrivelse</secondary>
 <tertiary>rmdir</tertiary>
</indexterm>


<screen>
<prompt>[tyge@hven ~]$ </prompt> <userinput>rmdir MitKatalog</userinput>
<prompt>[tyge@hven ~]$ </prompt>
</screen>

<para>
Lad os nu se på indholdet af dit hjemmekatalog. Kommandoen
<command>ls</command> viser indholdet af det aktuelle
katalog. Kommandoen har dette lidt mærkelige navn, fordi det er en
forkortelse af det engelske "list". Korte og lidt kryptiske
kommandonavne er typisk for Linux. Hvis <command>ls</command> er din
første kommando på dit nye Linux-system, er resultatet noget kedeligt:
</para>

<indexterm>
 <primary>ls</primary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>ls</secondary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>Grundlæggende kommandobeskrivelse</secondary>
 <tertiary>ls</tertiary>
</indexterm>


<screen>
<prompt>[tyge@hven ~]$ </prompt> <userinput>ls</userinput>
<prompt>[tyge@hven ~]$ </prompt>
</screen>

<para>
 <indexterm>
  <primary>Skjulte filer</primary>
 </indexterm>

Det er nu ikke så svært at forstå: Du har jo ingen filer eller
underkataloger i dit hjemmekatalog endnu. Og dog, det er ikke helt
rigtigt, for skriver du <command>ls -a ~</command>, ser du, at der er
et par filer, der starter med punktum og ligger i
<filename>~</filename> (hjemmekataloget). 
Den lille krøllede dims <filename>~</filename> hedder i øvrigt en "tilde".
</para>

<screen>
<prompt>[tyge@hven ~]$ </prompt> <userinput>ls -a</userinput>
.              .Xdefaults     .bash_profile
..             .bash_logout   .bashrc
</screen>
<indexterm>
 <primary>Skjulte filer</primary>
</indexterm>

  <para>
   Filer, der starter med punktum, anvendes oftest til at gemme din
   opsætning for de enkelte programmer. De skal normalt ikke ændres
   særlig tit, og derfor vises de først, når du tilføjer
   <filename>-a</filename> som argument til <command>ls</command>.
  </para>

  <para>
   Vi vil skynde os at lære dig en vigtig Linux-kommando:
   <command>cp</command>. Denne kommando kopierer (eng. "copy") en
   fil. Du kopierer filen <filename>passwd</filename> fra kataloget
   <filename>/etc</filename> til det aktuelle katalog (kaldet
   <filename>.</filename>), som pt. er vores hjemmekatalog:
  </para>

  <indexterm><primary>kopiere filer</primary></indexterm>

<indexterm>
 <primary>cp</primary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>cp</secondary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>Grundlæggende kommandobeskrivelse</secondary>
 <tertiary>cp</tertiary>
</indexterm>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>cp /etc/passwd .</userinput>
<prompt>[tyge@hven ~]$ </prompt>
</screen>

  <para>
   Hvis du nu udfører <command>ls</command>-kommandoen igen, ser du,
   at der nu er dukket en fil ved navn <filename>passwd</filename> op
   i dit hjemmekatalog:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>ls</userinput>
passwd
<prompt>[tyge@hven ~]$ </prompt>
</screen>
  </para>

  <indexterm>
   <primary>Udvidelse af kommando</primary>
  </indexterm>
  <indexterm>
   <primary>ls -l</primary>
  </indexterm>
  <indexterm>
   <primary>Kommandooversigt</primary>
   <secondary>ls -l</secondary>
  </indexterm>
  <indexterm>
   <primary>Kommandooversigt</primary>
   <secondary>Grundlæggende kommandobeskrivelse</secondary>
   <tertiary>ls -l</tertiary>
  </indexterm>

  <para>
   Langt de fleste Linux-kommandoer kan udføres med forskellige
   funktioner slået til eller fra. Denne ekstra funktionalitet i en
   kommando styres oftest ved hjælp af et tilvalg. I Unix-verdenen gives et
   tilvalg typisk til kommandoen ved at angive en bindestreg og et
   bogstav.  <command>ls</command>-kommandoen har et nyttig tilvalg,
   som viser indholdet af et katalog i langt format (derfor bruges
   bogstavet l for det engelske "long").
  </para>

<screen>
<prompt>[tyge@hven ~]$ </prompt> <userinput>ls -l</userinput>
-rw-r--r--   1 tyge    tyge   652 Jul 14 22:32 passwd
<prompt>[tyge@hven ~]$ </prompt>
</screen>

  <para>
   Lad os forklare linien bagfra. Det sidste, du ser, er filens navn,
   som jo er <filename>passwd</filename>. Inden da kan du læse,
   hvornår filen blev oprettet eller sidst blev ændret. Vi kopierede
   filen den 14. juli kl. 22.32. Tallet 652 fortæller, hvor mange
   bytes filen fylder.
  </para>

  <para>
   De to gange "tyge" er vigtige at forstå. Alle filer og kataloger i
   et Linux-system har en ejer og tilhører en gruppe. Ejeren er en af
   brugerne på systemet, mens en gruppe består af én eller flere
   brugere. En bruger kan godt tilhøre flere grupper. Gruppebegrebet i
   Linux er særligt smart, hvis man arbejder i et firma, hvor der
   eksisterer flere afdelinger, idet hver afdeling kan have deres egen
   gruppe. I gamle dage (SuSE og tidligere versioner af Red Hat)
   tilhørte alle brugerne den samme gruppe, men i Red Hat Linux har
   man valgt at lade hver bruger have deres egen gruppe af
   sikkerhedsmæssige grunde. Som du kan se, ejes filen
   <filename>passwd</filename> af brugeren "tyge" og er tilknyttet
   gruppen "tyge".
  </para>
</sect1>


<sect1 id="unix-filrettigheder">
<title>Ændring af rettigheder</title>

  <indexterm>
   <primary>filrettigheder</primary>
  </indexterm>

  <para>
   1-tallet fortæller at der en 1 reference til filen. Det kryptiske
   "-rw-r--r--" handler om rettigheder. Som allerede nævnt har alle
   filer og kataloger en ejer og er tilknyttet en gruppe. Det er
   netop, hvad disse kryptiske tegn fortæller noget om. Det første
   tegn er filtypen, dvs. om det er en fil "-" eller et katalog
   "d". De andre ni tegn falder i tre grupper, som er rettigheder for
   ejeren, gruppen og alle andre. Et "r" fortæller, at det er tilladt
   at læse (eng. "read") en fil, et "w" betyder, at det er tilladt at
   skrive (eng. "write") til filen, dvs. ændre og evt. slette
   filen. Et "x" er en smule mere kompliceret: Hvis det drejer sig om
   en fil, er det tilladt at udføre den (eng. "execute") som program,
   og hvis der er tale om et katalog, er det tilladt at se indholdet
   af kataloget.
  </para>

   <para>
   Såfremt man skal kunne oprette nye filer i et katalog, skal man
   både have ret til at bruge kataloget ("x") og til at skrive til det
   ("w").  Så hvis medlemmerne af gruppen "brahe" skal kunne oprette
   nye filer i kataloget "<filename>/fælles</filename>" sætter
   ejerforholdene og adgangstilladelserne sådan:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>chgrp brahe /fælles</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod g+wx /fælles</userinput>
</screen>

   Vi kan for en god ordens skyld også lige se hvad resultatet blev:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>ls -ld /fælles</userinput>
drwx-wx---    2 tyge     brahe        4096 apr 10 11:57 /fælles
</screen>

   Brugeren "tyge" har altså adgang til både at læse og skrive
   (oprette nye filer) i kataloget, medlemmer af gruppen "brahe" har
   adgang til at skrive (oprette nye filer) i kataloget, mens andre
   ikke har nogle specielle adgangstilladelser.  Bemærk at en læse-
   ("r") eller en skrivetilladelse ("w") på et katalog ikke er noget
   værd uden en tilladelse til at bruge kataloget ("x").
  </para>

<FIGURE id="rettigheder-fig" FLOAT="1">
<title>Fil rettigheder
</title>
<GRAPHIC fileref="rettigheder.&magic;"  SCALE="50"></GRAPHIC>
</FIGURE>

  <para>
   <filename>passwd</filename> er - som du ser - en fil, hvor ejeren
   (brugeren "tyge") har tilladelse til at læse og skrive, mens
   gruppen "tyge" kun har ret til at læse. De samme rettigheder gælder
   for alle andre brugere, som ikke er med i gruppen "tyge".
  </para>

  <para>
   Det er naturligvis muligt at ændre på en fils rettigheder. Til
   dette formål bruger du kommandoen <command>chmod</command>
   (eng. "change mode"). Lad os ændre rettigheder på filen
   <filename>passwd</filename>, så gruppen kan skrive i filen:
  </para>

<indexterm>
 <primary>chmod</primary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>chmod</secondary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>Grundlæggende kommandobeskrivelse</secondary>
 <tertiary>chmod</tertiary>
</indexterm>

<screen>
<prompt>[tyge@hven ~]$ </prompt> <userinput>chmod g+w passwd</userinput>
<prompt>[tyge@hven ~]$ </prompt> <userinput>ls -l</userinput>
-rw-rw-r--   1 tyge    tyge         652 Jul 14 22:32 passwd
</screen>

  <para>
   Det lille "g" betyder gruppe, dvs. vi ønsker at ændre på gruppens
   rettigheder. Hvis det var ejeren, skulle vi bruge "u"
   (eng. "user"), mens et "o" betyder andre (eng. "other") og alle
   sammen kan ændres med "a" (eng. all). Bogstavet "w" betyder, at vi
   vil ændre på skriverettighederne, og et "+" betyder, at vi vil
   tillade det, mens et "-" vil forbyde det. Grupper kan oprettes, så
   kun nogle kan bruge dit program eller læse og/eller skrive i dine
   filer.
  </para>

<sect2 id="unix-filers-rettigheder">
<title>Ejere, grupper og andre - styring af rettigheder</title>

 <para>
  Hver ressource tilhører i Unix én bestemt bruger og én bestemt
  gruppe.  Man styrer adgangen til ressourcen ved at sætte eller
  stryge ni flag.  De ni flag er delt ind i tre kategorier efter hvem
  de gælder for:

  <itemizedlist>
   <listitem>
    <para>
     brugeren som ressourcen tilhører (engelsk: "user")
    </para>
   </listitem>

   <listitem>
    <para>
     gruppen som ressourcen tilhører (engelsk: "group")
    </para>
   </listitem>

   <listitem>
    <para>
     andre (engelsk: "others")
    </para>
   </listitem>
  </itemizedlist>

  og tre kategorier efter hvilken form for adgang de tillader:

  <itemizedlist>
   <listitem>
    <para>
     læse fra ressourcen (engelsk: "read")
    </para>
   </listitem>

   <listitem>
    <para>
     skrive i ressourcen (engelsk: "write")
    </para>
   </listitem>

   <listitem>
    <para>
     bruge ressourcen (engelsk: "execute")
    </para>
   </listitem>
  </itemizedlist>

  Tabel <xref linkend="tabel-unix-adgangsstyringsflag"/> giver en
  oversigt over de ni almindelige flag, samt nogle specialflag man
  også kan sætte eller stryge.
 </para>

 <table id="tabel-unix-adgangsstyringsflag">
  <title>Flag til adgangsstyring</title>

  <tgroup cols="2">
   <thead>
    <row>
     <entry>Talværdi</entry>
     <entry>Symbol</entry>
     <entry>Betydning</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry>0400</entry>
     <entry>u+r</entry>
     <entry>Brugeren som ressourcen tilhører har adgang til at læse fra ressourcen.</entry>
    </row>

    <row>
     <entry>0200</entry>
     <entry>u+w</entry>
     <entry>Brugeren som ressourcen tilhører har adgang til at skrive i ressourcen.</entry>
    </row>

    <row>
     <entry>0100</entry>
     <entry>u+x</entry>
     <entry>Brugeren som ressourcen tilhører har adgang til at bruge ressourcen.</entry>
    </row>

    <row>
     <entry>0040</entry>
     <entry>g+r</entry>
     <entry>Gruppen som ressourcen tilhører har adgang til at læse fra ressourcen.</entry>
    </row>

    <row>
     <entry>0020</entry>
     <entry>g+w</entry>
     <entry>Gruppen som ressourcen tilhører har adgang til at skrive i ressourcen.</entry>
    </row>

    <row>
     <entry>0010</entry>
     <entry>g+x</entry>
     <entry>Gruppen som ressourcen tilhører har adgang til at bruge ressourcen.</entry>
    </row>

    <row>
     <entry>0004</entry>
     <entry>o+r</entry>
     <entry>Andre har adgang til at læse fra ressourcen.</entry>
    </row>

    <row>
     <entry>0002</entry>
     <entry>o+w</entry>
     <entry>Andre har adgang til at skrive i ressourcen.</entry>
    </row>

    <row>
     <entry>0001</entry>
     <entry>o+x</entry>
     <entry>Andre har adgang til at bruge ressourcen.</entry>
    </row>

    <row>
     <entry>4000</entry>

     <entry>u+s</entry>

     <entry>Hvis ressourcen er et program, så vil det blive kørt med
     de rettigheder som brugeren det tilhører har.</entry>
    </row>

    <row>
     <entry>2000</entry>

     <entry>g+s</entry>

     <entry>Hvis ressourcen er et program, så vil det blive kørt med
     de rettigheder som gruppen det tilhører har.</entry>
    </row>

    <row>
     <entry>1000</entry>

     <entry>o+t</entry>

     <entry>Hvis ressourcen er et program, så vil det blive kopieret
     til "swap", så det kan starte hurtigere.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <example id="adgangsstyring-ingen-adgang">
  <title>Hindre alle andre i at læse hjemmekataloget</title>

  <para>
   Som en første praktisk øvelse i adgangsstyring kan man fratage alle andre
   alle adgangstilladelser under sit hjemmekatalog med kommandoen:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod -R go-rwx ~/</userinput>
</screen>

   Kommandoen <command>chmod</command> bruges til at sætte og stryge
   adgangsstyringsflag.  Tilvalget "-R" betyder at vi ønsker at det
   skal gøres rekursivt og inkludere alle filer og kataloger under det
   katalog vi udpeger.  Tilvalget "go-rwx" betyder at vi vil fratage
   ("-") gruppen og andre ("go") adgangen til at læse, skrive og bruge
   ("rwx") kataloget (og p.g.a. tilvalget "-R" også de underliggende
   filer og kataloger).  <filename>~/</filename>, hjemmekataloget, er
   det katalog hvis adgangsstyringsflag vi vil have
   <command>chmod</command> til at ændre.
  </para>

  <para>
   Husk dog på at adgangsstyringen aldrig hindrer
   systemadministratoren &mdash; eller programmer der kører med
   systemadministratorrettigheder &mdash; i at læse, skrive og ændre i
   dine filer.
  </para>
 </example>

 <example id="adgangsstyring-fremtidige-filer">
  <title>Standardadgangstilladelser for nye filer</title>

<indexterm>
 <primary>umask</primary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>umask</secondary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>Grundlæggende kommandobeskrivelse</secondary>
 <tertiary>umask</tertiary>
</indexterm>


  <para>
   Med <command>umask</command> kan man styre de rettigheder som 
   nye filer får. Man angiver et tre-cifret tal som anvendes 
   efterfølgende. Skal det gemmes fra gang til gang man logger ind,
   så kan man tilføje det til filen <filename>~/.bash_profile</filename>.
   Argumentet til <command>umask</command> er et tal for brugeren, 
   et tal for gruppen og endeligt et tal for "andre". Anvender man
   f.eks. <command>umask 000</command> vil alle kunne læse og skrive
   filerne. Med <command>022</command> har brugeren selv læse/skrive 
   rettigheder, mens gruppen og andre kun har læserettigheder.
   Med <command>umask 006</command> har bruger og gruppe samme læse
   og skrive-rettigheder, mens "andre" hverken har læse eller skrive-rettigheder.
  </para>
 </example>

 <example id="adgangsstyring-websted">
  <title>Gøre hjemmesiden synlig for Apache</title>

  <para>
   Hvis Apache skal kunne vise din hjemmeside, er det nødvendigt at
   den bruger, hvis rettigheder Apache kører med, har adgang til at
   læse både kataloget hjemmesiden ligger i og selve filen med
   hjemmesiden.  Men efter at vi i eksemplet <xref
   linkend="adgangsstyring-ingen-adgang"/> har hindret al adgang til
   filerne under <filename>~/</filename> for alle andre end dig selv,
   har Apache ikke længere adgang til det.  
   <footnote>
    <para>Erstat selv <filename>~/websted</filename> med stien til webserverens
    hjemmekatalog. Dette er ofte <filename>/var/www/</filename> som anvendes,
    men ikke altid.
    </para>
   </footnote>
   Først giver vi alle adgang
   til at læse kataloget <filename>~/websted/</filename> og alt hvad
   der ligger i det og dets underkataloger:
  </para>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod -R o+r ~/websted/</userinput>
</screen>

  <para>
   Men det alene er ikke nok, for for at komme til kataloget
   <filename>~/websted/</filename>, skal Apache også kunne komme til
   kataloget <filename>~/</filename> som vi stadig har frataget alle
   andre brugere alle adgangstilladelser til.  For at kunne komme til
   en fil eller et underkatalog i et katalog skal man have adgang til
   at bruge kataloget, så vi sætter "x"-flaget for "andre brugere"
   ("o") på katalogerne <filename>~/</filename> og
   <filename>~/websted/</filename>:
  </para>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod o+x ~/ ~/websted/</userinput>
</screen>

  <para>
   Hvis <filename>~/websted/</filename> har nogle underkataloger som
   Apache skal kunne læse filer fra, så bliver du også nødt til at
   udføre kommandoen <command>chmod o+x</command> på dem.  Det kan for
   eksempel gøres sådan her:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>find ~/websted/ -type d -print0 | xargs -0 chmod o+x</userinput>
</screen>
  </para>

  <para>
   Hvis du har grund til at gøre nogle data på dit websted synlige for
   Apache, men ikke for alle brugere på maskinen, kan du bede din
   systemadministrator om at sørge for at kataloget med dit websted
   hører til den gruppe med hvis adgangstilladelser Apache kører med
   og så sætte "x"-flaget på det katalog
   (<filename>~/websted/</filename> ovenfor) for gruppen i stedet for
   for "andre brugere".  Dette vil i praksis kun være relevant, hvis
   du har adgangskodebeskyttede oplysninger på webstedet, for ellers
   vil folk jo under alle omstændigheder kunne komme til dataene
   gennem Apache.
  </para>
 </example>

 <example id="adgangsstyring-familiebilleder">
  <title>Give en gruppe skrivetilladelse til et katalog</title>

  <para>
   Hvis vi skal sidde og bringe orden i familiebillederne, kan det
   være praktisk, hvis resten af familien også kan komme med nye
   billeder til samlingen.  Vi opretter derfor kataloget
   <filename>~/familiebilleder/</filename> som hele familien (gruppen
   "brahe") skal kunne læse og kataloget
   <filename>~/familiebilleder/nye/</filename>, hvor de også skal
   kunne tilføje billeder:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>mkdir ~/familiebilleder/</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>mkdir ~/familiebilleder/nye/</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>chgrp -R brahe ~/familiebilleder/</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod -R g+rx ~/familiebilleder/</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod g+w ~/familiebilleder/nye/</userinput>
</screen>

   Bemærk at der desværre ikke findes en mulighed for at give
   tilladelse til at tilføje data, der ikke også giver mulighed for at
   slette eller overskrive data.  Det betyder for eksempel at
   medlemmerne af gruppen "brahe" nu både kan tilføje og slette
   billeder i kataloget <filename>~/familiebilleder/nye/</filename>.
  </para>

 </example>

 <example id="adgangsstyring-eksterne-enheder">
  <title>Direkte styring af enheder</title>

  <para>
   Hvis du har koblet et instrument på enheden
   <filename>/dev/astrolab</filename> som alle brugerne i gruppen
   "astronomi" skal kunne styre, bliver du nødt til at give dem adgang
   til at skrive til enheden (så de kan sende kommandoer til
   instrumentet) og til at læse fra enheden (så de kan modtage data
   fra instrumentet).

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>su -</userinput>
Password: 
<prompt>[root@hven /root]# </prompt><userinput>chgrp astronomi /dev/astrolab</userinput>
<prompt>[root@hven /root]# </prompt><userinput>chmod g+rw /dev/astrolab</userinput>
<prompt>[root@hven /root]# </prompt><userinput>exit</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>ls -l /dev/astrolab</userinput>
brw-rw----    1 root     astronom   2,   0 apr 11  2002 /dev/astrolab
</screen>

   Da enheden er ejet af systemadministratoren, bliver vi først nødt
   til at skifte til systemadministratorkontoen med kommandoen
   <command>su -</command>.  Bemærk også at kommandoen <command>ls
   -l</command> kun viser de første otte bogstaver i navnet på en
   bruger eller en gruppe.
  </para>
 </example>
</sect2>

<sect2 id="adgangsstyring-suid">
<title>SGID giver rettigheder som om man er en ejeren</title>

<indexterm><primary>chmod +s KATALOG</primary></indexterm>
<indexterm><primary>SGID</primary></indexterm>

  <para>
   En af de mere avancerede ting man kan med
   <command>chmod</command> er at køre <command>chmod g+s
   KATALOG</command> (SGID), hvilket sørger for at alle nye filer i
   kataloget som default bliver lavet EUID.GID, hvor EUID er den
   kreerende proces' user-ID og GID er katalogets gruppe ID. Skal man
   dele filer med folk som ellers ville lave ændringer i
   læse/skrive-rettigheder for et godt ord, så er dette et smart
   trick.
  </para>
</sect2>
</sect1>
</chapter>
