<?xml encoding="UTF-8" ?>

<chapter id="unix-adgangsstyring">
 <title>Adgangsstyring</title>

 <!-- rationale mangler -->

 <para>
  I Unix har man mulighed for at styre hvilke brugere der har adgang
  til at gøre bestemte ting og se bestemte data.  Brugerne er opdelt i
  et hierarki med to niveauer.  &Oslash;verst er der systemadministratoren
  (bruger nummer nul) der typisk, men ikke nødvendigvis, har
  brugernavnet "root".  Nederst er der alle de andre brugere
  (brugernumre større end nul).  Systemadministratoren har adgang til
  at gøre alt på systemet og kan dermed lave større ulykker end de
  almindelige brugere.  Derfor er det vigtigt at man kun udfører
  programmer med systemadministratorrettigheder i det omfang det er
  strengt nødvendigt.
 </para>

 <para>
  Udover brugere arbejder Unix' adgangsstyring også med grupper.  Hver
  bruger er medlem af en eller flere grupper.  Ligesom man for en
  enkelt bruger kan styre hvad han skal have adgang til, så kan man
  også gøre det for en hel gruppe ad gangen.
 </para>

 <para>
  Unix styrer adgangen til ressourcer på filniveau.  Det betyder at
  den mest detaljerede opdeling af rettigheder som Unix kan håndtere
  er enkelte dokumenter, kataloger eller eksterne enheder.  Hvis man
  har brug for en mere detaljeret opdeling af adgangen til data,
  klarer man det typisk ved at køre et databasesystem ovenpå Unix.
 </para>

 <para>
  Hver ressource tilhører i Unix én bestemt bruger og én bestemt
  gruppe.  Man styrer adgangen til ressourcen ved at sætte eller
  stryge ni flag.  De ni flag er delt ind i tre kategorier efter hvem
  de gælder for:

  <itemizedlist>
   <listitem>
    <para>
     brugeren som ressourcen tilhører (engelsk: "user")
    </para>
   </listitem>

   <listitem>
    <para>
     gruppen som ressourcen tilhører (engelsk: "group")
    </para>
   </listitem>

   <listitem>
    <para>
     andre (engelsk: "others")
    </para>
   </listitem>
  </itemizedlist>

  og tre kategorier efter hvilken form for adgang de tillader:

  <itemizedlist>
   <listitem>
    <para>
     læse fra ressourcen (engelsk: "read")
    </para>
   </listitem>

   <listitem>
    <para>
     skrive i ressourcen (engelsk: "write")
    </para>
   </listitem>

   <listitem>
    <para>
     bruge ressourcen (engelsk: "execute")
    </para>
   </listitem>
  </itemizedlist>

  <xref linkend="tabel-unix-adgangsstyringsflag"/> giver en
  oversigt over de ni almindelige flag, samt nogle specialflag man
  også kan sætte eller stryge. Det skal nævnes at flagene kan kombineres
  til at lave en meget fleksibel adgang til data.
 </para>

 <table id="tabel-unix-adgangsstyringsflag">
  <title>Flag til adgangsstyring</title>

  <tgroup cols="3">
   <thead>
    <row>
     <entry>Talværdi</entry>
     <entry>Symbol</entry>
     <entry>Betydning</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry>0400</entry>
     <entry>u+r</entry>
     <entry>Brugeren som ressourcen tilhører har adgang til at læse fra ressourcen.</entry>
    </row>

    <row>
     <entry>0200</entry>
     <entry>u+w</entry>
     <entry>Brugeren som ressourcen tilhører har adgang til at skrive i ressourcen.</entry>
    </row>

    <row>
     <entry>0100</entry>
     <entry>u+x</entry>
     <entry>Brugeren som ressourcen tilhører har adgang til at bruge ressourcen.</entry>
    </row>

    <row>
     <entry>0040</entry>
     <entry>g+r</entry>
     <entry>Gruppen som ressourcen tilhører har adgang til at læse fra ressourcen.</entry>
    </row>

    <row>
     <entry>0020</entry>
     <entry>g+w</entry>
     <entry>Gruppen som ressourcen tilhører har adgang til at skrive i ressourcen.</entry>
    </row>

    <row>
     <entry>0010</entry>
     <entry>g+x</entry>
     <entry>Gruppen som ressourcen tilhører har adgang til at bruge ressourcen.</entry>
    </row>

    <row>
     <entry>0004</entry>
     <entry>o+r</entry>
     <entry>Andre har adgang til at læse fra ressourcen.</entry>
    </row>

    <row>
     <entry>0002</entry>
     <entry>o+w</entry>
     <entry>Andre har adgang til at skrive i ressourcen.</entry>
    </row>

    <row>
     <entry>0001</entry>
     <entry>o+x</entry>
     <entry>Andre har adgang til at bruge ressourcen.</entry>
    </row>

    <row>
     <entry>4000</entry>

     <entry>u+s</entry>

     <entry>Hvis ressourcen er et program, så vil det blive kørt med
     de rettigheder som brugeren det tilhører har.</entry>
    </row>

    <row>
     <entry>2000</entry>

     <entry>g+s</entry>

     <entry>Hvis ressourcen er et program, så vil det blive kørt med
     de rettigheder som gruppen det tilhører har.  Og hvis ressourcen
     er et katalog, så vil filer oprettet i det katalog automatisk
     tilhøre samme gruppe som kataloget tilhører.</entry>
    </row>

    <row>
     <entry>1000</entry>

     <entry>o+t</entry>

     <entry>Hvis ressourcen er et program, så vil det blive kopieret
     til "swap", så det kan starte hurtigere.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <example id="adgangsstyring-vise">
  <title>Se adgangstilladelser for filer og kataloger</title>

  <para>
   Kommandoen <command>ls</command> (vis katalogindhold) kan bruges
   til at vise hvilke adgangstilladelser der er sat for en fil.  Vi
   kan for eksempel kigge i kataloget <filename>~/websted/</filename>:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>ls -l ~/websted/</userinput>
totalt 8
-rw-r--r--    1 tyge     brahe        2414 maj 18 19:51 index.html
drwxr-xr-x    3 tyge     brahe        4096 mar 30 16:09 Artikler
</screen>

   Der er en fil (<filename>index.html</filename>) markeret med et
   <literal>-</literal> som første tegn på linjen og et underkatalog
   (<filename>Artikler</filename>) markeret med et
   <literal>d</literal> som første tegn på linjen.  Begge tilhører
   brugeren <literal>tyge</literal> og gruppen
   <filename>brahe</filename>.

   Brugeren <literal>tyge</literal> har tilladelse til både at læse og
   skrive i filen <filename>index.html</filename> mens brugere i
   gruppen <literal>brahe</literal> samt andre brugere på systemet kun
   har tilladelse til at læse i filen.

   Brugeren <literal>tyge</literal> har tilladelse til både at læse og
   skrive i kataloget <filename>Artikler</filename> mens brugere i
   gruppen <literal>brahe</literal> samt andre brugere på systemet kun
   har tilladelse til at læse i og bruge kataloget.
  </para>
 </example>

 <example id="adgangsstyring-ingen-adgang">
  <title>Hindre alle andre i at l&aelig;se hjemmekataloget</title>

  <para>
   Som en første praktisk øvelse i adgangsstyring kan man fratage alle andre
   alle adgangstilladelser under sit hjemmekatalog med kommandoen:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod -R go-rwx ~/</userinput>
</screen>

   Kommandoen <command>chmod</command> bruges til at sætte og stryge
   adgangsstyringsflag.  Tilvalget "-R" betyder at vi ønsker at det
   skal gøres rekursivt og inkludere alle filer og kataloger under det
   katalog vi udpeger.  Tilvalget "go-rwx" betyder at vi vil fratage
   ("-") gruppen og andre ("go") adgangen til at læse, skrive og bruge
   ("rwx") kataloget (og p.g.a. tilvalget "-R" også de underliggende
   filer og kataloger).  <filename>~/</filename>, hjemmekataloget, er
   det katalog hvis adgangsstyringsflag vi vil have
   <command>chmod</command> til at ændre.
  </para>

  <para>
   Husk dog på at adgangsstyringen aldrig hindrer
   systemadministratoren &mdash; eller programmer der kører med
   systemadministratorrettigheder &mdash; i at læse, skrive og ændre i
   dine filer. For netværksdrev er dette dog ikke nødvendigvis sandt.
   Man kan fra en netværksserver hindre at lokale "root"-brugere får
   fuld adgang til data (eng: root-squashing).
<indexterm><primary>root</primary><secondary>squashing</secondary></indexterm>
  </para>
 </example>

 <example id="adgangsstyring-fremtidige-filer">
  <title>Standardadgangstilladelser for nye filer</title>

  <indexterm>
   <primary>umask</primary>
  </indexterm>

  <indexterm>
   <primary>Kommandooversigt</primary>
   <secondary>umask</secondary>
  </indexterm>

  <indexterm>
   <primary>Kommandooversigt</primary>
   <secondary>Grundlæggende kommandobeskrivelse</secondary>
   <tertiary>umask</tertiary>
  </indexterm>

  <para>
   Med <command>umask</command> kan man styre de rettigheder som nye
   filer får.  Man angiver et tre-cifret tal som anvendes
   efterfølgende.  Skal det gemmes fra gang til gang man logger ind,
   så kan man tilføje det til sin kommandofortolkers
   opsætningsfil(er).  Argumentet til <command>umask</command> er et
   tal (skrevet med grundtal 8) der definerer hvilke af de
   grundlæggende ni adgangstilladelser der <emphasis>ikke</emphasis> skal gives til
   nyoprettede filer.  Tallet dannes ved at lægge talværdierne fra
   tabellen <xref linkend="tabel-unix-adgangsstyringsflag"/> for de
   adgangstilladelser der ikke skal gives sammen.
  </para>

  <para>
   Hvis vi udelukkende vil begrænse adgangstilladelserne for
   <emphasis>andre</emphasis> brugere, skal vi således bruge
   talværdierne 0001 (ingen brugstilladelser til andre), 0002 (ingen
   skrivetilladelser til andre) og 0004 (ingen læsetilladelser til
   andre).  Det er kun de sidste tre cifre der betyder noget, så
   kommandoen bliver således:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>umask 007</userinput>
</screen>

   Vi kan bruge kommandoen uden tilvalg til at se hvad indstillingerne
   er:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>umask</userinput>
007
</screen>

   Og for en god ordens skyld opretter vi en ny fil og ser hvilke
   adgangstilladelser den oprettes med:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>touch Bond</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>ls -l Bond</userinput>
-rw-rw----    1 tyge     brahe           0 maj 18 20:19 Bond
</screen>
  </para>

  <para>
   Til daglig er det nok mest hensigtsmæssigt at andre (også gruppen)
   ikke har automatisk har adgang til en brugers filer, hvilket svarer
   til tilvalget <literal>077</literal> til <command>umask</command>:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>umask 077</userinput>
</screen>

   Vi kan bruge kommandoen uden tilvalg til at se hvad indstillingerne
   er:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>umask</userinput>
077
</screen>

   Og for en god ordens skyld opretter vi igen en ny fil og ser hvilke
   adgangstilladelser den oprettes med:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>touch James</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>ls -l James</userinput>
-rw-------    1 tyge     brahe           0 maj 18 20:19 James
</screen>
  </para>
 </example>

 <example id="adgangsstyring-websted">
  <title>G&oslash;re hjemmesiden synlig for Apache</title>

  <para>
   Hvis Apache skal kunne vise din hjemmeside, er det nødvendigt at
   den bruger, hvis rettigheder Apache kører med, har adgang til at
   læse både kataloget hjemmesiden ligger i og selve filen med
   hjemmesiden.  Men efter at vi i <xref
   linkend="adgangsstyring-ingen-adgang"/> har hindret al adgang til
   filerne under <filename>~/</filename> for alle andre end dig selv,
   har Apache ikke længere adgang til det.  Først giver vi alle adgang
   til at læse kataloget <filename>~/websted/</filename> og alt hvad
   der ligger i det og dets underkataloger:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod -R o+r ~/websted/</userinput>
</screen>
  </para>

  <para>
   Men det alene er ikke nok, for for at komme til kataloget
   <filename>~/websted/</filename>, skal Apache også kunne komme til
   kataloget <filename>~/</filename> som vi stadig har frataget alle
   andre brugere alle adgangstilladelser til.  For at kunne komme til
   en fil eller et underkatalog i et katalog skal man have adgang til
   at bruge kataloget, så vi sætter "x"-flaget for "andre brugere"
   ("o") på katalogerne <filename>~/</filename> og
   <filename>~/websted/</filename>:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod o+x ~/ ~/websted/</userinput>
</screen>
  </para>

  <para>
   Hvis <filename>~/websted/</filename> har nogle underkataloger som
   Apache skal kunne læse filer fra, så bliver du også nødt til at
   udføre kommandoen <command>chmod o+x</command> på dem.  Det kan for
   eksempel gøres sådan her:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>find ~/websted/ -type d -print0 | xargs -0 chmod o+x</userinput>
</screen>
  </para>

  <para>
   Hvis du har grund til at gøre nogle data på dit websted synlige for
   Apache, men ikke for alle brugere på maskinen, kan du bede din
   systemadministrator om at sørge for at kataloget med dit websted
   hører til den gruppe med hvis adgangstilladelser Apache kører med
   og så sætte "x"-flaget på det katalog
   (<filename>~/websted/</filename> ovenfor) for gruppen i stedet for
   for "andre brugere".  Dette vil i praksis kun være relevant, hvis
   du har adgangskodebeskyttede oplysninger på webstedet, for ellers
   vil de andre brugere på maskinen jo under alle omstændigheder kunne
   komme til dataene gennem Apache.
  </para>
 </example>

 <example id="adgangsstyring-familiebilleder">
  <title>Give en gruppe skrivetilladelse til et katalog</title>

  <para>
   Hvis vi skal sidde og bringe orden i familiebillederne, kan det
   være praktisk, hvis resten af familien også kan komme med nye
   billeder til samlingen.  Vi opretter derfor kataloget
   <filename>~/familiebilleder/</filename> som hele familien (gruppen
   "brahe") skal kunne læse og kataloget
   <filename>~/familiebilleder/nye/</filename>, hvor de også skal
   kunne tilføje billeder:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>mkdir ~/familiebilleder/</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>mkdir ~/familiebilleder/nye/</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>chgrp -R brahe ~/familiebilleder/</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod -R g+rx ~/familiebilleder/</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>chmod g+w ~/familiebilleder/nye/</userinput>
</screen>

   Bemærk at der desværre ikke findes en mulighed for at give
   tilladelse til at tilføje data, der ikke også giver mulighed for at
   slette eller overskrive data.  Det betyder for eksempel at
   medlemmerne af gruppen "brahe" nu både kan tilføje og slette
   billeder i kataloget <filename>~/familiebilleder/nye/</filename>.
  </para>

 </example>

 <example id="adgangsstyring-eksterne-enheder">
  <title>Direkte styring af enheder</title>

  <para>
   Hvis du har koblet et instrument på enheden
   <filename>/dev/astrolabrium</filename> som alle brugerne i gruppen
   "astronomi" skal kunne styre, bliver du som root nødt til at give dem adgang
   til at skrive til enheden (så de kan sende kommandoer til
   instrumentet) og til at læse fra enheden (så de kan modtage data
   fra instrumentet).

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>su -</userinput>
Password: 
<prompt>[root@hven /root]# </prompt><userinput>chgrp astronomi /dev/astrolabrium</userinput>
<prompt>[root@hven /root]# </prompt><userinput>chmod g+rw /dev/astrolabrium</userinput>
<prompt>[root@hven /root]# </prompt><userinput>exit</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>ls -l /dev/astrolabrium</userinput>
brw-rw----    1 root     astronom   2,   0 apr 11  2002 /dev/astrolabrium
</screen>

   Da enheden er ejet af systemadministratoren, bliver vi først nødt
   til at skifte til systemadministratorkontoen med kommandoen
   <command>su -</command>.  Bemærk også at kommandoen <command>ls
   -l</command> kun viser de første otte bogstaver i navnet på en
   bruger eller en gruppe.
  </para>
 </example>

 <example id="suid">
  <title>suid</title>

  <indexterm>
   <primary>Suid</primary>
  </indexterm>

  <indexterm>
   <primary>kommandooversigt</primary>
   <secondary>suid</secondary>
  </indexterm>

  <indexterm>
   <primary>kommandooversigt</primary>
   <secondary>grundlæggende kommandobeskrivelse</secondary>
   <tertiary>suid</tertiary>
  </indexterm>

  <para>
   Normalt vil det være sådan, at når du starter et program op, f.eks.
   kommandoen <command>ls</command>, vil Linux køre dette program som
   den bruger, der startede programmet. Nogle gange kan det være
   nødvendigt at give en bruger flere rettigheder uden at skulle give
   brugeren systemadministratorrettigheder (på linje med
   <literal>root</literal>).
  </para>

  <para>
   Suid (set user id) er et begreb (ikke et program), som giver mulighed for,
   at du kan udføre et program, som om du var en anden
   bruger. Det bruges normalt til at give almindelige brugere
   rettigheder til at udføre programmer, som om de var superbrugeren
   (<literal>root</literal>).

<screen>
<prompt>[tyge@hven MitKatalog]$ </prompt><userinput>chmod +s FILNAVN</userinput>
</screen>

   Når kommandoen <command>FILNAVN</command> udføres, vil Linux-kernen
   køre programmet med rettighederne for brugeren, der
   <emphasis>ejer</emphasis> filen, og ikke som brugeren, der starter
   programmet.
  </para>

  <para>
   Dette kan f.eks. ses ved programmet <command>ping</command>, der skal
   være "suid root". Det skyldes, at det kun er root, der kan åbne den
   slags netværksforbindelse, som <command>ping</command> bruger.
  </para>

<screen>
<prompt>[tyge@hven MitKatalog]$ </prompt><userinput>ls /sbin/ping</userinput>
-rwsr-xr-x   1 root     root        14804 Apr  7 23:21 /bin/ping
</screen>

<para>
Suid er den største sikkerhedssynder på Unix-systemer. Det er f.eks. en
dødssynd at sætte suid root for kommandofortolkerprogrammer, da det er
muligt for en bruger at narre programmet til at efterlade en
kommandofortolker med systemadministratorrettigheder. Jo færre
suid filer du har på dit system jo bedre, men nogle ting er nødt til at
være suid root for at fungere. Du kan se hvilke filer, der er suid root
med følgende kommando:
</para>

<screen>
<prompt>[tyge@hven MitKatalog]$ </prompt><userinput>find / -user root -perm +4000
</userinput>
</screen>

<para>
Se mere i artiklen <ulink url="http://www.sslug.dk/artikler/Linux_sikkerhed/rootaccess.html">http://www.sslug.dk/artikler/Linux_sikkerhed/rootaccess.html</ulink>
om problemer med Suid.
</para>
 </example>
</chapter>

<!--  LocalWords:  root user group others read write execute swap ls rw tyge xr
 -->
<!--  LocalWords:  brahe index.html drwxr mar chmod rwx umask xargs mkdir chgrp
 -->
<!--  LocalWords:  rx brw apr suid rwsr
 -->
