<?xml version='1.0' encoding='UTF-8' ?>
<!-- Jacob mener at en shell skal hedde kommandofortolker -->
<!-- Peter mener at en shell bør være kendt af læseren -->
<!-- Peter og Jacob er ikke altid enige om sprog-brug :-) -->

<chapter id="kommandofortolkere-linux">
 <title>Linux i teksttilstand</title>

 <indexterm><primary>kommandofortolker</primary></indexterm>
 <indexterm><primary>shell</primary></indexterm>
 <indexterm><primary>Unix</primary></indexterm>
 <indexterm><primary>kommandolinje</primary></indexterm>

 <para>
  Linux er et unix-lignende styresystem.
  Unix' historie går tilbage til slutningen af 1960'erne,
  hvor en gruppe forskere ved AT&amp;T's forskningslaboratorium
  eksperimenterede med computerens uanede muligheder.
  En af de grundlæggende ideer i Unix er at det skal være let at
  kombinere mange små programmer til større løsninger.
 </para>

 <para>
  Dengang Unix var ungt var der ikke noget, der hed grafiske
  brugergrænseflader og mus. Brugeren havde udelukkende adgang til at styre
  computeren gennem en tekstterminal. Med tiden udvikledes der meget
  effektive kommandofortolkere til både interaktiv brug og programmering af
  disse systemer. Denne udvikling fortsætter den dag idag (blandt andet ud
  fra en anerkendelse af at det er lettere at udtrykke sig præcist med ord
  end ved at pege, nikke og ryste på hovedet). Disse kommandofortolkere
  findes stort set alle i linux-udgaver, så du også kan styre dit
  linux-system med præcise og effektive kommandoer.
  Begynder du at bruge Linux seriøst, vil du forhåbentlig også finde ud af
  at kommandofortolkere er et effektivt redskab til at automatisere
  løsningen af rutineprægede opgaver.
 </para>

 <para>
  Nu må du ikke tro, at det kun er af gammel vane, at unix-brugere
  taster deres kommandoer ind på en kommandolinje; faktisk er det
  muligt at udføre endda meget komplekse opgaver med meget lidt
  tastearbejde. Det skyldes, at der med Unix altid følger et hav af
  hjælpeprogrammer. Lad os give dig et eksempel &ndash; bare rolig, vi
  forventer ikke, at du allerede nu kan gennemskue, hvordan det
  fungerer, men vi vil bare vise dig, hvor lidt tastearbejde der skal
  til for at udføre store opgaver. Lad os antage, at du har en
  hjemmeside liggende på maskinen
  <filename>www.hven.sslug.dk</filename>. Du er en produktiv person med
  mange interesser, så din hjemmeside består af mange HTML-filer. En
  dag flytter du, og din hjemmeside skal skifte maskine &ndash; din nye
  maskine hedder <filename>www.saltholm.sslug.dk</filename>. Dit problem er,
  at du skal rette alle henvisninger på dine sider. I Unix (og dermed
  også Linux) kan det gøres ganske let ved at udføre kommandoen (du
  skal ikke gøre det):

  <indexterm>
   <primary>find</primary>
  </indexterm>
  <indexterm>
   <primary>kommandooversigt</primary>
   <secondary>find</secondary>
  </indexterm>

  <indexterm>
   <primary>xargs</primary>
  </indexterm>
  <indexterm>
   <primary>kommandooversigt</primary>
   <secondary>xargs</secondary>
  </indexterm>

  <indexterm>
   <primary>perl</primary>
  </indexterm>
  <indexterm>
   <primary>kommandooversigt</primary>
   <secondary>perl</secondary>
  </indexterm>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>find -iregex '.*html?' -print0 |\
xargs -0 sed -i 's/www\.hven\.sslug\.dk/www.saltholm.sslug.dk/gi'</userinput>
</screen>
 </para>

 <para>
  Når du udfører kommandoen, bliver alle filer, som ender på "html"
  (bl.a. også "HTML" og "htm"), fundet (<command>find</command>). Du
  benytter et program ved navn <command>sed</command> til at foretage
  selve søg-og-erstat-proceduren. Dette eksempel er nok lidt for
  avanceret til vores bog her, men vi håber, at du nu kan se, hvor
  kraftfuld en enkel kommandolinje kan være i Unix.
 </para>

 <sect1 id="virtuel-konsol">
  <title>Virtuelle konsoller</title>

  <indexterm>
   <primary>virtuelle konsoller</primary>
  </indexterm>

  <indexterm>
   <primary>konsol</primary>
   <secondary>virtuel</secondary>
  </indexterm>

  <indexterm>
   <primary>teksttilstand</primary>
  </indexterm>

  <para>
   Når du vil styre Linux ved at skrive kommandoer i stedet for at
   være afhængig af en grafisk brugergrænseflade er det en mulighed at
   logge direkte ind med skærmen i ren teksttilstand.  Hvis du sidder
   ved en linux-maskine der er i grafiktilstand, kan du typisk gå over
   til ren teksttilstand ved at taste Ctrl-Alt-F1.  Det tastetryk
   bringer dig over til et helt andet skærmbillede, der er uafhængigt
   af det du så før (et tryk på Ctrl-Alt-F7 eller Ctrl-Alt-F8 burde
   bringe dig tilbage igen).  Over på ren-tekst-skærmbilledet burde
   der stå noget i stil med "login:" efterfulgt af en blinkende cursor
   (prøv ellers at taste Return eller Enter en enkelt gang for at få
   det frem).  Her kan du ganske som ovre på det grafikbaserede
   skærmbillede logge ind på maskinen ved at indtaste dit brugernavn
   og din adgangskode, men når du logger ind på det tekstbaserede
   skærmbillede er det eneste du får en såkaldt "prompt" eller
   "kommandolinje".  Afhængig af opsætningen af din konto vil den
   kunne se lidt forskellig ud, men dette er en mulighed:

<screen>
<prompt>[tyge@hven ~]$ </prompt>
</screen>

   Her kan du skrive kommandoer til systemet.  I første omgang er den
   vigtigste kommando nok <command>logout</command>, som du bruger til
   at logge ud igen, så skærmbilledet er klart til en anden bruger
   (eller bare til en anden gang).  Alternativt kan man i nogle
   tilfælde bruge kommandoen <command>exit</command> eller
   tastekombinationen Ctrl-D.
  </para>

  <para>
   På et typisk linux-system vil Ctrl-Alt-F1, Ctrl-Alt-F2, og så
   videre indtil til Ctrl-Alt-F6 bringe dig til seks forskellig
   tekstbaserede skærmbilleder, mens Ctrl-Alt-F7 og nogle gange også
   Ctrl-Alt-F8 vil bringe dig til grafikbaserede skærmbilleder.  Disse
   syv eller otte forskellige skærmbilleder kaldes systemets virtuelle
   konsoller.  En fordel ved at have flere virtuelle konsoller er at
   forskellige brugere kan bruge den samme skærm uden at de behøver at
   lukke de programmer de har i gang når de bytter.
  </para>
 </sect1>

 <sect1 id="terminalen">
  <title>Terminalvinduer</title>

  <para>
   Hvis du ikke er meget for kun at arbejde med tekstbaserede
   programmer (de er for eksempel ikke praktiske til at vise billeder)
   har du brug for at kunne få en kommandolinje frem inde i det
   grafikbaserede system (der hedder "X" eller "X Window System" på et
   almindeligt linux-system).  Når du er logget ind gør du det ved at
   starte et terminalemuleringsprogram.  Det mest udbredte er
   <command>xterm</command> men hvis du bruger KDE eller Gnome kan du
   med fordel benytte henholdsvis <command>konsole</command> eller
   <command>gnome-terminal</command> i stedet for, da de er lidt bedre
   integrerede i de to skrivebordssystemer.
  </para>

  <para>
   Man får typisk startet et terminalemuleringsprogram ved at klikke
   på en ikon med en muslingeskal eller en sort skærm, eller ved at
   vælge et menupunkt der hedder noget i stil med "Konsole",
   "Terminal" eller "xterm".
  </para>

  <para>
   <indexterm>
    <primary>xterm</primary>
   </indexterm>
   <indexterm>
    <primary>kommandooversigt</primary>
    <secondary>xterm</secondary>
   </indexterm>

   <figure id="xterm-fig" float="1">
    <title>Eksempel på <command>xterm</command></title>
    <graphic fileref="xterm.&magic;" scale="40"></graphic>
   </figure>

   Hvis du bruger <command>xterm</command> kan det være nyttigt at
   vide at man med et tryk på Ctrl-tasten og en af de tre museknapper
   får tre forskellige menuer til at justere opsætningen af
   terminalvinduet. Ctrl-venstre musetast vil man sjældent få brug
   for, men Ctrl-midterste musetast giver blandt andet mulighed for
   (de)aktivere vinduets rullebjælke og at nulstille terminalvinduet
   ("Reset") og Ctrl-højre musetast giver mulighed for at vælge
   skriftstørrelse.
  </para>

  <para>
   <indexterm>
    <primary>konsole</primary>
   </indexterm>
   <indexterm>
    <primary>kommandooversigt</primary>
    <secondary>konsole</secondary>
   </indexterm>

   Hvis du bruger <command>konsole</command> kan det være nyttigt at
   vide at du kan have flere forskellige aktive kommandofortolkere i
   samme vindue.  Du kan starte en ekstra kommandofortolker med
   Ctrl-Alt-N, og du kan skifte mellem de kommandofortolkere der kører i
   vinduet med Shift-Pil-til-venstre og Shift-Pil-til-højre.
  </para>
 </sect1>

<!--
  <para>
   Når du indtaster kommandoer på en kommandolinje, benytter du dig af
   et program, som i daglig tale omtales kommandofortolkeren, skallen
   eller (på danglish) shellen. Der findes mange forskellige
   kommandofortolkere, men BASH (Bourne Again SHell) er den mest
   udbredte under Linux. Kommandofortolkere fortolker hvad du skriver,
   og udfører de kommandoer, du ønsker.
  </para>

... terminalvinduer

 Typisk vil <command>bash</command> være sat til
   at være din standard-kommandofortolker.  Senere i dette kapitel ser
   vi nærmere på alternativerne.
  </para>


, hvor du kan arbejde med forskellige ting i teksttilstand.
 i tekst på maskinens konsol.

   Nu skal du til at lære kommandoer til Linux. I starten af dette
   kapitel har du faktisk benyttet to kommandoer uden at vide det -
   nemlig <command>touch</command> og <command>rm</command> (mere om
   dem senere i kapitlet).  Det sted, hvor du i den simple tekstmode
   skrev disse kommandoer, kalder vi for konsollen. Linux-konsollen er
   i virkeligheden ikke så primitiv, som den umiddelbart ser ud til.
  </para>

  <para>
   <indexterm><primary>Alt-F1</primary></indexterm>
   <indexterm><primary>Ctrl-Alt-F1</primary></indexterm>

   Der er faktisk mere end én konsol. Konsolsystemet består af en
   række virtuelle konsoller. Du skifter mellem dem ved at trykke på
   Alt og en funktionstast mellem F1 og F7, hvor "Alt-F7" dog er
   tilbage til den grafiske X skærmflade, hvis den er startet op. Hvis
   du står i X og skal tilbage til de tekstbaserede konsoller, skal du
   bruge "Ctrl-Alt-F1" op til "Ctrl-Alt-F6". Linux er et ægte
   multitasking-system, så du kan bare logge ind på flere terminaler
   og arbejde. I hver konsol kører der en skal, som fortolker dine
   kommandoer. Linux er &ndash; som vi allerede har sagt mange gange &ndash; meget
   fleksibelt, så faktisk kan du have forskellige kommandofortolkere
   kørende i forskellige konsoller!
  </para>
 </sect1>
-->

<!--
   <para>
    Vi kan også fra starten fortælle dig, at store og små bogstaver
    ikke er det samme for filnavne.  Du kan også godt bruge meget
    lange filnavne, og der er ikke den samme DOS-opbygning med
    fil-endelser på maksimalt tre bogstaver
    (<filename>CONFIG.SYS</filename> osv.). I modsætning til Microsoft
    Windows vises alle filer med <filename>*</filename> og ikke
    <filename>*.*</filename> &ndash; dertil kommer skjulte filer, som
    starter med et punktum <filename>.*</filename> &ndash; det er ret
    vigtigt.
   </para>
-->

 <sect1 id="shells-under-Linux">
  <title>Kommandofortolkerne</title>

  <para>
   En kommandofortolker er et program som brugeren kan bruge til at
   kommunikere med styresystemet.  Den vil typisk kunne bruges til at
   starte andre programmer, til at styre hvordan data skal kanaliseres
   fra program til program og til at undersøge systemets tilstand.
  </para>

  <para>
   Man kan se hvilke godkendte kommandofortolkere som findes på systemet 
   i filen <filename>/etc/shells</filename>. Hvis man
   efterinstallerer en kommandofortolker på systemet, er det vigtigt
   at man husker at føje den fulde sti til den nye
   kommandofortolker til <filename>/etc/shells</filename>, da de
   brugere der vil bruge den kommandofortolker ellers kan få
   problemer.
  </para>

  <para>
   På en SuSE-maskine kan <filename>/etc/shells</filename> se ud som
   følger &ndash; om de alle rent faktisk er installerede er ikke garanteret.
   Oftest følger alle med Linux-distributionerne.

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>cat /etc/shells</userinput>
/bin/ash
/bin/bash
/bin/bash1
/bin/csh
/bin/false
/bin/ksh
/bin/sh
/bin/tcsh
/bin/true
/usr/bin/csh
/usr/bin/ksh
/usr/bin/passwd
/usr/bin/bash
/usr/bin/rbash
/usr/bin/tcsh
/usr/bin/zsh
</screen>
  </para>

  <para>
   <indexterm>
    <primary>bash</primary>
   </indexterm>
   <indexterm>
    <primary>kommandooversigt</primary>
    <secondary>bash</secondary>
   </indexterm>

   <indexterm>
    <primary>tcsh</primary>
   </indexterm>
   <indexterm>
    <primary>kommandooversigt</primary>
    <secondary>tcsh</secondary>
   </indexterm>

   <indexterm>
    <primary>zsh</primary>
   </indexterm>
   <indexterm>
    <primary>kommandooversigt</primary>
    <secondary>zsh</secondary>
   </indexterm>

   I det følgende går vi nærmere ind i flere af de kommandofortolkere
   man typisk anvender.  De mest anvendte kommandofortolkere er
   <command>bash</command> og <command>tcsh</command> (i den
   rækkefølge), mens det er sjældnere at folk bruger de ældre
   kommandofortolkere <command>csh</command> og
   <command>ksh</command>, eller den forholdsvis nye
   <command>zsh</command>.
  </para>

  <para>
   Man kan afprøve en kommandofortolker ved simpelt hen at starte den
   som ethvert andet program:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>zsh</userinput>
<prompt>hven% </prompt>
</screen>

   Man kan (i princippet) altid stoppe en kommandofortolker med
   tastetrykket Ctrl-D, der signalerer at der ikke er flere data til
   programmet:

<screen>
<prompt>hven% </prompt><userinput>&lt;Ctrl-D&gt;</userinput>
<prompt>[tyge@hven ~]$ </prompt>
</screen>

   Bemærk at de forskellige kommandofortolkeres kommandolinjer
   almindeligvis ser forskellige ud, så det er enkelt at se lige netop
   hvilken kommandofortolker man bruger.  Men man kan selv justere
   kommandolinjens udseende, så den giver de oplysninger man har brug
   for.
  </para>

  <para>
   Man vælger sin standard-kommandofortolker med programmet
   <command>chsh</command> (kort for "<emphasis>ch</emphasis>ange
   <emphasis>sh</emphasis>ell"):

   <indexterm>
    <primary>chsh</primary>
   </indexterm>
   <indexterm>
    <primary>kommandooversigt</primary>
    <secondary>chsh</secondary>
   </indexterm>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>chsh -s /bin/zsh</userinput>
Changing login shell for tyge.
Password: <userinput>din adgangskode skrives her</userinput>
Shell changed.
</screen>

   (det kan godt ske at teksten er på dansk).  &AElig;ndringen træder i
   kraft næste gang du logger ind på maskinen.
<!-- For avanceret:

   Du kan også se i <filename>/etc/passwd</filename> at der er indsat
   en ny kommandofortolker yderst til højre i den linje, hvor dit
   login-navn er vist (dette virker dog ikke med NIS).

<screen>
<prompt>[tyge@hven ~]$</prompt> <userinput>grep tyge /etc/passwd</userinput>
tyge:x:500:100:Tyge Brahe:/home/tyge:/bin/tcsh
</screen>

(for avanceret) -->
  </para>

  <sect2 id="unix-bash">
   <title>GNU Bourne Again Shell (bash)</title>

   <para>
    Bash er den klart mest populære kommandofortolker i
    linux-verdenen.  Det er ikke en tilfældighed, da den er forvalgt som
    kommandofortolker for nye brugere på de fleste linux-systemer, og da den
    er ret tæt på at have den syntaks som Unix-standarden specificerer for
    kommandofortolkere.
   </para>

   <para>
    Ved login læses filen <filename>~/.bash_profile</filename> (eller
    <filename>~/bash_login</filename> eller
    <filename>~/.profile</filename>), og hver gang et terminalvindue
    startes vil filen <filename>~/.bashrc</filename> blive læst og
    udført.  Endelig er det muligt at få filen
    <filename>~/.bash_logout</filename> udført når man stopper en
    kommandofortolker &ndash; her er det muligt at indlægge kommandoer som
    rydder op etc.
   </para>

   <para>
    Bash udmærker sig dels ved at være kompatibel med den gamle
    unix-kommandofortolker, <command>sh</command>, men i høj grad på
    dens rigdom på både programmeringmuligheder og til en vis grad
    også på dens funktioner som interaktiv kommandofortolker.
   </para>

   <para>
    Med pil-op/ned kan med genfinde de forrige kommandoer og man kan
    endda søge sig tilbage til en kommando man engang har udført i
    Bash ved at trykke <command>Ctrl-r
    STARTEN-AF-DEN-GAMLE-KOMMANDO</command>.  Med yderligere tryk på
    <command>Ctrl-r</command> vil man gense andre ældre kommandoer der
    også passer med starten af den kommando man har skrevet.
   </para>

   <para>
    Med tabulator-tasten kan man få ekspanderet fil/katalog-navne
    svarende til den begyndelse af navnet man skriver. Man kan således
    med <command>cat /e&lt;tabulator&gt;/sh&lt;tabulator&gt;</command>
    få ekspanderet sig til <command>cat /etc/shells</command> uden at
    få skrevet ret meget.
   </para>

   <para>
    Aliaser er nemme at sætte op i Bash. Opret filen
    <filename>~/.alias</filename> og indskriv aliaser efter skemaet
    <literal>alias ALIAS-navn="kommando"</literal>. Hvis man senere
    vil se hvilke aliaser man anvender kan <command>alias</command>
    vise dem alle.

<programlisting>
alias ll="ls -al"
alias sa="ssh-add ~/.ssh/id_dsa"
</programlisting>
   </para>

   <para>
    Kommandoprompten kan sættes nøjagtig efter egen smag efter et
    stort udbud af muligheder. I denne bog har vi valgt at få vist
    brugernavn (\u), maskinnavn (\h) og nuværende katalog (\w), men
    man kan nemt vælge om som vist nedenfor.  Udseende af prompten
    ændres direkte ved at sætte variablen <literal>PS1</literal>.  Her
    ændrer vi til at vise brugernavn (\u) og tidspunktet (\T).

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>echo $PS1</userinput>
[\u@\h:\w] 
<prompt>[tyge@hven ~]$ </prompt><userinput>export PS1="\u (\T):"</userinput>
<prompt>tyge 10:01:12 :</prompt>
</screen>
   </para>

   <para>
    <emphasis>Tip:</emphasis> Vil du have farver på din promt, så læs
    <ulink
    url="http://www-106.ibm.com/developerworks/linux/library/l-tip-prompt/">http://www-106.ibm.com/developerworks/linux/library/l-tip-prompt/</ulink>.
   </para>

   <sect3 id="bash-fiduser">
    <title>Fiduser til mere effektiv brug af Bash</title>

    <para>
     Du skal også lege lidt med tasterne pil-op og pil-ned, som løber
     igennem de gamle kommandoer igen. Ctrl-A og Ctrl-E bruges til at
     gå til starten og slutningen af en linje.
    </para>

    <para>
     <indexterm><primary>tabulator</primary></indexterm>

     Kommando- og filudvidelsesfunktionerne er utroligt rare, hvis man
     vil slippe for at skrive lange program- og filnavne igen og igen.
     Når man har skrevet starten på et program- eller filnavn kan man
     ved at trykke på tabulatortasten få kommandofortolkeren til at
     gætte hvad man mener.  Hvis der kun er én mulighed fylder
     kommandofortolkeren resten af navnet på. Er der flere muligheder,
     kan du trykke endnu en gang på tabulatortasten for at få vist
     alle mulighederne.
    </para>

    <para>
     Hvis du skriver

     <indexterm>
      <primary>touch</primary>
     </indexterm>
     <indexterm>
      <primary>kommandooversigt</primary>
      <secondary>touch</secondary>
     </indexterm>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>tou&lt;TAB&gt; sikke_et_langt_filnavn</userinput>
</screen>

     skulle det gerne blive til

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>touch sikke_et_langt_filnavn</userinput>
</screen>

     <indexterm><primary>Kommando-udfyldning</primary></indexterm>

     idet der ikke er andre kommandoer, der begynder med 'tou'
    </para>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>rm sik&lt;TAB&gt;</userinput>
</screen>

    <para>
     Det fungerer i øvrigt ved, at kommandofortolkeren i første "ord"
     leder efter en kommando eller et program den kender gennem
     systemvariablen <literal>PATH</literal> eller i den sti, som
     angives foran selve kommandoen.  Efter kommandoen ledes der efter
     filnavne i det angivne bibliotek.
    </para>
   </sect3>
  </sect2>

  <sect2 id="unix-csh">
   <title>Csh</title>

   <para>
    En af de gamle kommandofortolkere som i praksis findes på alle
    unix-systemer er <command>csh</command> &ndash; "the Berkeley UNIX C
    shell".  Tcsh skal ses som en naturlig videreudvikling af Csh, og
    er i praksis bagudkompatibel med Csh.  Til alle praktiske formål
    er Tcsh at foretrække fremfor Csh, hvorfor vi ikke skal beskæftige
    os videre med Csh.
   </para>
  </sect2>

  <sect2 id="unix-tcsh">
   <title>Tcsh</title>

   <para>
    Tcsh er en af de meget populære kommandofortolkere i
    unix-verdenen, da den giver stort set alle de samme muligheder som
    bash (omend med en anden syntaks), er bagudkompatibel med den
    aldrende csh-kommandofortolker, og har en lidt mere raffineret
    kommando- og filnavnsekspansionsfunktion, som man som bruger selv
    kan indstille så det kun er de relevante filer der bliver
    foreslået.  Et eksempel:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>ls</userinput>
linuxbog-unix.ps
linuxbog-unix-html.tar.gz
<prompt>[tyge@hven ~]$ </prompt><userinput>gv l&lt;tab&gt;</userinput>
</screen>

    bliver til

<screen>
linuxbog-unix.ps
<prompt>[tyge@hven ~]$ </prompt><userinput>gv linuxbog-unix.ps</userinput>
</screen>

    hvis brugeren (eller systemadministratoren) har indstillet
    <command>tcsh</command> så den går ud fra at programmet
    <command>gv</command> kun bruger filer der ender på
    "<filename>.ps</filename>".  Lige netop denne indstilling laves
    med linjen:

<programlisting>
complete gv       'p/*/f:*.{ps,pdf,eps}/'
</programlisting>

    (filnavne der ender på "<filename>.pdf</filename>" og
    "<filename>.eps</filename>" kan også bruges).  Som bruger føjer
    man den til filen "<filename>~/.tcshrc</filename>", mens man som
    systemadministrator kan føje den til
    "<filename>/etc/csh.cshrc</filename>", hvorved alle der bruger
    Tcsh vil få fornøjelse af det.
   </para>

   <para>
    Selvom der er masser af andre filer, så vil
    <command>tcsh</command> filtrere filerne intelligent, da den ved
    at første argument efter <command>gv</command> kun kan være en
    Postscript-fil &ndash; evt. i et af underkatalogerne. Tcsh kan sættes op
    til at genkende alle programmers filtyper. I bogens eksempler på
    <ulink
    url="http://&linuxbogurl;/unix/eksempler/shells/tcsh">&linuxbogurl;/unix/eksempler/shells/tcsh</ulink>
    kan findes <filename>dot.complete.tcsh</filename>, som viser
    hvordan mange programmer er tilpasset.
   </para>

   <para>
    I eksemplet er vist hvordan man ikke behøver at skrive hele
    filnavnet.  Skulle der være flere filer som passer med starten af
    det man skriver, vil alle muligheder blive vist og man må fylde
    lidt flere bogstaver på før kommandofortolkeren automatisk kan
    gætte resten.  Tricket med at trykke tabulator kan anvendes hele
    tiden.
   </para>

   <para>
    Skulle man få brug for at udføre en af de forrige kommandoer igen,
    da trykker man blot på pil op (eller ned) for at gå igennem de
    forrige mange kommandoer. Det er i praksis en funktion man
    anvender meget. Hvis man skal til starten eller slutningen på den
    kommando man er ved at skrive bruger man henholdsvis Ctrl-A og
    Ctrl-E.
   </para>

   <para>
    Hvis man vil lave genveje til kommandoer med aliaser kan man sætte
    dem ind i filen "<filename>~/.tcshrc</filename>", der bliver læst
    når Tcsh starter.  Skemaet er <literal>alias navn
    "kommando"</literal>.  Hvis man senere vil se hvilke aliaser man
    har defineret bruger man kommandoen <command>alias</command>.
   </para>

   <para>
    Hvis <command>tcsh</command> startes som login-kommandofortolker
    vil den (udover nogle systemopsætningsfiler) læse filerne
    "<filename>~/.tcshrc</filename>",
    "<filename>~/.history</filename>", "<filename>~/.login</filename>"
    og "<filename>~/.cshdirs</filename>".  Hvis
    <command>tcsh</command> ikke startes som login-kommandofortolker
    vil den (udover nogle systemopsætningsfiler) kun læse
    "<filename>~/.tcshrc</filename>".  Det er altså i filen
    "<filename>~/.tcshrc</filename>" man som bruger kan vælge sin
    personlige opsætning af Tcsh.
   </para>

   <para>
    Systemvariable sættes i Tcsh med <command>setenv VARIABELNAVN
    V&AElig;RDI</command>.  Bemærk at der bare er et mellemrum mellem
    variablens navn og den værdi den skal tildeles. Man kan se om en
    variabel er defineret ved at se på indholdet af
    <literal>${?VARIABELNAVN}</literal>:
<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>echo ${?PRINTER}</userinput>
0
</screen>
    1 betyder at variablen er defineret og 0 at den ikke er defineret.
   </para>

   <para>
    Til sammenligning kan vi så prøve at tildele variablen
<literal>PRINTER</literal> navnet på vores foretrukne printer:
<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>setenv PRINTER lp1</userinput>
<prompt>[tyge@hven ~]$ </prompt><userinput>echo ${PRINTER}</userinput>
lp1
<prompt>[tyge@hven ~]$ </prompt><userinput>env | grep PRINTER</userinput>
printer=lp1
</screen>
   </para>

   <para>
    Tcsh har i øvrigt et lille irritationsmoment i forbindelse med at der
    bliver installeret nye programmer. De instanser af Tcsh der blev
    startet før et program blev installeret, kan først finde det, når man
    har kørt kommandoen <command>rehash</command> i dem.
   </para>

   <para>
    På <ulink
    url="http://&linuxbogurl;/unix/eksempler/shells/tcsh">&linuxbogurl;/unix/eksempler/shells/tcsh</ulink>
    kan findes et forslag til følgende <filename>~/.tcshrc</filename>.
    På samme URL kan findes et forslag til
    <filename>~/.login</filename>.
   </para>

<example id="eks-dot-tcshrc">
<title>Eksempel på en .tcshrc-fil</title>
<screen>
#!/bin/tcsh
# User .tcshrc file (/bin/tcsh initialization).
# Peter Toft 2002 

# Omgåelse af en fejl i Red Hat 7.X
unset dspmbyte

# Anvend ssh til rsync
setenv RSYNC_RSH ssh

#Dansk tastaturopsætning og danske tekster i programmerne
setenv LC_ALL da_DK
setenv LANG da

# Led efter programmer i de følgende steder.
set path = ( /bin /usr/bin /usr/local/bin /usr/X11R6/bin )

if ( ! $?prompt ) exit  # Kommandofortolkeren er interaktiv

set history = 500       # 500 af de forrige kommandoer huskes
set savehist            # Number to save across sessions
set autolist            # List choices in name completion
set correct = cmd       # Checks spelling of commands

# Kommando-prompt med login-navn maskine og sti
set prompt  = "%{^[[1m%}${user}@`hostname`%/>%{^[[0m%} " 

# Findes en ~/.alias-fil med aliaser, da køres denne
if ( -e ~/.alias ) source ~/.alias

# Findes en ~/.complete.tcsh-fil, da køres denne
if ( -e ~/.complete.tcsh ) source ~/.complete.tcsh
</screen>
</example>

   <para>
    Flere forslag til at skrive en <filename>~/.tcshrc</filename> kan
    findes på <ulink
    url="http://tcshrc.sourceforge.net">http://tcshrc.sourceforge.net</ulink>.
   </para>
  </sect2>

  <sect2 id="unix-ksh">
   <title>Korn Shell (ksh)</title>

   <para>
    En af de halv-gamle kommandofortolkere med et ret avancerede
    scripting-muligheder er Korn Shell (ksh). Denne følger typisk med
    de kommercielle UNIX-varianter, men ikke med Linux. Der er
    udviklet en erstatning for <command>ksh</command> til Linux med
    navnet <command>pdksh</command> (Public Domain ksh). Denne
    anvendes dog ikke ret mange steder.
   </para>
  </sect2>

  <sect2 id="unix-zsh">
   <title>Zsh</title>

   <para>
    Zsh er en af de mest avancerede kommandofortolkere der findes. Den
    ligner Bash og Ksh, men har &ndash; specielt ved interaktiv brug
    &ndash; mange fordele fremfor dem.  Som med Tcsh kan man selv
    indstille filnavnsekspansionen.  Desuden er den (som Bash) stort set
    kompatibel med Unix' standardsyntaks for kommandofortolkere. Det
    betyder at man kan nyde alle Zshs fordele som interaktiv
    kommandofortolker og bagefter kopiere de kommandoer man er kommet
    frem til direkte ind i et kommandofortolkerprogram, der i de fleste
    tilfælde vil kunne køre uændret på et vilkårligt unix-system.

<screen>
<prompt>tyge@hven:~% </prompt><userinput>ls -al /etc/sh&lt;TAB&gt;</userinput>
-rw-r--r--    1 root     root          185 sep 28  2000 /etc/shells
</screen>
   </para>

   <para>
    En rigtig smart ting som ingen af de andre kommandofortolkere har
    er et specielt jokertegn, <literal>**</literal>, der betyder
    underkataloger i en vilkårlig dybde:

<screen>
<prompt>tyge@hven:~% </prompt><userinput>ls **/*.png</userinput>
foldere/linux_på_dansk/friheden.png  foldere/sslug-folder/tux.png
images/tyge.png                      linuxbog/front.png
images/hanne.png                     linuxbog/sslug.png
</screen>
   </para>

   <para>
    Systemvariable sættes med <command>export
    variabelnavn=V&AElig;RDI</command>, mens almindelige variable bare
    sættes med <command>variabelnavn=V&AElig;RDI</command>:

<screen>
<prompt>tyge@hven:~% </prompt><userinput>export printer=minlpr</userinput>
<prompt>tyge@hven:~% </prompt><userinput>echo ${PRINTER}</userinput>
minlpr
<prompt>tyge@hven:~% </prompt><userinput>huskeseddel=/tmp/husk</userinput>
<prompt>tyge@hven:~% </prompt><userinput>echo ${huskeseddel}</userinput>
/tmp/husk
</screen>
   </para>

   <para>
    Zsh bruger op til otte opsætningsfiler, hvoraf de fire ligger i
    ens eget hjemmekatalog, og de fire andre ligger i
    systemopsætningskataloget:

<orderedlist>
 <listitem><para>
  <filename>/etc/zshenv</filename>   (læses altid)
 </para></listitem>

 <listitem><para>
  <filename>~/.zshenv</filename>     (læses altid)
 </para></listitem>

 <listitem><para>
  <filename>/etc/zprofile</filename> (læses ved login)
 </para></listitem>

 <listitem><para>
  <filename>~/.zprofile</filename>   (læses ved login)
 </para></listitem>

 <listitem><para>
  <filename>/etc/zshrc</filename> (læses ved login og ved interaktiv brug)
 </para></listitem>

 <listitem><para>
  <filename>~/.zshrc</filename> (læses ved login og ved interaktiv brug)
 </para></listitem>

 <listitem><para>
  <filename>/etc/zlogin</filename> (læses ved login)
 </para></listitem>

 <listitem><para>
  <filename>~/.zlogin</filename>   (læses ved login)
 </para></listitem>
</orderedlist>
   </para>

   <para>
    Første gang man starter Zsh, har man overhovedet ingen regler for
    fuldstændiggørelse af kommandoer og filnavne. Det kan man ændre på
    ved at køre den indbyggede kommando <command>compinstall</command>
    (det kan være nødvendigt først at køre kommandoen <command>autoload -U
    compinstall</command>). Du bliver så præsenteret for et
    primitivt menusystem, hvor du kan konfigurere
    fuldstændiggørelsen. I første omgang vil du nok kunne klare dig
    med standardindstillingerne.
   </para>

   <para>
    Hvis de 500-600 fuldstændiggørelsesregler zsh kommer med som
    standard ikke er nok, kan man selvfølgelig lave flere. Hvis man
    f.eks. vil have zsh til kun at foreslå <filename>.ogg</filename>-
    og <filename>.mp3</filename>-filer når man har skrevet
    <command>music123</command>, kan man lægge en fil med indholdet:

<programlisting>
#compdef music123

_files -g '*.(ogg|mp3)'
</programlisting>

    i <filename>/usr/local/share/zsh/site-functions/</filename>.  <!--
    Hvor lægger man personlige funktioner? - HCG --> Den første linje
    fortæller at denne funktion skal bruges når det er argumenter til
    <command>music123</command> der fuldstændiggøres, og den anden
    linje at kun filer der passer til det angivne mønster skal bruges.
   </para>

   <para>
    Man kan naturligvis bladre tilbage gennem sine gamle kommandoer
    med pil op/ned, og ændre i en kommando inden man udfører den
    igen. Til dette formål kan man både få Emacs- og
    vi-tastebindinger, hvis en <literal>EDITOR</literal>- eller
    <literal>VISUAL</literal>-variabel er sat til en af tingene vælger
    Zsh automatisk de tilsvarende tastebindinger.
   </para>

   <para>
    Der er eksempler på hvordan de fire brugerdefinerede filer kan se
    ud i bogens eksempler (<ulink
    url="http://&linuxbogurl;/unix/eksempler/shells/zsh/">&linuxbogurl;/unix/eksempler/shells/zsh/</ulink>).
    <!-- Jacob burde kommentere disse -->
    <!-- Er det ikke bedre at en anden rydder op i dem først? -->
   </para>

   <para>
    Zshs hjemmeside findes på SunSite.dk, hvor man også kan finde en
    brugsanvisning: <ulink
    url="http://zsh.sunsite.dk/Guide/">http://zsh.sunsite.dk/Guide/</ulink>.
   </para>
  </sect2>

<sect2 id="unix-sh">
<title>Bourne Shell (sh)</title>

<para>
En af de ældste kommandofortolkere til UNIX-familien er Bourne Shell
(<command>sh</command>). Den har den fordel, at alle
UNIX-maskiner har den installeret, og den dermed er egnet til at
lave portabel kode.  Som kommandofortolker er Bourne Shell
imidlertid ret så skrabet og har slet ikke de smarte egenskaber,
der findes i de nyere kommandofortolkere.
</para>
<para>
På Linux systemer er det ofte bash, som opfører sig sig som sh,
når den bliver startet med det navn (fx. gennem et link). Det
kalder man, at den kører i <emphasis> posix </emphasis> modus.
I så fald aktiverer den ikke de "smarte features": completion,
kommando-editor og history.
</para>

<para>
Ligesom <command>bash</command>, <command>zsh</command> og
<command>ksh</command> sættes miljø-variable med export.
<screen>
<prompt>[tyge@hven ~]$</prompt> <userinput>sh</userinput>
<prompt>sh-2.05$</prompt> <userinput>dd=3</userinput>
<prompt>sh-2.05$</prompt> <userinput>export dd</userinput>
<prompt>sh-2.05$</prompt> <userinput>echo $dd</userinput>
3
</screen>
</para>

</sect2>
</sect1>

<sect1 id="videre-med-shells">
<title>Læs videre om emnet</title>
<para>
Der er udgivet masser af bøger om kommandofortolkere &ndash; i høj grad fra
forlaget O'Reilly &ndash; se mere på <ulink
url="http://www.oreilly.com">http://www.oreilly.com</ulink>.  
Bøgerne kan f.eks. købes fra Polyteknisk boghandel i Lyngby eller andre
velassorterede boghandlere.
</para>

<para>
På internettet kan følgende steder være af interesse:
</para>

<itemizedlist mark="bullet">
<listitem>
 <para>
<ulink url="http://www.faqs.org/faqs/unix-faq/shell/shell-differences/">http://www.faqs.org/faqs/unix-faq/shell/shell-differences/</ulink>
 </para>
</listitem>
<listitem> 
 <para>
<ulink url="http://www.nscp.umd.edu/shells.html">http://www.nscp.umd.edu/shells.html</ulink>
 </para>
</listitem>
<listitem> 
 <para>
<ulink url="http://www.computerbits.com/archive/1997/1100/lnx9711.html">http://www.computerbits.com/archive/1997/1100/lnx9711.html</ulink>
 </para>
</listitem>
</itemizedlist>


 </sect1> 

 <!--  Forslag til redaktionel linje:
 <para>
  I resten af bogen vil vi gå ud fra at man bruger Zsh som kommandofortolker.
 </para>
 -->
</chapter>
