<chapter id="pythonbog-indledning">
<title>Python for begyndere</title>
  
<figure id="forsideBillede-figur" float="1">
<title>Python undervisning</title>
<graphic fileref="forsideBillede.&magic;" scale="60"></graphic> 
</figure>

<sect1 id="pythonbog-intro">
<title>Hvad er Python?</title>
<para>
Python er et kraftfuldt computersprog, der er ekstrem effektivt til
udvikling af internet og webbaserede programmer.
</para>

<para>
Dets udvikling begyndte  i det sene efterår i 1989. I foråret 1991 blev
Python almindelig tilgængelig.
<!-- Wange:
     Her ville det være rigtig lækkert med en reference til Pythons
     list rodede historie der fortæller om bl.a. licensen der ikke
     altid har været fri.
-->
   
</para>

<para>
Den første bog overhovedet om sproget udkom i begyndelsen af 1996.
Herværende bog er mig bekendt den første på dansk og på de skandinaviske
sprog i det hele taget. I 1999 regnede en ledende industriobservatør med
at der var omkring 300.000, der brugte Python. Det tal må skønnes at
være meget større i dag.
</para>

<para>
Bl.a. er man meget hurtig til at frigive eventuelle rettelser, ligesom
det er særdeles let at få besvaret spørgsmål, såfremt man mener at have
konstateret fejl i sproget. Fejl der meget let kan vise sig at være
reelle forbedringer i forbindelse med overgangen til bl.a. unicode (de
større tegntabeller).
</para>

<para>
Jeg nævner dette allerede her, fordi der kan være meget stor forskel på,
hvordan koden skulle skrives før version 2.2 og efter. Der kom nemlig en
meget stor forbedring af sproget. I skrivende stund er det vist mere end
svært at finde større fejl, selv behandlingen af de dansk/norske
specialtegn er kommet næsten på plads.
</para>

<para>
Med version 2.3 skulle Python nu kunne håndtere 64 bits tegn - i den
første ASCII tegntabel kunne et tegn, en karakters nummer være op til 8
bit lang. Fra og med Python version 2.4 vil Python droppe 8 bits
tegntabellen totalt.
</para>
</sect1>

<sect1 id="pythonbog-hvorfor">
<title>Hvorfor bruge Python?</title>

<para>
Hvorfor i al verden skulle man interessere sig for Python, når der i
forvejen er en lang stribe af rigtig gode gamle og velfungerende
computersprog at gå til? Lad mig som eksempler nævne:
</para>

<orderedlist>
<listitem>
<para>
Python findes til alle de velkendte styresystemer herunder Linux, Mac og
Windows.
</para>
</listitem>

<listitem>
<para>
Python er let at flytte fra et styresystem til et andet som f.eks. fra
Linux til Windows og omvendt.
</para>
</listitem>

<listitem>
<para>
Er meget let at lære - også for begyndere indenfor brugen af
computersprog i det hele taget.
</para>
</listitem>

<listitem>
<para>
Python kombinerer bemærkelsesværdig styrke med en meget klar syntaks
(læs: måde at gøre tingene på).
</para>
</listitem>

<listitem>
<para>
I Python kan du lære objekt-orienteret programmering (programmering og
anvendelse af vinduer, knapper og den slags) uden af forstå mange af de
komplekse detaljer forinden. Senere kan du så om ønsket sætte dig ind i
teknikken bag konstruktionen.
</para>
</listitem>

<listitem>
<para>
<!-- Wange:
     Jeg synes måske ikke vi skal have så store eksempler ind på så
     tidligt et tidspunkt ?
     Det er en lidt uoverskuelig punkt-liste der er kommet ud af det
     i hver fald.
-->
Python er et begyndervenligt computersprog, der automatisk styrer mange
af de komplekse detalier, der foregår bag scenen. Det gør det muligt
for dig at bruge kræfterne på de overordnede ting i dit projekt uden at
skulle grave i dybden for hvert eneste skridt. Lad os også her foregribe
begivenhederne lidt og se følgende eksempel, der nok også kan
interessere den erfarne Java, C++ eller Delphi programmør.
</para>
<para>
<screen>
<prompt>>>></prompt> <userinput>from Tkinter import Label</userinput>
<prompt>>>></prompt> <userinput>widget = Label()</userinput>
</screen>
</para>
<para>
Egentlig burde der nok have været 1 programlinje mere i det viste
eksempel. Den skulle i så fald hedde widget.pack()
Funktionen pack() stiller objektets bestanddele på plads på
udskriftsenheden (skærmen). Men i dette tilfælde er der ikke noget at
stille på plads, så de 2 programlinjer er tilstrækkelige. Du kan lave
nøjagtig samme vindue med:
</para>
<para>
med Entry:
<screen>
<prompt>>>></prompt> <userinput>from Tkinter import Entry</userinput>
<prompt>>>></prompt> <userinput>barn = Entry()</userinput>
<prompt>>>></prompt> <userinput>barn.pack()</userinput>
</screen>
eller med Text (og en lang række andre objekter):
<screen>
<prompt>>>></prompt> <userinput>from Tkinter import Text</userinput>
<prompt>>>></prompt> <userinput>barn = Text()</userinput>
<prompt>>>></prompt> <userinput>barn.pack()</userinput>

<prompt>>>></prompt> <userinput>from Tkinter import *</userinput>
<prompt>>>></prompt> <userinput>barn = Frame().pack(expand = YES, fill = BOTH)</userinput>
</screen>
</para>
<para>
Læg allerede her mærke til forskellen på 2 ting. 1: Det du formentlig
havde forventet from Tkinter import Frame er blevet til from Tkinter
import * (her sker det for at kunne udnytte parameterværdierne i pack)
og 2: funktionen barn.pack() er blevet flyttet til Frame() og har fået
2 parametre (argumenter). Det sker for at give Frame arvingen barn
mulighed for at kunne udvides (sker med expand = YES) og det i både
vandret og lodret retning eller med andre ord til at kunne udfylde hele
skærmen. Frame objektet er en kontainer, hvori alle andre grafiske
objekter som tekstbokse, knapper, labels og mange andre kan indsættes.
Dem er der jo ingen af i eksemplet her, så Frame().pack(expand = YES,
fill = BOTH) virker helt på samme måde, som når du klikker på knappen
længst til venstre i vinduets øverste højre hjørne. Den får vinduet til
at klappe sammen til dets mindst mulige størrelse. expand = YES giver
rammen (the frame - kontaineren)  mulighed for at kunne udvides efter
behov, men her der ikke behov (der skal ikke sættes andre komponenter
ind i kontaineren). Hvis der senere sættes et eller flere af den nævnte
og tilsvarende objekter ind i rammen (the Frame), vil den blive udvidet
efter behov lige så længe der er plads til objekterne i det givne
skærmareal. Er der ikke det, vil objekterne ganske enkelt ikke blive
viste.
</para>

<figure id="vinduer-figur" float="1">
<title>Eksempel på vinduer</title> 
<graphic fileref="vinduer.&magic;" scale="60"></graphic> 
</figure>

<para>
Naturligvis har de to vinduer nøjagtig de samme åbne/lukke muligheder
m.v. som du kender dem fra f.eks. internet browsere i Windows. Det kan
da kaldes objektorienteret programmering, så det forslår. Alle vinduer,
knapper og andre normale objekter er forprogrammerede, så du direkte
kan bruge dem og selvfølgelig tilpasse dem efter dit behov i det givne
øjeblik. I C++ skal du skrive masser af programlinjer for at opnå det
tilsvarende. Det er i øvrigt meget let at integrere Python og C++ i
hinanden.
</para>
<para>
Noget af det fornemmeste ved OOP (objekt orienteret programmering) er
genbrugen. Med de tre viste eksempler har du allerede set, at Python
har fremragende egenskaber også på dette område, for naturligvis kan
koden til et fuld færdigt vindue umuligt samles og udføres i de 2-3
programlinjer, det enkelte eksempel indeholder. Der skal mange gange så
megen koden til. Hvis ikke Python besad evnen til genbrug, så skulle det
meget store program, der skal til for at oprette det fuldt færdige
vindue udvikles hver eneste gang, vinduet skulle bruges - altså 3 gange
alene til de viste eksempler. Det ville blive kæmpeprogrammer, der i
virkeligheden ville være næsten uanvendelige grundet det enorme omfang.
Koden til det viste eksempel og til en række andre er indeholdt i Widget
klassen. Label, Entry, Text og Frame er alle subklasser i Widget.
</para>
</listitem>

<listitem>
<para>
Python er rygraden i Jython. Det betyder, at en større eller mindre
del at et Jython program er og fortsat vil være Python. I Jython er det
ofte lettere at udvikle eksempelvis Java applets end det er i selve
Java. Applets kan bruges som integrerede dele af HTML, XHTML, XML
sprogene til hjemmesider.
</para>
</listitem>

<listitem>
<para>
I Linux taler man ofte om hele programpakken med de førnævnte
programpakker som Linux. Det er forkert. Linux er kernen
(centralenheden/det styrende program. I Python er der også en kerne.
Den er lille, hvilket den også bør være. Til denne styrende enhed er der
et meget stort bibliotek (library). Det betyder, at meget af det, du får
brug for, allerede er udviklet og testet for dig. Din opgave vil være at
skrive den kode, der kombinerer nævnte biblioteks komponenter og udvikle
nye egenskaber efterhånden som der bliver brug for det, men du kan i høj
grad også selv udvide Python med  dine egne funktioner (metoder),
klasser, moduler m.v.
</para>
</listitem>
</orderedlist>
</sect1>

<sect1 id="pythonbog-pris">
<title>Hvad koster Python, og hvor får jeg det fra?</title>

<para>
Python er gratis og tilgængelig for langt de fleste styresystemer.
Har du ikke den nyeste version, kan du altid hente den på 
<ulink url="http://www.python.org">http://www.python.org</ulink>.
Det er særdeles let at installere Python, hvis sproget ikke allerede er
installeret på din computer. Det er det dog normalt hvis du bruger SuSE,
RedHat eller Mandrake.
</para>

<para>
Der er en meget stor udvikling af Python i gang. Alene de ca. 3 måneder,
det har taget mig at skrive herværende bog, er der kommet 2 fulde
opdateringer af sproget (de udkomne versioner er 2.2 og 2.3). Men ikke
alene det, der kommer også opdateringer til sidstnævnte, uden at
versionsnavnet ændres. Lige nu den 26. januar 2004 er version 2.3.3
den aktuelle. I version 2.4 skulle der ske ret store ændringer, så
Python kan endnu mere (bl.a. behandle 64 bits karakterkode).
</para>
</sect1>

<sect1 id="python-doc-guide">
<title>Guide til Python dokumentation</title>

<para>
Hvis man er helt ny udi programmering kan det være svært at forstå
hvordan dokumentationen af et programmeringssprog er skruet sammen. Men
når man først kan gennemskue det, er det tit og ofte meget nemmere at
hente hjælp i dokumentationen af sproget end at skulle spørge om hjælp
til en specifik funktion på en mailing-liste.
</para>

<para>
Dokumentation til python kan du finde online på adressen: <ulink
url="http://www.python.org/doc/">http://www.python.org/doc/</ulink>.
Her kan du desuden finde guides og HowTo'er til diverse emner.
Dokumentationen er delt op i 7 kategorier: Modul oversigt, tutorial,
biblioteks reference, Macintosh reference, sprog reference, udvidelser
af sproget og et Python/C API. Forklaring på kategorierne:
</para>

<itemizedlist mark="bullet">
<listitem>
<para>
<command>Modul oversigt</command> - Her er den en oversigt over alle de
moduler, der kommer med en release af Python. For hvert modul findes
desuden dokumentation af det.
</para>
</listitem>

<listitem>
<para>
<command>Tutorial</command> - Her finder du en gennemgribende tutorial
på den mest basale brug af Python. Et godt sted at starte hvis man i
forvejen kan programmere, men bare ikke kender Python.
</para>
</listitem>

<listitem>
<para>
<command>Biblioteks reference (Library reference)</command> - En
gennemgang af de mest brugte biblioteker i Python samt mere
gennemgribende eksempler på brug end du finder i modul oversigten.
</para>
</listitem>

<listitem>
<para>
<command>Macintosh reference</command> - Gennemgang af de biblioteker
der er specifikke for Macintosh.
</para>
</listitem>

<listitem>
<para>
<command>Sprog reference (Language reference)</command> - Gennemgang
af sprogets brug og opbygning (syntax, funktioner, klasser m.m.)
</para>
</listitem>

<listitem>
<para>
<command>Sprog udvidelser (Extending and embedding)</command> - En
guide i hvordan du kan udvide Python med C/C++, embedde Python i
andre applikationer m.m.
</para>
</listitem>

<listitem>
<para>
<command>Python/C API</command> - En gennemgang af et C API til Python,
der lader C programmører bruge Python i deres applikationer.
</para>
</listitem>
</itemizedlist>
</sect1>
</chapter>
