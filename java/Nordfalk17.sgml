<chapter>
  <title>Netværkskommunikation</title>

<para>
Indhold:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>

At koble til en tjeneste på en fjernmaskine
</para>

</listitem>

  <listitem>

<para>
At udbyde tjenester på netværket
</para>

</listitem>

  <listitem>

<para>
Eksempler: Hente en hjemmeside og en webserver
</para>

</listitem>
</itemizedlist>

<para>
Kapitlet forudsættes ikke i resten af bogen.
</para>

<para>
Forudsætter 14, Datastrømme og filhåndtering.
</para>

<para>
Alle maskiner på et TCP-IP-netværk, f.eks.
internettet, har et IP-nummer. Det er en talrække på
fire byte<xref linkend="sdfootnote1sym">,
der unikt identificerer en maskine på nettet, f.eks.
195.215.15.20.
</para>

<para>
Normalt bruger man en navnetjeneste (eng.: Domain Name Service -
DNS), der sammenholder alle numre med navne, der er nemmere at
huske, f.eks. <ulink url="http://www.cv.ihk.dk/">www.cv.ihk.dk</ulink> eller
<ulink url="http://www.esperanto.dk/">www.esperanto.dk</ulink>. Adressen
localhost (IP-nummer 127.0.0.1) er speciel ved altid at pege på
den maskine, man selv sidder ved.
</para>

<para>
Kommunikation mellem to maskiner sker ved, at værtsmaskinen
(eng.: host) gør en tjeneste (eng.: service) tilgængelig
på en bestemt port, hvorefter klienter kan åbne en
forbindelse til tjenesten.
</para>

<figure>
<graphic fileref="Nordfalk1715461.&magic;" scale="60"></graphic>
</figure>

<para>
Hjemmesider (HTTP-tjenesten) er tilgængelige på port
80. Filoverførsel (FTP-tjenesten) er på port 21, og hvis
man vil logge ind på maskinen (telnet-tjenesten), er det port
23.
</para>

<para>
I det følgende vil vi vise, hvordan man bruger og udbyder
HTTP-tjenesten til hjemmesider, men andre former for
netværkskommunikation foregår på lignende måder.
</para>

<sect2>
  <title>At forbinde sig til en port</title>

<para>
Man opretter en forbindelse ved at oprette et Socket-objekt<xref linkend="sdfootnote2sym">
og angive værtsmaskinen og porten i konstruktøren. Vil
man f.eks. kontakte webserveren på <ulink url="http://www.esperanto.dk/">www.esperanto.dk</ulink>,
skriver man:
</para>

<screen>
  Socket forbindelse = new Socket(&quot;www.esperanto.dk&quot;,80);
</screen>


<para>
Hvis alt gik godt, har Socket-objektet (forbindelsen eller
&quot;soklen&quot;) nu kontakt med værtsmaskinen (ellers
har den kastet en undtagelse).
</para>

<para>
Nu skal vi have fat i datastrømmene fra os til værten
og fra værten til os:
</para>

<screen>
  OutputStream fraOs = forbindelse.getOutputStream();
  InputStream tilOs = forbindelse.getInputStream();
</screen>


<para>
Hvis vi vil sende/modtage binære data, kan vi nu bare gå
i gang: fraOs.write() sender en byte eller en række af byte til
værten, og med tilOs.read() læser vi en eller flere byte.
</para>

<para>
Hvis det er tekstkommunikation, er PrintWriter og BufferedReader
(der arbejder med tegn og strenge som beskrevet tidligere) dog
nemmere at bruge :
</para>

<screen>
  PrintWriter ud = new PrintWriter(fraOs);
  BufferedReader ind = new BufferedReader(new InputStreamReader(tilOs));
</screen>


<para>
Nu kan vi f.eks. bede værten om at give os startsiden
(svarende til adressen <ulink url="http://www.esperanto.dk/">http://www.esperanto.dk/</ulink>).
Det gøres ved at sende linien &quot;GET / HTTP/0.9&quot;, 
derefter &quot;Host: www.esperanto.dk&quot; og til sidst en blank
linie:
</para>

<screen>
  ud.println(&quot;GET / HTTP/0.9&quot;);
  ud.println(&quot;Host: www.esperanto.dk&quot;);
  ud.println();
  ud.flush();
</screen>


<para>

Kaldet til flush() sikrer, at alle data er sendt til værten,
ved at tømme eventuelle buffere.
</para>

<para>
Nu sender værten svaret, der kan læses fra
inddatastrømmen<xref linkend="sdfootnote3sym">:
</para>

<screen>
  String <emphasis>s = ind.readLine()</emphasis>;
  <emphasis>while (s != null) {</emphasis>
    System.out.println(&quot;svar: &quot;+s);
<emphasis>    s = ind.readLine();</emphasis>
<emphasis>  }</emphasis>
</screen>


<para>

While-løkken bliver ved med at læse linier. Når
der ikke er flere data (værten har sendt alle data og lukket
forbindelsen), returnerer ind.readLine() null, og løkken
afbrydes.
</para>

<para>
Her er hele programmet:
</para>

<screen>
import java.io.*;
import java.net.*;
public class HentHjemmeside
{
  public static void main(String arg[])
  {
    try {
      Socket <emphasis>forbindelse = new Socket(&quot;www.esperanto.dk&quot;,80)</emphasis>;
      OutputStream fraOs = <emphasis>forbindelse.getOutputStream()</emphasis>;
      InputStream  tilOs = <emphasis>forbindelse.getInputStream()</emphasis>;
      PrintWriter    ud  = new PrintWriter(fraOs);
      BufferedReader ind = new BufferedReader(new InputStreamReader(tilOs));
      ud.println(&quot;GET / HTTP/0.9&quot;);
      ud.println(&quot;Host: www.esperanto.dk&quot;);
      ud.println();
      <emphasis>ud.flush()</emphasis>;              <emphasis>// send anmodning afsted til værten</emphasis>
      String s = ind.readLine();
      while (s != null)        <emphasis>// readLine() giver null når datastrømmen lukkes</emphasis>
      {
        System.out.println(&quot;svar: &quot;+s);
        s = ind.readLine();
      }
      <emphasis>forbindelse.close()</emphasis>;
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
</screen>


<screen>
svar: HTTP/1.1 200 OK
svar: Date: Tue, 17 Apr 2001 13:06:06 GMT
svar: Server: Apache/1.3.12 (Unix)  (Red Hat/Linux) PHP/4.0.2 mod_perl/1.24
svar: Last-Modified: Thu, 05 Mar 1998 17:28:16 GMT
svar: Accept-Ranges: bytes
svar: Content-Length: 896
svar: Content-Type: text/html
svar:
svar: &lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Esperanto.dk&lt;/TITLE&gt;
svar: &lt;META name=&quot;description&quot; content=&quot;Den officielle danske hjemmeside om plansproget esperanto. Oficiala dana hejmpagxo pri la planlingvo Esperanto.&quot;&gt;
svar: &lt;META name=&quot;keywords&quot; content=&quot;Esperanto, Danmark, DEA, UFFE, Esperanto-nyt, bogsalg, plansprog, kunstsprog, lingvistik, videnskab, debat, Zamenhof, Danio, libroservo, planlingvo, teknika lingvo, lingvistiko, debato&quot;&gt;
svar: &lt;/HEAD&gt;
svar:
svar: &lt;FRAMESET Cols=&quot;22%,*&quot;                  &gt;
svar: &lt;FRAME NAME=&quot;menu&quot;    SRC=&quot;da/menu.htm&quot;     MARGINWIDTH=0&gt;
svar: &lt;FRAME NAME=&quot;indhold&quot; SRC=&quot;da/velkomst.htm&quot;&gt;
svar: &lt;NOFRAMES&gt;
svar: Velkommen til Esperanto.dk!
svar: &lt;p&gt;
svar: Gå til &lt;a href=&quot;da/velkomst.htm&quot;&gt;velkomst-siden&lt;/a&gt; eller til
svar: &lt;a href=&quot;da/menu.htm&quot;&gt;indholdsfortegnelsen&lt;/a&gt;,
svar:
svar: &lt;/NOFRAMES&gt;
svar: &lt;/FRAMESET&gt;
svar:
svar: &lt;/html&gt;
</screen>


<para>
Det ses, at svaret starter med et hoved med metadata, der
beskriver indholdet (dato, værtens styresystem, hvornår
dokumentet sidst blev ændret, længde, type).
</para>

<para>
Derefter kommer en blank linie og så selve indholdet
(HTML-kode).
</para>

<para>
Dette er i overensstemmelse med måden, som data skal sendes
på ifølge HTTP-protokollen. Protokollen er løbende
blevet udbygget. En af de tidligste (og dermed simpleste) var
HTTP/0.9, mens de fleste moderne programmer bruger HTTP/1.1.
</para>
</sect2>    <!--   At forbinde sig til en port -->

<sect2>
  <title>At lytte på en port</title>

<para>
For at lave et program, der fungerer som vært (dvs. som
andre maskiner/programmer kan forbinde sig til), opretter man et
ServerSocket-objekt, der accepterer anmodninger på en bestemt
port:
</para>

<screen>
      ServerSocket værtssokkel = new ServerSocket(8001);
</screen>


<para>
Nu lytter vi på port 8001. Så er det bare at vente på,
at der kommer en anmodning:
</para>

<screen>
        Socket forbindelse = værtssokkel.accept();
</screen>


<para>
Kaldet af accept() venter på, at en klient forbinder sig, og
når det sker, returnerer kaldet med en forbindelse til klienten
i et Socket-objekt.
</para>

<para>
Nu kan vi arbejde med forbindelsen ligesom før. Ligesom når
to mennesker snakker sammen, har det ikke den store betydning,
hvem der startede samtalen, når den først er kommet
i gang.
</para>

<para>
I tilfældet med HTTP-protokollen er det defineret, at
klienten skal først skal spørge og værten
derefter svare, så vi læser først en anmodning
</para>

<screen>
        String anmodning = ind.readLine();
        System.out.println(&quot;Anmodning: &quot;+anmodning);
</screen>


<para>
... og sender derefter et svar, tømmer databufferen og
lukker forbindelsen (afslutter samtalen):
</para>

<screen>
        ud.println(&quot;HTTP/0.9 200 OK&quot;);
        ud.println();
        ud.println(&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Svar&lt;/title&gt;&lt;/head&gt;&quot;);
        ud.println(&quot;&lt;body&gt;&lt;h1&gt;Kære bruger&lt;/h1&gt;&quot;);
        ud.println(&quot;Du har spurgt om &quot;+anmodning+&quot;, men der er intet her.&quot;);
        ud.println(&quot;&lt;/body&gt;&lt;/html&gt;&quot;);
        ud.flush();
        forbindelse.close();
</screen>


<para>
Bemærk, at ud.flush() skal ske, før vi lukker soklen,
ellers går svaret helt eller delvist tabt; forbindelse-objektet
ved ikke, at ud-objektet har nogle data liggende, der ikke er blevet
sendt endnu.
</para>

<para>
Herunder ses det fulde program:
</para>

<screen>
import java.io.*;
import java.net.*;
public class Hjemmesidevaert
{
  public static void main(String arg[])
  {
    try {
      ServerSocket <emphasis>værtssokkel = new ServerSocket(8001)</emphasis>;
      while (true)
      {
        Socket <emphasis>forb = værtssokkel.accept()</emphasis>;
        PrintWriter <emphasis>ud = new PrintWriter(forb.getOutputStream())</emphasis>;

        BufferedReader <emphasis>ind = </emphasis>
<emphasis>          new BufferedReader(new InputStreamReader(forb.getInputStream()))</emphasis>;

        String anmodning = <emphasis>ind.readLine()</emphasis>;
        System.out.println(&quot;Anmodning: &quot;+anmodning);

<emphasis>        ud.println(&quot;HTTP/0.9 200 OK&quot;);</emphasis>
<emphasis>        ud.println();</emphasis>
<emphasis>        ud.println(&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Svar&lt;/title&gt;&lt;/head&gt;&quot;);</emphasis>
        ud.println(&quot;&lt;body&gt;&lt;h1&gt;Kære bruger&lt;/h1&gt;&quot;);
        ud.println(&quot;Du har spurgt om &quot;+anmodning+&quot;, men der er intet her.&quot;);
        ud.println(&quot;&lt;/body&gt;&lt;/html&gt;&quot;);
        <emphasis>ud.flush()</emphasis>;
        <emphasis>forb.close()</emphasis>;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
</screen>


<screen>
Anmodning: GET / HTTP/0.9
Anmodning: GET / HTTP/1.1
Anmodning: GET /xxx.html HTTP/1.1
</screen>


<para>
Du kan afprøve programmet
ved at ændre på HentHjemmeside.java til at spørge
'localhost' på port 8001 eller ved i Netscape at åbne
adressen http://localhost:8001/xxx.html
</para>
</sect2>    <!--   At lytte på en port -->

<sect2>
  <title>Opgaver</title>
<orderedlist mark="arabic">
  <listitem>

<para>

Læs Javadokumentationen for klassen URLConnection, og
  omskriv HentHjemmeside til at bruge denne klasse i stedet for selv
  af lave Socket-forbindelser.
</para>

</listitem>

  <listitem>

<para>
Lav din egen proxy. En proxy er en &quot;stråmand&quot;,
  der modtager en HTTP-forespørgsel og spørger videre
  for klienten.
</para>

</listitem>

  <listitem>

<para>
Lav en virtuel opslagstavle. Den skal bestå af
  klasserne Opslagstavletjeneste, som udbyder tjenesten (brug
  port 8002), og Opslagstavleklient, som forbinder sig til tjenesten. 
  Opslagstavletjeneste skal understøtte to former for
  anmodninger: 1) TILF&Oslash;J, der føjer en besked til
  opslagstavlen og 2) HENTALLE, der sender alle opslag til klienten.
  Afprøv begge slags anmodninger fra Opslagstavleklient.
</para>

</listitem>
</itemizedlist>

<para>
<xref linkend="sdfootnote1anc">For
  den nye version af IP-protokollen, IPv6, som man regner med vil slå
  igennem omkring år 2005, er det 16 byte. Den gamle vil dog
  blive understøttet mange år frem
</para>

<para>
<xref linkend="sdfootnote2anc">Netop
  til HTTP-forespørgsler bruger man en speciel
  URLConnection-klasse, der er indrettet til netop dette (og som tager
  højde for evt. firewalls og proxyer). Vi vil bruge
  Socket-klassen i det følgende, da den kan anvendes til alle
  former for netværkskommunikation.
</para>

<para>
<xref linkend="sdfootnote3anc">I
  virkeligheden tager det noget tid, men så vil read-metoderne
  <emphasis>blokere</emphasis>, dvs. vente på
  at der er data.
</para>
</sect2>    <!--   Opgaver -->
</chapter>    <!--   Netværkskommunikation -->

