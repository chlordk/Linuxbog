<chapter id="java-dev-env">
<title>Udviklingsmiljø</title>
<indexterm><primary>Udviklingsmiljø</primary></indexterm>

<!-- ####################################################################### -->
<!-- JAVA  ->  DEV-ENV  ->  INDLEDNING                                       -->
<!-- ####################################################################### -->
<sect1 id="java-dev-env-indledning">
<title>Indledning</title>

<para>
Et professionelt udviklingsmiljø består af værktøjer, der helt eller
delvist kan løse nedenstående opaver.
</para>

<itemizedlist mark="bullet">
<listitem>
  <para>Redigering af kildetekst</para>
</listitem>
<listitem>
  <para>Oversættelse af kildetekst</para>
</listitem>
<listitem>
  <para>Opsætningsstyring</para>
</listitem>
<listitem>
  <para>Debugging</para>
</listitem>
<listitem>
  <para>Logning</para>
</listitem>
<listitem>
  <para>Profilering <!-- Hvem kender et godt dansk ord til profiling? /jk --></para>
</listitem>
<listitem>
  <para>Dokumentation</para>
</listitem>
<listitem>
  <para>Versionsstyring</para>
</listitem>
<listitem>
  <para>Test</para>
</listitem>
</itemizedlist>

<para>
De næste mange sektioner vil gå i dybden med flere af disse opgaver og give bud på
værktøjer, der er nyttige i den sammenhæng. Allerførst vil vi dog se på en række populære
integrerede udviklingsmiljøer.
</para>

</sect1>

<!-- ####################################################################### -->
<!-- JAVA  ->  DEV-ENV  ->  IDE                                              -->
<!-- ####################################################################### -->
<sect1 id="java-dev-env-ide">
<title>Integrerede udviklingsmiljøer</title>
<indexterm><primary>Integrerede udviklingsmiljøer</primary></indexterm>

<para>
Denne sektion giver et hurtigt overblik over populære integrerede udviklingsmiljøer.
</para>

<sect2 id="java-dev-env-ide-jdk">
<title>Sun JDK</title>

<para>
Den mest skrabede løsning, man kan vælge at redigere kildeteksterne i, er et
ikke-Java-orienteret program som for eksempel Notesblok under Windows
eller kedit eller emacs under Linux.
</para>

<para>
Til oversættelse og kørsel kan man installere et Java-udviklingskit udgivet af
Sun, f.eks. JDK1.3 (Java Development Kit version 1.3). Det kan hentes gratis
på <ulink url="http://www.javasoft.com">http://www.javasoft.com</ulink> til et
væld af styresystemer.
</para>

<para>
JDK'en bruges fra kommandolinjen (f.eks. i et DOS-vindue). De vigtigste kommandoer
er <constant>javac</constant>, der oversætter en kildetekstfil til bytekode, og
<constant>java</constant>, der udfører en bytekode-fil.
</para>

</sect2>

<sect2 id="java-dev-env-ide-jbuilder">
<title>Borland JBuilder</title>

<para>
Der findes en række mere avancerede programmeringsværktøjer, hvor JBuilder fra
Borland er en af de mest populære. JBuilder er skrevet i Java og kører på både
Macintosh, Windows, Linux og Sun Solaris. Det anbefales at have 128 MB RAM.
</para>

<para>
En basisversion af JBuilder kan hentes gratis fra
<ulink url="http://www.borland.com/jbuilder/">http://www.borland.com/jbuilder/</ulink>.
&Oslash;nsker man adgang til de mere avancerede funktioner skal programmet købes.
</para>

<para>
JBuilder er opbygget med en menulinje øverst, der indeholder tilgang til
filhåndtering, projektstyring og alle nødvendige værktøjer, hvoraf de vigtigste
er "Run" og "Debug". "Run" oversætter først kildeteksten og starter derefter
fortolkeren. Uddata kan ses i den nederste ramme. "Debug" (der findes under "Run")
bruges til fejlfinding af programmer og giver mulighed for at udføre programkoden
trinvist.
</para>

<para>
Når man udvikler i JBuilder, er det baseret på projekter. Projekterne indeholder
en liste over kildetekst-filerne samt, hvis det ønskes, projektinformation (lagret
som HTML-dokument).
</para>

<para>
Projektet (her oop.jpr) kan ses i den venstre ramme. Den højre ramme indeholder
kildeteksten på et faneblad. På de andre faneblade er bl.a. designværktøj til
grafiske brugergrænseflader, dokumentationsvisning og versionskontrol.
</para>

<figure id="java-dev-env-jbuilder-fig" float="1">
<title>Borland JBuilder</title>
<graphic fileref="borland_jbuilder.&magic;" scale="60"></graphic>
</figure>

</sect2>

<sect2 id="java-dev-env-ide-jdeveloper">
<title>Oracle JDeveloper</title>

<para>
Oracle udgiver JDeveloper, som er en udgave af JBuilder, hvor Oracle har integreret
sit eget database-produkt. JDeveloper er lidt mere indviklet at bruge, idet
projekter er samlet i arbejdsområder, en facilitet, man sjældent har brug for
som almindelig udvikler.
</para>

<para>
JDeveloper kræver 128 MB RAM og kører under Windows og Linux. Det kan
købes af Oracle, men bruger man i forvejen Oracles produkter, er der sandsynlighed
for, at man har fået leveret JDeveloper med i pakken.
</para>

<figure id="java-dev-env-jdeveloper-fig" float="1">
<title>Oracle JDeveloper</title>
<graphic fileref="oracle_jdeveloper.&magic;" scale="60"></graphic>
</figure>

</sect2>

<sect2 id="java-dev-env-ide-forte">
<title>Sun Forte for Java</title>

<para>
Sun udgiver sit eget udviklingsmiljø, også skrevet i Java, til Windows, Linux og
Sun Solaris. Gratisversionen, der kan hentes på 
<ulink url="http://www.sun.com/forte/">http://www.sun.com/forte/</ulink>, har
flere funktioner til at udvikle grafiske brugergrænseflader end JBuilders basisversion.
</para>

<para>
Hvilken en, der er bedst, afhænger nok af, hvem man spørger, men Forte virker
efter forfatterens mening mindre gennemført end JBuilder. JBuilder fylder mere på
disken, men har betydeligt mere hjælp, både til begynderen og den erfarne.
</para>

<figure id="java-dev-env-forte-fig" float="1">
<title>Sun Forte for Java</title>
<graphic fileref="sun_forte.&magic;" scale="60"></graphic>
</figure>

</sect2>

<sect2 id="java-dev-env-ide-visualage">
<title>IBM VisualAge for Java</title>

   <note id="visualage-to-websphere">
    <para>
     VisualAge er blevet erstattet med WebSphere.
    </para>
   </note>

<para>
Ligesom Sun har IBM sit eget udviklingsmiljø til bl.a. Java, og en gammel udgave af
miljøet kan hentes gratis på IBMs hjemmeside til bl.a. Linux (skærmbilledet viser
VisualAge for Java under Linux). Gratisversionen kræver kun 32 MB RAM. De nyere
udgaver er mere krævende (128 MB RAM).
</para>

<figure id="java-dev-env-visualage-fig" float="1">
<title>IBM VisualAge for Java</title>
<graphic fileref="ibm_visualage.&magic;" scale="60"></graphic>
</figure>

</sect2>

<sect2 id="java-dev-env-ide-other">
<title>Andre</title>

<para>
Der findes mange andre udviklingsmiljøer til Java, bl.a. Visual Café, Simplicity,
CodeGuide, AnyJ og Microsofts Visual J++. De fleste findes i en prøveudgave, der
kan hentes gratis fra internettet, og som har alle nødvendige faciliteter til at
lave mindre programmer.
</para>

</sect2>

</sect1>

<!-- ####################################################################### -->
<!-- JAVA  ->  DEV-ENV  ->  CONFIGURATION                                    -->
<!-- ####################################################################### -->
<sect1 id="java-dev-env-configuration">
<title>Opsætningsstyring</title>

<para>
Når du skal til at lave større og mere komplekse softwaresystemer,
så vil du opdage at de består af mange forskellige delkomponenter.
Delkomponenter vil i de fleste tilfælde være softwaremoduler med
bestemte versionsnumre, men det kan også være brugervejledninger
eller datafiler, som er knyttet til det pågældende softwaresystem.
</para>

<para>
Den proces at sammensætte komponenter så de udgør et softwaresystem kaldes
for <emphasis>konfigurering</emphasis> og kan være en omfattende og ret så
kedelig arbejdsopgave at udføre manuelt når man skal holde styr på 117
forskellige filer med bestemte versionsnumre og deres indbyrdes afhængigheder.
</para>

<para>
Heldigvis findes der værktøjer som er skræddersyet til konfigureringsstyring
og vi vil i dette afsnit beskrive et værktøj, der er møntet specielt mod
konfigurering af Java-softwaresystemer.
</para>

<sect2 id="java-dev-env-configuration-ant">
<title>Ant</title>

<para>
Ant er et Java-baseret værktøj. Ant kan hentes fra:
<ulink url="http://jakarta.apache.org/">http://jakarta.apache.org/</ulink>
hvor man desunden kan finde yderligere dokumentation og information.
</para>

<sect3 id="java-dev-env-configuration-dir-layout">
<title>Typisk bibliotekslayout</title>

<para>
TODO...skriv om motivationen for nedenstående layout /jk
</para>

<screen>
projektnavn              Al projektrelateret data
projektnavn/build        Oversatte class-filer, ressourcefiler og billeder
projektnavn/dist         Binær distribution af softwaresystemet inkl. manualer osv.
projektnavn/docs         Al dokumentation
projektnavn/docs/api     JavaDoc-genereret HTML af din kode
projektnavn/lib          Eksterne jar-filer, som anvendes i projektet
projektnavn/log          Logfiler
projektnavn/src          Kildetekst, ressourcefiler og billeder
projektnavn/test/lib     Eksterne jar-filer, som anvendes til test
projektnavn/test/report  Testrapporter
projektnavn/test/src     Kildetekst relateret til test af softwaresystemet
</screen>

</sect3>

<sect3>
<title>Opsætningsfil</title>

<para>
Nedenstående er vist et eksempel på en opsætningsfil til Ant som
benytter ovenstående layout. For at anvende build.xml skal man kopiere
build.xml til projekt katalog som man har valgt til dette project. Man kan benytte:

<itemizedlist mark="bullet">
<listitem>
  <para><command>ant init</command> til at oprette ovenstående katalog struktur</para>
</listitem>
<listitem>
  <para><command>ant compile</command> til at oversætte kildeteksten</para>
</listitem>
<listitem>
  <para><command>ant dist</command> til at oprette en jar fil med klasse filerne</para>
</listitem>
<listitem>
  <para><command>ant clean</command> sletter katalogerne dist og build</para>
</listitem>
<listitem>
  <para>
  <command>ant doc</command> til at generer javadoc. Du til skal dog erstatte  <emphasis> 
dk.cmm.*</emphasis> med dine egne pakker
</para>
</listitem>
</itemizedlist>
</para>

<para>
Man kan utroligt mange forskellige ting med Ant. Lige fra at
komplilere sin kildetekst, til at køre java-programmer, til test, til ftp
med mere. I stedet for at lave sine egne scripts kan det anbefales at
man ser på dokumentationen til Ant og finder den rette task således at
man har samlet projektets opsætning på et sted.
</para>

<screen>
&lt;project name="antEksempel" default="compile" basedir="."&gt;

&lt;description&gt;
  Eksempel paa Ant build.xml
&lt;/description&gt;

&lt;property name="name"       value="antEksempel"/&gt;
&lt;property name="packages"   value="dk.cmm.*"/&gt;

&lt;property name="build"      value="build"/&gt;
&lt;property name="dist"       value="dist"/&gt;
&lt;property name="docs"       value="docs"/&gt;
&lt;property name="api"        value="${docs}/api"/&gt;
&lt;property name="log"        value="log"/&gt;
&lt;property name="src"        value="src"/&gt;
&lt;property name="lib"        value="lib"/&gt;
&lt;property name="test"       value="test"/&gt;
&lt;property name="testlib"    value="${test}/lib"/&gt;
&lt;property name="testreport" value="${test}/report"/&gt;
&lt;property name="testsrc"    value="${test}/src"/&gt;

&lt;target name="init"&gt; 	
   &lt;tstamp/&gt;

   &lt;mkdir dir="${build}"/&gt;
   &lt;mkdir dir="${dist}"/&gt;
   &lt;mkdir dir="${docs}"/&gt;
   &lt;mkdir dir="${api}"/&gt;
   &lt;mkdir dir="${log}"/&gt;
   &lt;mkdir dir="${lib}"/&gt;
   &lt;mkdir dir="${src}"/&gt;
   &lt;mkdir dir="${test}"/&gt;
   &lt;mkdir dir="${testlib}"/&gt;
   &lt;mkdir dir="${testreport}"/&gt;
   &lt;mkdir dir="${testsrc}"/&gt;
&lt;/target&gt;

&lt;path id="classpath"&gt;
   &lt;fileset dir="lib"&gt;
      &lt;include name="**/*.jar"/&gt;
   &lt;/fileset&gt;
&lt;/path&gt;

&lt;target name="compile" 
        depends="init" 
	description="compile the source " &gt;
    &lt;javac srcdir="${src}" 
           destdir="${build}"
	   classpathref="classpath"/&gt;
&lt;/target&gt;

&lt;target name="dist" 
        depends="compile" 
	description="Generates a jar file" &gt;
    &lt;jar jarfile="${dist}/${appName}-${DSTAMP}.jar" basedir="${build}"/&gt;
&lt;/target&gt;

&lt;target name="clean"
        description="clean up" &gt;
    &lt;!-- Delete the ${build} and ${dist} directory trees --&gt;
    &lt;delete dir="${build}"/&gt;
    &lt;delete dir="${dist}"/&gt;
&lt;/target&gt;

&lt;target name="doc"
	description="generates api documentation"&gt;
   &lt;javadoc packagenames="${packages}"
            destdir="${api}"
            sourcepath="src"/&gt;
&lt;/target&gt;

&lt;/project&gt;
</screen>

</sect3>

</sect2>

</sect1>

<!-- ####################################################################### -->
<!-- JAVA  ->  DEV-ENV  ->  DEBUGGING                                        -->
<!-- ####################################################################### -->
<sect1 id="java-dev-env-debugging">
<title>Debugging</title>

<para>
TODO
</para>

<para>
jdb
</para>

</sect1>

<!-- ####################################################################### -->
<!-- JAVA  ->  DEV-ENV  ->  LOGGING                                          -->
<!-- ####################################################################### -->
<sect1 id="java-dev-env-logging">
<title>Logning</title>

<para>
TODO
</para>

<para>
log4j, JDK log api (JSR47)
</para>

<para>
JSR47 vs. log4j (take two). http://jakarta.apache.org/log4j/docs/critique2.html
</para>

</sect1>

<!-- ####################################################################### -->
<!-- JAVA  ->  DEV-ENV  ->  PROFILING                                        -->
<!-- ####################################################################### -->
<sect1 id="java-dev-env-profiling">
<title>Profilering</title>

<para>
TODO
</para>

<para>
java -Xprof JavaProgram
</para>

</sect1>

<!-- ####################################################################### -->
<!-- JAVA  ->  DEV-ENV  ->  DOC                                              -->
<!-- ####################################################################### -->
<sect1 id="java-dev-env-doc">
<title>Dokumentation</title>

<para>
Dokumentation er et vigtigt aspekt af ethvert softwareudviklingsprojekt.
I dette afsnit fokuserer vi på et værktøj, der kan hjælpe dig med at
udarbejde API-dokumentation.
</para>

<para>
API-dokumentation består af en API-specifikation samt en
vejledning i at bruge API'en. API-specifikationen skal ses som en kontrakt
mellem den som bruger API'en (klienten) og den som implementerer API'en
(leverandøren). Hvis leverandøren f.eks. lover at metoden
<constant>double sqr(int number)</constant>
returnerer kvadratroden af <constant>number</constant> når tallet ikke
er negativt så ved klienten at uanset, hvordan metoden er implementeret
så vil den altid returnere kvadratroden med så stor præcision, som returtypen
tillader. Hvis returværdien viser sig at være forkert i nogle tilfælde så har
leverandøren brudt kontrakten og metoden er implementeret forkert. Hvis klienten
kalder metoden med et negativt tal så er der også tale om kontraktbrud.
Kontraktbrud kan enten resultere i en exception eller også er resultatet ikke
veldefineret.
</para>

<sect2 id="java-dev-env-doc-javadoc">
<title>Javadoc</title>

<para>
Javadoc er en dokumentationsværktøj, der genererer API-dokumentation ud fra
</para>

<itemizedlist mark="bullet">
<listitem><para>
Specielle <emphasis>Javadoc-kommentarer</emphasis> indeholdt kildeteksten.
Disse udgør API-specifikationen, men kan også indeholde brugsvejledninger.
</para></listitem>
<listitem><para>
<emphasis>Pakkedokumentationsfiler</emphasis>, der indeholder overordnet
dokumentation for pakkerne.
</para></listitem>
<listitem><para>
<emphasis>Overbliksfiler</emphasis>, der indeholder overordnet dokumentation
om en mængde af pakker.
</para></listitem>
</itemizedlist>

<para>
Denne sektion er ment som en hjælp til at få dig i gang med at bruge Javadoc så
der er flere aspekter, som vi vil springe over.
Når du har fået blod på tanden så kan du læse JDK's <emphasis>Tool
documentation</emphasis> eller besøge nedenstående hjemmesider.
</para>

<itemizedlist mark="bullet">
<listitem><para>
Javadoc Tool Home Page,
<ulink url="http://java.sun.com/j2se/javadoc/">http://java.sun.com/j2se/javadoc/</ulink>
</para></listitem>
<listitem><para>
How to Write Doc Comments for Javadoc,
<ulink url="http://java.sun.com/j2se/javadoc/writingdoccomments/">http://java.sun.com/j2se/javadoc/writingdoccomments/</ulink>
</para></listitem>
</itemizedlist>

<sect3 id="java-dev-env-doc-javadoc-source">
<title>Javadoc-kommentarer</title>

<para>
Javadoc-kommentarerne er på formen
</para>

<screen>
/** et-eller-andet */
</screen>

<para>
og kan knytte sig til klasser, interfaces, konstruktører, metoder og klassevariable.
Alt afhængigt af hvad de knytter sig til så kan/skal man også angive en række
beskrivende <emphasis>Javadoc-tags</emphasis> som er på formen.
</para>

<screen>
@tagnavn et-eller-andet
</screen>

<para>
Følgende eksempel illustrerer brugen af Javadoc-kommentarer og Javadoc-tags.
</para>

<screen>
package dk.sslug;

/**
 * Denne klasse repræsenterer en simpel stak, der
 * lagrer heltal.
 *
 * @author Jonas Kongslund (jonas@kongslund.dk)
 * @version 1.1
 */
public class IntStack
{
  /** Antal elementer i stakken */
  protected int count;

  /**
   * Indeholder stakkens elementer. Elementerne er placeret
   * i &lt;code>elements[0...count-1]&lt;/code>.
   * &lt;p>
   * Toppen af stakken er &lt;code>count-1&lt;/code>
   * når &lt;code>count>0&lt;/code> og ellers udefineret.
   *
   * @see #pop()
   * @see #push(int)
   */
  protected int[] elements;

  /**
   * Standardkonstruktør for denne klasse.
   */
  public IntStack()
  {
    /* &Oslash;velse: implementer metoden sådan at
       elements og count initialiseres til
       nogle fornuftige værdier */
  }

  /**
   * Fjerner og returnerer det øverste tal på stakken.
   *
   * @return int Det øverste tal på stakken
   * @exception java.util.EmptyStackException
   *            hvis stakken er tom
   */
  public int pop() throws java.util.EmptyStackException
  {
    /* &Oslash;velse: implementer metoden */
    return -1;
  }

  /**
   * Placerer det angivne tal øverst på stakken.
   *
   * @param element Tallet der skal lægges på stakken
   */
  public void push(int element)
  {
    /* &Oslash;velse: implementer metoden så stakken
       udvides såfremt den er fyldt */
  }

  /**
   * Placerer det angivne tal øverst på stakken.
   *
   * @param element Tallet der skal lægges på stakken
   * @deprecated Siden version 1.1; Metoden er
   *   erstattet af &lt;code>push(int)&lt;/code>.
   * @see #push(int)
   */
  public void skub(int element)
  {
    push(element);
  }
}

</screen>

<para>
Bemærk at vi i eksemplet bruger HTML-tags til at fremhæve
blandt andet metodenavne. Dette er både tilladt og anbefalelsesværdigt
pga. øget læsevenlighed i API-dokumentationen.
</para>

<para>
Det er desuden anbefalelsesværdigt at lade den første sætning i hver
kommentar være beskrivende nok til at man hurtigt får en idé om, hvad
eksempelvis en metode gør. Javadoc-værktøjet forventer faktisk dette
da den bruger den første sætning til at generere oversigtslister med.
</para>

<para>
Prøv at kalde Javadoc-værktøjet med følgende argumenter
</para>

<programlisting>
<prompt>[jonas@zeta eksempler/dev-env]$ </prompt> <userinput>javadoc -author -version dk.sslug</userinput>
</programlisting>

<para>
Værktøjet genererer som standard HTML-filer. &Aring;bn
<filename>index.html</filename> med en browser
for at se resultatet.
</para>

<note><para>
Hvis du har brugt Javadoc på <constant>eksempler/dev-env/</constant>-kataloget så
følger der også pakkedokumentation med i købet, selvom den ikke er medtaget i
eksemplet foroven. Hvordan du laver pakkedokumentation beskrives senere i
denne sektion.
</para></note>

<para>
I eksemplet er der knyttet Javadoc-kommentarer til metoder og klassevariable samt klassen selv. I de fleste af kommentarerne anvendes der Javadoc-tags.
</para>

<itemizedlist mark="bullet">
<listitem><para>
  <emphasis>@author</emphasis>, der er obligatorisk, angiver ophavsmanden
  er for Javadoc-kommentarernes vedkommende beregnet til klasser og interfaces
  . Det er muligt at angive flere @author-tags på separate linjer såfremt der
  er flere ophavsmænd.
</para></listitem>
<listitem><para>
  <emphasis>@version</emphasis>, der er obligatorisk, angiver versionsnummeret
  og er for Javadoc-kommentarernes vedkommende beregnet til klasser og interfaces.
  Versionsnummeret har ikke nogen speciel betydning og kan derfor være hvad som helst.
</para></listitem>
<listitem><para>
  <emphasis>@since</emphasis>, angiver i hvilken version af API'en som
  tilføjelsen fandt sted og kan bruges overalt. Versionsnummeret har ikke nogen
  speciel betydning og kan derfor være hvad som helst.
</para></listitem>
<listitem><para>
  <emphasis>@param</emphasis> beskriver et argument og er beregnet til metoder
  og konstruktører. Først angives argumentets navn og dernæst beskrivelsen.
</para></listitem>
<listitem><para>
  <emphasis>@return</emphasis> beskriver returværdien og er beregnet til metoder.
  Først angives returtypen og dernæst beskrivelsen.
</para></listitem>
<listitem><para>
  <emphasis>@exception</emphasis> beskriver en exception og er beregnet til
  metoder og konstruktører. Der kan naturligvis være flere @exception-tags og hvis du
  synes <emphasis>@throws</emphasis> virker mere logisk så kan du også anvende
  denne.
</para></listitem>
<listitem><para>
  <emphasis>@see</emphasis> henviser til en pakke, klasse, klassevariabel,
  interface, konstruktør eller metode. En af de mulige henvisningsformer er
  <constant>pakkenavn.klassenavn#medlem</constant>, hvor medlem kan være et
  metodenavn på formen <constant>flaf(type1,type2,...)</constant> eller et
  variabelnavn. Pakkenavn og klassenavn kan udlades, hvis der henvises til en
  metode eller klassevariabel indenfor samme klasse. Dette Javadoc-tag kan anvendes i
  alle Javadoc-kommentarer.
</para></listitem>
<listitem><para>
  <emphasis>@deprecated</emphasis> kan bruges overalt og indikerer f.eks. at en
  metode ikke længere bør anvendes fordi den vil udgå i en senere version. Det er
  anbefalelsesværdigt at henvise til et alternativ ved hjælp af @see.
</para></listitem>
</itemizedlist>

</sect3>

<sect3 id="java-dev-env-doc-javadoc-package">
<title>Pakkekommentarer</title>

<para>
En pakkekommentar laves ved at oprette en HTML-fil kaldet
<filename>package.html</filename>, der placeres i pakkens katalog.
Hvis pakken f.eks. hedder <constant>dk.sslug</constant> så placeres
filen i <filename>dk/sslug</filename>. Javadoc-værktøjet sørger
automatisk for at medtage filen.
</para>

<para>
Forneden har vi et eksempel på en pakkekommentar.
</para>

<screen>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
&lt;html>
  &lt;head>
    &lt;title>dk.sslug&lt;/title>
  &lt;/head>
  &lt;body>
    Tilbyder containerklasser, som kan lagre forskellige typer
    data. Indtil videre er der kun én klasse, IntStack, men
    dette bliver der ændret på i næste version.

    @see dk.sslug.IntStack
    @since 1.0
  &lt;/body>
&lt;/html>
</screen>

<para>
Javadoc-værktøjet bruger kun det der står mellem &lt;body> og &lt;/body>, så
titlen kan være hvad som helst.
</para>

<para>
Ligesom med Javadoc-kommentarer er det muligt at anvende
Javadoc-tags i pakkekommentarer. Blandt dem der er nævnt
tidligere kan du anvende
</para>

<itemizedlist mark="bullet">
<listitem><para>@author (ikke obligatorisk som hos Javadoc-kommentarer)</para></listitem>
<listitem><para>@version (ikke obligatorisk som hos Javadoc-kommentarer)</para></listitem>
<listitem><para>@since</para></listitem>
<listitem><para>@deprecated</para></listitem>
<listitem><para>@see</para></listitem>
</itemizedlist>

<para>
Bemærk at pakkekommentarer må ikke indeholde <constant>/** ... */</constant>
og en linje må ikke starte med <constant>*</constant>.
</para>

</sect3>

<sect3 id="java-dev-env-doc-javadoc-linking">
<title>Linke til andre API-dokumenter</title>

<para>
I eksemplet foroven kan <constant>pop()</constant>-metoden smide en
<constant>java.util.EmptyStackException</constant>, men denne har vi
ikke selv lavet og derfor linker API-dokumentationen ikke til den.
Dette kunne dog godt være ønskværdigt såfremt man ikke lige kan huske hvad
EmptyStackException dækker over (hvilket i dette tilfælde dog nok er ret
usandsynligt).
</para>

<para>
Javadoc-værktøjet er så smart at det kan linke din API-dokumentation til
klasser og interfaces, der er indeholdt i andre API-dokumenter. Det eneste
man skal gøre er at fortælle Javadoc, hvor den eksterne dokumentation
befinder sig.
</para>

<para>
Her er et eksempel, der forudsætter at JDK's API-dokumentation er indeholdt i
<filename>$JAVA_HOME/docs/api</filename>.
</para>

<programlisting>
<prompt>[jonas@zeta eksempler/dev-env]$ </prompt> <userinput>javadoc -link $JAVA_HOME/docs/api dk.sslug</userinput>
</programlisting>

<para>
Du kan også angive en URL.
</para>

<programlisting>
<prompt>[jonas@zeta eksempler/dev-env]$ </prompt> <userinput>javadoc -link \
http://java.sun.com/products/jdk/1.3/docs/api/ dk.sslug</userinput>
</programlisting>

<para>
I begge tilfælde bliver der kun lavet links til dokumentationen for en
ekstern klasse eller interface såfremt følgende er opfyldt
</para>

<itemizedlist mark="bullet">
<listitem><para>
Den er eksplict angivet i en import-sætning, f.eks. 
<constant>import java.util.EmptyStackException;</constant>. Det er ikke nok at
der står <constant>import java.util.*;</constant>.
</para></listitem>
<listitem><para>
Den er angivet som returtype eller argumenttype i en metode eller konstruktør.
</para></listitem>
<listitem><para>
Den anvendes i en implements-, extends- eller throws-sætning, f.eks.
<constant>public int pop() throws java.util.EmptyStackException</constant>
</para></listitem>
</itemizedlist>

<para>
I eksemplet er det tilfælde tre som gør sig gældende.
</para>

</sect3>

</sect2>

</sect1>

<!-- ####################################################################### -->
<!-- JAVA  ->  DEV-ENV  ->  VERSION CONTROL                                  -->
<!-- ####################################################################### -->
<sect1 id="java-dev-env-version-control">
<title>Versionsstyring</title>

<para>
TODO
</para>

<para>
CVS. &linuxbogurl;/program/bog/vaerktoej.html
</para>

</sect1>

<!-- ####################################################################### -->
<!-- JAVA  ->  DEV-ENV  ->  TEST                                             -->
<!-- ####################################################################### -->
<sect1 id="java-dev-env-test">
<title>Test</title>
<indexterm>
  <primary>Test</primary>
  <secondary>JUnit</secondary>
</indexterm>

<para>
Kunsten at lave fejlfri programmer er svær at mestre. Kunsten at lave robuste
programmer er svær at mestre. Kunsten at lave programmer der svarer til kundernes
forventning er svær at mestre. Netop derfor er det nødvendigt at ethvert
softwareprojekt i et eller andet omfang gennemtestes for fejl og mangler inden
det sendes ud på markedet.
</para>

<para>
En <emphasis>modultest</emphasis> er en test, der afprøver en afgrænset delmængde kode
i isolation fra det samlede softwaresystem. Målet er at finde fejl og sandsynliggøre
at modulet fungerer efter hensigten. Når vi taler Java så er et modul som oftest
enten en klasse eller en samling af klasser hørende under en fælle pakke.
</para>

<para>
I denne sektion ser vi på et yderst værdifuldt værktøj til automatiseret modultest,
<emphasis>JUnit</emphasis>.
</para>

<sect2 id="java-dev-env-test-junit">
<title>JUnit</title>

<para>
JUnit er et testframework, der har til formål at lette programmørens arbejde når
der skal udarbejdes testmetoder. Frameworket er centreret omkring begrebet
<emphasis>Test Case</emphasis> som repræsenterer en samling af testmetoder for et enkelt modul.
På dansk kaldes en test case for en <emphasis>testsamling</emphasis>.
</para>

<para>
Du kan ganske gratis hente JUnit fra <ulink url="http://www.junit.org/">http://www.junit.org</ulink>.
På selvsamme adresse kan du også finde mange gode artikler og eksempler. Gennemgangen i
denne sektion er kun ment som en hurtig introduktion så det kan varmt anbefales selv at
grave efter mere information.
</para>

<sect3 id="java-dev-env-test-junit-intstack">
<title>Test af IntStack</title>

<para>
I <xref linkend="java-dev-env-doc-javadoc"/> blev der defineret en stak,
<constant>IntStack</constant>, der kan lagre heltal. Nedenstående kode viser
et eksempel på, hvordan JUnit kan anvendes til at teste denne stak.
</para>

<para>
For at kunne oversætte og udføre eksemplet så skal jar-filen <constant>junit.jar</constant>
være med i CLASSPATH.
</para>

<screen>
package dk.sslug;

import junit.framework.TestCase;
import dk.sslug.IntStack;

public class TestIntStack extends TestCase
{
  public TestIntStack(String name)
  {
    super(name);
  }

  public void testPushPop()
  {
    IntStack stack = new IntStack();
    stack.push(10);
    stack.push(20);
    stack.push(30);
    assertTrue( stack.pop() == 30 );
    assertTrue( stack.pop() == 20 );
    assertTrue( stack.pop() == 10 );
  }

  public void testEmptyStackException()
  {
    IntStack stack = new IntStack();
    try {
      stack.pop();
      fail("Burde have smidt en EmptyStackException");
    } catch (java.util.EmptyStackException e) {
    }
  }
}
</screen>

<para>
Der er flere ting du skal bide mærke i. For det første skal en testklassen nedarve
fra <constant>TestCase</constant>-klassen. For det andet skal testmetoderne starte med navnet
<emphasis>test</emphasis> for at testframeworket kan udføre dem. For det tredje skal
testmetoderne være deklareret public og ikke tage imod nogen argumenter.
</para>

<para>
Metoden <constant>assertTrue(boolean)</constant> bruges til at fortælle
testframeworket, hvorvidt en test skal fejle eller ej. Hvis det boolske udtryk
evaluerer til falsk så fejler testen.
</para>

<para>
Der findes flere forskellige <constant>assertX()</constant>-metoder (læs dokumentationen!).
De mest brugte udover <constant>assertTrue(boolean)</constant> er nok
</para>

<itemizedlist>
<listitem><para><constant>
assertEquals(java.lang.Object expected, java.lang.Object actual) 
</constant></para></listitem>
<listitem><para><constant>
assertNotNull(java.lang.Object object) 
</constant></para></listitem>
<listitem><para><constant>
assertNull(java.lang.Object object) 
</constant></para></listitem>
</itemizedlist>


<para>
<constant>fail()</constant>-metoden får altid en test til at fejle.
</para>

<para>
Hvis ovenstående eksempel oversættes og køres med
</para>

<programlisting>
<prompt>[jonas@zeta eksempler/dev-env]$ </prompt> <userinput>java junit.textui.TestRunner \
dk.sslug.TestIntStack</userinput>
</programlisting>

<para>
så fås 
</para>

<screen>
.F.F
Time: 0.029
There were 2 failures:
1) testPushPop(dk.sslug.TestIntStack)junit.framework.AssertionFailedError: expected:<-1> but was:<30>
        at dk.sslug.TestIntStack.testPushPop(TestIntStack.java:27)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:42)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:28)
2) testEmptyStackException(dk.sslug.TestIntStack)junit.framework.AssertionFailedError: Burde have smidt en EmptyStackException
        at dk.sslug.TestIntStack.testEmptyStackException(TestIntStack.java:37)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:42)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:28)

FAILURES!!!
Tests run: 2,  Failures: 2,  Errors: 0
</screen>

<para>
Hvis der smides en runtime exception i testmetoden som ikke fanges så fejler
testen også. I JUnit-terminologi er fejl forårsaget af <constant>assertX()</constant>-
og <constant>fail()</constant>-metoder <emphasis>failures</emphasis> men runtime exceptions
der ikke bliver fanget er <emphasis>errors</emphasis>.
</para>


<para>
Du kan lege med at implementere <constant>IntStack</constant> i henhold til API-specifikationen
og se om din implementation indeholder fejl.
</para>

<para>
Du kan også bruge en grafisk TestRunner. Hvis du kører nedenstående
</para>

<programlisting>
<prompt>[jonas@zeta eksempler/dev-env]$ </prompt> <userinput>java junit.awtui.TestRunner \
dk.sslug.TestIntStack</userinput>
</programlisting>

<para>
så fås
</para>

<figure id="java-dev-env-junit-gui-fig" float="1">
<title>Grafisk JUnit TestRunner</title>
<graphic fileref="junit-gui.&magic;" scale="60"></graphic>
</figure>

</sect3>

<sect3 id="java-dev-env-test-junit-fixture">
<title>Fælles initialisering for metoder</title>

<para>
Ofte er man ude for at have to eller flere testmetoder, som skal operere på den samme
kendte mængde af objekter. I JUnit-terminologi kaldes denne mængde af objekter for et
<emphasis>test fixture</emphasis> og skal betragtes som en slags fast inventar som
alle testmetoder kan benytte sig af. Ligeledes er det ikke sjældent at to eller flere
testmetoder skal gøre brug af en fælles ressource, for eksempel en netværksforbindelse
eller en databaseforbindelse.
</para>

<para>
Nedenstående eksempel viser hvordan dette kan gøres ved at overskrive metoderne
<constant>setUp()</constant> og <constant>tearDown()</constant> og benytte sig af
klassevariable.
</para>

<screen>
package dk.sslug;

import junit.framework.TestCase;
import dk.sslug.IntStack;

public class TestIntStack extends TestCase
{
  IntStack nonempty_stack;
  IntStack empty_stack;

  public TestIntStack(String name)
  {
    super(name);
  }

  protected void setUp() throws Exception
  {
    nonempty_stack = new IntStack();
    nonempty_stack.push(10);

    empty_stack = new IntStack();
  }

  protected void tearDown() throws Exception
  {
    // intet behov for oprydning
  }

  ...
}
</screen>

<para>
Hver gang en testmetode skal udføres så tages <constant>setUp()</constant>
og <constant>tearDown()</constant> i brug. <constant>setUp()</constant> bliver
kaldt umiddelbart før den enkelte testmetode, mens <constant>tearDown()</constant>
bliver kaldt umiddelbart efter.
</para>

<para>
Bemærk at begge metoder er deklareret som protected og sat til at kunne kaste en exception.
</para>

</sect3>

</sect2>

</sect1>

</chapter>
