<chapter id="java-pakker">
  <title>Pakker</title>

<para>
Indhold:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>
Forstå pakkebegrebet og nøgleordet import
</para>

</listitem>

  <listitem>

<para>
Importere og bruge standardpakkerne
</para>

</listitem>

  <listitem>

<para>
Definere egne pakker
</para>

</listitem>
</itemizedlist>

<para>
Kapitlet forudsættes ikke i resten af bogen, men er ofte en
fordel, når man skal programmere i praksis.
</para>

<para>
Forudsætter <xref linkend="java-klasser" />, Definition af klasser.
</para>

<para>
Når man laver større programmer (over 30-40 klasser),
kan det være nyttigt at opdele dem i grupper. En pakke er en
samling af klasser, der på en eller anden måde er
beslægtede i funktion.
</para>

<blockquote><para>En pakke er en samling af klasser</para></blockquote>

<para>
Javas standardbibliotek på mere end 1000 klasser er delt op
i ca. 30 mindre pakker.
</para>

<para>
Pakker svarer til (klasse)biblioteker i C eller C++ eller
&quot;unit&quot;-begrebet i PASCAL.
</para>

<sect1 id="java-pakker-import">
  <title>At importere klassedefinitioner</title>

<para>
Vi har set, at når vi skal benytte klasser, der ligger ud
over de helt grundlæggende, bliver vi nødt til at
meddele oversætteren, hvor den kan forvente at finde
definitionen af klassen. Dette kaldes at importere klassen.
</para>

<para>
Egentlig kunne vi godt helt udelade import-sætninger og
skrive det fulde pakke- og klassenavn hver gang. Hvis vi f.eks. vil
benytte Vector-klassen, kunne vi skrive:
</para>

<screen>
    java.util.Vector v;
    v = new java.util.Vector();
</screen>


<para>
Det er jo lidt besværligt, og derfor kan vi vælge
øverst i kildetekstfilen at skrive:
</para>

<screen>
import java.util.Vector;
</screen>


<para>
Dette får oversætteren til at lede i java.util-pakken,
hvis den møder en klasse, den ikke umiddelbart genkender. Nu
kan vi skrive, som vi plejer:
</para>

<screen>
    Vector v;
    v = new Vector();
</screen>


<para>
Der kan forekomme et hvilket som helst antal import-sætninger
i en javafil. Import-sætninger skal stå først
i filen, før klassedefinitionen. Hvis man ønsker at
importere flere klassedefinitioner fra samme pakke kan man skrive en
* i stedet for klassenavnet:
</para>

<screen>
import java.util.*;
</screen>


<para>
Dermed importerer man samtlige klasser fra denne pakke. Det vil
sige, at oversætteren leder denne pakke igennem, når
den møder en klasse, den ikke umiddelbart genkender. De
klassedefinitioner, der ikke bruges, bliver altså bare
ignoreret.
</para>

<blockquote><para>Import af en klasse gør blot
definitionen af klassen kendt for oversætteren - det gør
ikke det færdige program større eller langsommere</para></blockquote>
</sect1>    <!--   At importere klassedefinitioner -->

<sect1 id="java-pakker-standard">
  <title>Standardpakkerne</title>

<para>
I Javas indbyggede hjælpesystem kan man se de forskellige
indbyggede pakker, der indeholder en række nyttige
klasser. De vigtigste standardpakker er:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>
java.lang  grundfunktioner i sproget
</para>

</listitem>

  <listitem>

<para>
java.util    nyttige værktøjer, såsom Date,
  Vector og meget andet
</para>

</listitem>

  <listitem>

<para>
java.awt    Abstract Window Toolkit. Basal vinduesbaseret
  programmering og grafik
</para>

</listitem>

  <listitem>

<para>
java.applet  klasser til understøttelse af appletter
</para>

</listitem>

  <listitem>

<para>
java.io    IO-funktioner, filhåndtering og datastrømme
</para>

</listitem>

  <listitem>

<para>
java.net    netværksfaciliteter
</para>

</listitem>

  <listitem>

<para>
java.rmi    Remote Method Invocation - til distribuerede
  systemer
</para>

</listitem>

  <listitem>

<para>
java.sql    databaseadgang (også kaldet JDBC)
</para>

</listitem>

  <listitem>

<para>
java.text    håndtering af tekst uafhængigt af
  sprog
</para>

</listitem>

  <listitem>

<para>
javax.swing  avanceret vinduesbaseret programmering
</para>

</listitem>
</itemizedlist>

<para>
Hvorfor hedder den sidste javax? javax betyder, at sproget er
udvidet med nogle ting, som ikke på nuværende tidspunkt
er en del af det egentlige standardbibliotek, og som måske er
bestemt til aldrig at blive det. Et andet eksempel på javax er
javax.comm, som er en kommunikationspakke, der håndterer seriel
og parallel transmission af data.
</para>

<sect2 id="java-pakker-standard-lang">
  <title>Pakken java.lang</title>

<para>
De mest basale javaklasser, eksempelvis String, ligger i pakken
java.lang. Denne særlige pakke indeholder en masse
grundfunktioner og importeres altid af oversætteren. Det er
altså ikke nødvendigt at importere den eksplicit med
import java.lang.*;
</para>

<para>
Af andre klasser i java.lang kan nævnes System (til f.eks.
System.out.println()) og Math (til f.eks. Math.random() og
Math.sqrt()).
</para>
</sect2>    <!--   Pakken java.lang -->
</sect1>    <!--   Standardpakkerne -->

<sect1 id="java-pakker-filsys">
  <title>Placering på filsystemet</title>

<para>
Hvis vi husker, at en pakke er en navngiven samling af klasser, er
det nærliggende at tænke på, hvordan filer er
organiseret i underkataloger på et filsystem.
</para>

<blockquote><para>En klasse svarer til en fil på
filsystemet</para></blockquote>
<blockquote><para>En pakke svarer til et underkatalog på
filsystemet</para></blockquote>

<para>
For eksempel findes klassen java.util.Vector som filen
Vector.class i et katalog, der hedder util, som er et underkatalog
til et katalog, der hedder java: java/util/Vector.class (i DOS og
Windows som: java\util\Vector.class).
</para>

<para>
Ofte er klasserne og katalogerne pakket sammen i et såkaldt
Java-arkiv (.jar-fil). jar-filer minder meget om zip-filer.
</para>

<para>
Oversætteren skal kende pakkens fysiske placering i
filsystemet:
</para>

<orderedlist>
  <listitem>

<para>
Som et underkatalog med samme navn som pakken.
</para>

</listitem>

  <listitem>

<para>
I et underkatalog med samme navn som pakken et andet sted i
  filsystemet, som der henvises til med CLASSPATH-variablen.
</para>

</listitem>

  <listitem>

<para>
I en jar-fil, som der henvises til med CLASSPATH-variablen.
</para>

</listitem>
</orderedlist>

<para>
CLASSPATH-variablen er en miljøvariabel, der minder om
PATH-variablen (defineret i AUTOEXEC.BAT i DOS). Den angiver de
steder, hvor oversætteren skal lede efter klassedefinitioner.
</para>
</sect1>    <!--   Placering på filsystemet -->

<sect1 id="java-pakker-egne">
  <title>At definere egne pakker</title>

<para>
Man kan definere sine egne pakker. Dette er specielt brugbart i
større systemer, hvor man har mange klasser med beslægtede
funktioner, for eksempel kommunikation (internetkøb med VISA
eller Dankort) eller sine egne matematik- eller
datobearbejdningspakker.
</para>

<sect2 id="java-pakker-egne-eks">
  <title>Eksempel på brugen af egne pakker</title>

<para>
I følgende eksempel findes to klasser, nemlig Klasse1 og
Klasse2 i en pakke (der hedder minPakke). De bruges af den
kørbare klasse BrugPakker:
</para>

<screen>
<emphasis>import minPakke.*;</emphasis>

public class BrugPakker
{
  public static void main(String args[] )
  {
    Klasse1 a = new Klasse1();
    Klasse2 b = new Klasse2();
    a.snak();
    b.snak();
  }
}
</screen>


<para>
Klasse1 og Klasse2 skal ligge i et underkatalog, der hedder
minPakke:
</para>

<screen>
<emphasis>// Filnavn: minPakke/Klasse1.java</emphasis>
<emphasis>package minPakke;</emphasis>

public class Klasse1
{
  public void snak()
  {
    System.out.println(&quot;Dette er Klasse1, der taler!&quot;);
  }
}
</screen>

<para>og</para>

<screen>
<emphasis>// Filnavn: minPakke/Klasse2.java</emphasis>
<emphasis>package minPakke;</emphasis>

public class Klasse2
{
  public void snak()
  {
    System.out.println(&quot;Dette er Klasse2, der taler!&quot;);
  }
}
</screen>
</sect2>    <!--   Eksempel på brugen af egne pakker -->

<sect2 id="java-pakker-egne-navne">
  <title>Navngive pakker</title>

<para>
Det er normalt at man benytter sin internetadresse eller firmanavn
i navngivningen af pakkerne. F.eks: oracle.jdeveloper.layout.XYLayout
(klassen er XYLayout og pakken er oracle.jdeveloper.layout),
com.sybase.jdbc.SybDriver eller netscape.javascript.JSObject.
</para>
</sect2>    <!--   Navngive pakker -->

<sect2 id="java-pakker-egne-jar">
  <title>Pakke klasser i JAR-filer (Java-arkiver)</title>

<para>
Laver man sine egne pakker, ønsker man ofte at kunne
distribuere dem til andre. De skabes med et ZIP-værktøj
som WinZip eller GnoZip til Linux eller fra kommandolinjen med jar,
der følger med, når man installerer Java. Kommandoen jar
minder meget om UNIX' tar-kommando. Man opretter et arkiv ved at
skrive f.eks.:
</para>

<screen>
  jar cf minPakke.jar minPakke
</screen>


<para>
Dette vil oprette JAR-filen minPakke.jar med klasserne
minPakke/Klasse1.class og minPakke/Klasse2.class.
</para>
</sect2>    <!--   Pakke klasser i JAR-filer (Java-arkiver) -->
</sect1>    <!--   At definere egne pakker -->

<sect1 id="java-pakker-opg">
  <title>Opgaver</title>

<para>
Søg i din computer efter filer, der ender på .jar, og
åbn dem med et program, der kan læse ZIP-komprimerede
filer (f.eks unzip eller WinZip). Hvordan ligger filerne organiseret?
</para>

<para>
Prøv, om du kan finde filen, der indeholder Vector-klassen.
</para>
</sect1>    <!--   Opgaver -->
</chapter>    <!--   Pakker -->

