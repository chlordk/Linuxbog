<chapter id="java-analyse-design">
<title>Objektorienteret analyse og design</title>

<para>
  Indhold:
</para>

<itemizedlist mark="bullet">
  <listitem><para>Analyse: Finde vigtige ord, brugsmønstre, aktivitetsdiagrammer ogskærmbilleder</para></listitem>
  <listitem><para>Design: Kollaborationsdiagrammer og klassediagrammer</para></listitem>
  <listitem><para>Eksempel: Skitse til et yatzy-spil</para></listitem>
</itemizedlist>

<para>
  Kapitlet giver id&eacute;er til, hvordan en problemstilling kan
  analyseres, før man går i gang med at programmere.
</para>

<para>
  Forudsætter kapitel 5, Nedarvning.
</para>

<para>
  Når et program udvikles sker det normalt i fem faser:
</para>

<orderedlist>
  <listitem><para>Kravene til programmet bliver afdækket.</para></listitem>
  <listitem><para>Analyse - hvad det er for ting og begreber programmet handler om.</para></listitem>
  <listitem><para>Design - hvordan programmet skal laves.</para></listitem>
  <listitem><para>Programmering.</para></listitem>
  <listitem><para>Afprøvning.</para></listitem>
</orderedlist>

<para>
  I traditionel systemudvikling udføres de fem faser efter hinanden, og
  en ny fase påbegyndes først når den forrige er afsluttet. Hver fase
  udmøntes i et dokument som senere kan bruges dokumentation af
  systemet.
</para>

<para>
  Dette er i skarp modsætning til den måde som en selvlært umiddelbart
  ville programmere. Her blandes faserne sammen i hovedet på
  programmøren, som skifter mellem dem mens han programmerer. Resultatet
  er ofte et program, der bærer præg af ad-hoc-udbygninger og som er
  svært at overskue og vedligeholde - selv for programmøren selv.
</para>

<para>
  Den bedste udviklingsmetode findes nok et sted mellem de to
  ekstremer. Der dukker f.eks. altid nye ting op under programmeringen
  som gør, at man må ændre sit design. Omvendt er det svært at
  programmere uden et gennemtænkt design.
</para>

<para>
  Derfor er det ikke en god ide at bruge alt for lang tid på at lave
  fine tegninger og diagrammer - en blyantskitse er lige så god. Det er
  indholdet, der tæller, og ofte laver man om i sit design flere gange,
  inden programmet er færdigt.
</para>

<para>
  Dette kapitel viser gennem et eksempel (et Yatzy-spil) en grov skitse
  til analyse og design af et program. Det er tænkt som inspiration til,
  hvordan man kunne gribe sit eget projekt an.
</para>

<sect1 id="java-analyse-design-krav">
<title>Krav til programmet</title>

<para>
  Vi skal lave et Yatzy-spil for flere spillere. Der kan være et
  variabelt antal spillere, hvoraf nogle kan være styret af
  computeren. Computerspillerne skal have forskellige strategier
  (dum/tilfældig, grådig, strategisk), der vælges tilfældigt.
</para>

<para>
  Efter at spillet er afsluttet, huskes resultatet i et lager, hvorfra
  man kan generere en hiscore-liste.
</para>
</sect1>    <!--   Krav til programmet -->

<sect1 id="java-analyse-design-obj-analyse">
<title>Objektorienteret analyse</title>

<para>
  Analysen skal beskrive hvad det er for ting og begreber programmet
  handler om. Analysens formål er at afspejle virkeligheden mest muligt.
</para>

<sect2 id="java-analyse-design-obj-analyse-ord">
<title>Skrive vigtige ord op</title>

<para>
  Det kan være en hjælp først at skrive alle de navneord (i ental) eller
  ting op, man kan komme i tanke om ved problemet. Ud for hver ting kan
  man notere eventuelle egenskaber (ofte tillægsord) og handlinger (ofte
  udsagnsord) der knytter sig til tingen.
</para>

<para>
  Yatzyspil
</para>

<para>
  Terning - værdi, kaste, holde
</para>

<para>
  Raflebæger - kombination, ryste, holde
</para>

<para>
  Blok - skrive spillernavn på, skrive point på
</para>

<para>
  Spiller - navn
</para>

<para>
  Computerspiller
</para>

<para>
  Strategi
</para>

<para>
  Menneske
</para>

<para>
  Regel (kunne også kaldes en mulighed eller et kriterium) -
  opfyldt, pointgivning
</para>

<para>
  Lager
</para>
</sect2>    <!--   Skrive vigtige ord op -->

<sect2 id="java-analyse-design-obj-brugsmoenstre">
<title>Brugsmønstre</title>

<para>
  Brugsmønstre (eng.: Use Case) beskriver en samling af aktører og
  hvilke brugsmønstre, de deltager i. Man starter helt overordnet og går
  mere og mere i detaljer omkring hvert brugsmønster.
</para>

<para>
  Man kan hævde, at Yatzy-spillet er på grænsen til at være for simpelt
  til at lave brugsmønstre.  Herunder to brugsmønstre. Til venstre et
  meget overordnet der beskriver to spillere og lageret som aktører. Til
  højre brugsmønstret omkring en tur.
</para>

<figure id="java-analyse-design-obj-brugsmoenstre-fig1">
  <title>Java</title>
  <graphic fileref="Nordfalk2415474.&magic;" scale="60"></graphic>
</figure>
 
<figure float="1" id="java-analyse-design-obj-brugsmoenstre-fig2">
  <title>Tur</title>
  <graphic fileref="Nordfalk2415476.&magic;" scale="60"></graphic>
</figure>
</sect2>    <!--   Brugsmønstre -->

<sect2 id="java-analyse-design-obj-aktivitetsdiag">
<title>Aktivitetsdiagrammer</title>

<para>
  Aktivitetsdiagrammer beskriver den rækkefølge, som adfærdsmønstre og
  aktiviteter foregår i.
</para>

<para>
  Eksempel: Aktiviteten &quot;definere deltagere i spillet&quot;:
</para>

<figure id="java-analyse-design-obj-aktivitetsdiag-fig1">
  <title>Java</title>
  <graphic fileref="Nordfalk2415478.&magic;" scale="60"></graphic>
</figure>

<para>
  Herunder ses et diagram for spillets gang, &quot;en tur&quot;:
</para>

<figure id="java-analyse-design-obj-aktivitetsdiag-fig2">
  <title>Java</title>
  <graphic fileref="Nordfalk2415480.&magic;" scale="60"></graphic>
</figure>
</sect2>    <!--   Aktivitetsdiagrammer -->

<sect2 id="java-analyse-design-obj-skaermbilleder">
<title>Skærmbilleder</title>

<para>
  Hvis skærmbilleder er en væsentlig del af ens program,
  er det en god hjælp at tegne de væsentligste for at gøre
  sig klart, hvilke elementer programmet skal indeholde.
</para>

<para>
  Disse kan med fordel designes direkte med et
  Java-udviklingsværktøj. Herved opnår man en ide
  om, hvad der er muligt, samtidig med at den genererede kode ofte (men
  ikke altid!) kan genbruges i programmeringsfasen.
</para>

<para>
  Normalt kommer der en klasse for hvert skærmbillede, så
  man kan også med det samme give dem sigende navne.
</para>

<para>
  Når programmet startes skal vælges 2-6 spillere,
  hvoraf nogle kan være computerspillere:
</para>

<figure id="java-analyse-design-obj-skaermbilleder-fig1">
  <title>Java</title>
  <graphic fileref="Nordfalk2415482.&magic;" scale="60"></graphic>
</figure>

<para>
  TilfoejSpillervindue
</para>

<para>
  Under selve spillet skiftes spillerne til at få tur.
</para>

<para>
  For menneske-spillerne dukker dette billede op:
</para>

<figure id="java-analyse-design-obj-skaermbilleder-fig2">
  <title>Java</title>
  <graphic fileref="Nordfalk2415484.&magic;" scale="60"></graphic>
</figure>

<para>
  Turvindue
</para>

<para>
  Man kan holde på terningerne ved at klikke på
  afkrydsningsfelterne.
</para>

<para>
  Når spilleren er færdig (efter max 3 kast), skal
  han/hun vælge, hvilken regel der skal bruges, ved at
  klikke på den i blok-vinduet:
</para>

<figure id="java-analyse-design-obj-skaermbilleder-fig3">
  <title>Java</title>
  <graphic fileref="Nordfalk2415486.&magic;" scale="60"></graphic>
</figure>

<para>
  Blokvindue
</para>

</sect2>    <!--   Skærmbilleder -->
</sect1>    <!--   Objektorienteret analyse -->

<sect1 id="java-analyse-design-obj-design">
<title>Objektorienteret design</title>

<para>
  Designets formål er at beskrive, hvordan programmet skal
  implementeres.
</para>

<para>
  Her skal man bl.a. identificere de vigtigste klasser i systemet og
  lede efter ligheder mellem dem med henblik på nedarvning og
  genbrug.
</para>

<sect2 id="java-analyse-design-obj-design-kol-diag">
<title>Kollaborationsdiagrammer</title>

<para>
  Nyttige diagramformer under design er kollaborationsdiagrammer
  (samarbejdsdiagrammer), hvor man beskriver relationerne mellem
  klasserne eller objekterne på et overordnet plan.
</para>

<para>
  Her er et eksempel:
</para>

<figure id="java-analyse-design-obj-design-kol-diag-fig1">
  <title>Java</title>
  <graphic fileref="Nordfalk2415488.&magic;" scale="60"></graphic>
</figure>

<para>
  Har-relationer giver et vink om, at et objekt har en reference til
  (evt. ejer) et andet objekt. F.eks.:
</para>

<itemizedlist mark="bullet">
  <listitem>
    <para>
      Raflebægeret har en reference til terningerne, ellers
      kan det ikke kaste dem. Terningerne kender ikke til
      raflebægerets eksistens.
    </para>
  </listitem>
  <listitem>
    <para>
      Blokken har nogle regler (en for hver række). Reglerne
      kender ikke til blokkens eller spillerens eksistens.
    </para>
  </listitem>
  <listitem>
    <para>
      Blokken har nogle spillere (en for hver søjle), og
      spillerne ved de hører til en blok hvor deres resultater skal
      skrives ind på.
    </para>
  </listitem>
  <listitem>
    <para>
      lokkens data skal vises i et vindue. Der er brug for, at
      blokken kender til Blokvindue, vinduet, der viser blokken på
      skærmen, så det kan gentegnes, når blokken ændrer
      sig. Men vinduet har også brug for at kende til blokken, som
      indeholder de data, det skal vise.
    </para>
  </listitem>
</itemizedlist>

<para>
  Når spilleren tjekker regler, sker det gennem blok-objektet.
   Man kan forestille sig, at spilleren løber gennem alle
  blokkens regler og ser, om der er nogle, der passer, og han ikke har
  brugt endnu. Tjek af regler er altså ikke en har-relation, for
  spilleren har ikke en variabel, der refererer til reglerne.
</para>

<para>
  Visse steder er der mange slags objekter, der kan indgå i
  samme rolle. Det gælder for eksempel Spillere i diagrammet
  ovenfor. Så kan man tegne et separat diagram, der viser
  rollerne.
</para>

<figure id="java-analyse-design-obj-design-kol-diag-fig2">
  <title>Java</title>
  <graphic fileref="Nordfalk2415490.&magic;" scale="60"></graphic>
</figure>

<para>
  Er-en-relationer angiver generalisering eller specialisering (hvor
  nedarvning kan være en fordel). Det tegnes oftest med en hul
  pil.
</para>

<para>
  Her er det lidt specielle, at &eacute;n type spiller (nemlig
  Menneske) har et vindue tilknyttet. Dette vindue skal jo have
  adgang
  til at vise terningerne, så man skal huske at sørge for,
  at spillere har en reference til raflebægeret.
</para>
</sect2>    <!--   Kollaborationsdiagrammer -->

<sect2 id="java-analyse-design-obj-des-klas-diag">
<title>Klassediagrammer</title>

<para>
  Herefter kan skitseres klassediagrammer, hvor man fastlægger
  nedarvning (er-en-relationerne), de vigtigste variabler og
  referencerne mellem objekterne (har-relationer) og de vigtigste
  metoder.
</para>

<para>
  Dette kan eventuelt tegnes med et UML-udviklingsværktøj
  (f.eks. TogetherJ der kan hentes på
  <ulink url="http://www.togethersoft.com/">http://www.togethersoft.com</ulink>),
  der samtidig kan generere kode til programmeringsfasen.
</para>

<figure id="java-analyse-design-obj-des-klas-diag-fig1">
  <title>Java</title>
  <graphic fileref="Nordfalk2415491.&magic;" scale="60"></graphic>
</figure>

<para>
  Herunder ses, hvilke typer regler der kunne forekomme.
</para>

<figure id="java-analyse-design-obj-des-klas-diag-fig2">
  <title>Java</title>
  <graphic fileref="Nordfalk2415492.&magic;" scale="60"></graphic>
</figure>

</sect2>    <!--   Klassediagrammer -->
</sect1>    <!--   Objektorienteret design -->
</chapter>    <!--   Objektorienteret analyse og design -->

