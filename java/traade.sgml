<chapter id="java-traade">
<title>Flertrådet programmering</title>

<para>
  Indhold:
</para>

<itemizedlist mark="bullet">
  <listitem><para>Forstå tråde</para></listitem>
  <listitem><para>Eksempel på en flertrådet webserver</para></listitem>
</itemizedlist>

<para>
  Kapitlet forudsættes ikke i resten af bogen.
</para>

<para>
  Forudsætter <xref linkend="java-interface" />, Interfaces (<xref linkend="java-net" />, Netværkskommunikation
  og <xref linkend="java-applet" />, Appletter og grafik bruges i nogle eksempler).
</para>

<para>
  Når man kommer ud over den grundlæggende programmering, ønsker man tit
  at lave programmer, som udfører flere opgaver løbende. Det kan
  f.eks. være et tekstbehandlingsprogram, hvor man ønsker at gemme eller
  sende en udskrift til printeren, mens man redigerer videre, eller man
  ønsker løbende stavekontrol samtidig med, at man skriver. Skrivningen
  må ikke blive forsinket af, at programmet sideløbende forbereder en
  udskrift eller kontrollerer stavningen. Disse delprocesser (også
  kaldet tråde) har lav prioritet i forhold til at håndtere brugerens
  input og vise det på skærmen, og selvom de midlertidigt skulle gå i
  stå, skal de andre dele af programmet køre videre.
</para>

<para>
  Et flertrådet program er et program med flere tilsyneladende samtidige
  programudførelsespunkter (i virkeligheden vil CPU'en skifte meget
  hurtigt rundt mellem punkterne og udføre lidt af hver).
</para>

<sect1 id="java-traade-princip">
<title>Princip</title>

<para>
  Det er ret let at programmere flertrådet i Java. Man opretter en ny
  tråd med et objekt i konstruktøren:
</para>

<screen>
  Thread tråd;
  tråd = new Thread(obj);
</screen>

<para>
  Objektet obj skal implementere Runnable-interfacet, f.eks.:
</para>

<screen>
public class UdførbartObjekt <emphasis>implements Runnable</emphasis>
{
  <emphasis>public void run()</emphasis>  <emphasis>// kræves af Runnable</emphasis>
  {
<emphasis>    // her starter den nye tråd med at køre</emphasis>
<emphasis>    // ...</emphasis>
  }
}
</screen>

<para>
  Tråden er nu klar til at udføre run()-metoden på objektet, men den er
  ikke startet endnu. Man starter tråden ved at kalde start()-metoden på
  tråd-objektet:
</para>

<screen>
  tråd.start();
<emphasis>  // her kører den oprindelige tråd videre, mens den nye kører i run()</emphasis>
<emphasis>  // ...</emphasis>
</screen>

<para>
  Derefter vil der være to programudførelsespunkter: Et vil være i koden
  efter kaldet til start(), og den anden vil være ved begyndelsen af
  run()-metoden.
</para>

<figure float="1" id="java-traade-princip-fig">
  <title>Java</title>
  <graphic fileref="Nordfalk1815464.&magic;" scale="60"></graphic>
</figure>

<para>
  <emphasis>En tråd oprettes med et objekt, der implementerer
  Runnable-interfacet. Når start() kaldes på tråden, vil den begynde at
  udføre run() på objektet.</emphasis>
</para>

<sect2 id="java-traade-princip-eksempel">
<title>Eksempel</title>

<screen>
public class SnakkesagligPerson <emphasis>implements Runnable</emphasis>
{
  private String navn;
  private int ventetid;

  public SnakkesagligPerson(String n, int t)
  {
    navn = n;
    ventetid = t;
  }

<emphasis>  public void run()</emphasis>
  {
    for (int i=0; i&lt;5; i++)
    {
      System.out.println(navn+&quot;: bla bla bla &quot;+i);
      try {  Thread.sleep(ventetid); } catch (Exception e) {} <emphasis>// vent lidt</emphasis>
    }
  }
}
</screen>

<para>
  Objekter af typen SnakkesaligPerson kan køre i en tråd (implements
  Runnable).
</para>

<para>
  I konstruktøren angives navnet på personen og hvor lang tid, der går,
  mellem hver gang personen taler.
</para>

<para>
  Når run() udføres, skriver den personens navn + bla bla bla ud så ofte
  som angivet.
</para>

<para>
  Da Thread.sleep() kan kaste undtagelser af typen InterruptedException,
  er vi nødt til at indkapsle koden i en try-catch-blok (disse
  undtagelser forekommer aldrig i praksis).
</para>

<para>
  Vi kan nu oprette en snakkesalig person, der siger noget hvert sekund:
</para>

<screen>
    SnakkesagligPerson p = new SnakkesagligPerson(&quot;Brian&quot;,1000);
</screen>


<para>
  ... og en tråd, der er klar til at udføre p.run() og lade personen
  snakke:
</para>

<screen>
    Thread t = new Thread(p);
</screen>

<para>
  ... og til sidst startes tråden, så personen snakker:
</para>

<screen>
    t.start();
</screen>

<para>
  Her ses et samlet eksempel, der opretter 3 snakkesalige personer,
  Jacob, Troels og Henrik, og lader dem snakke i munden på hinanden (i
  hver sin tråd).
</para>

<screen>
public class BenytSnakkesagligePersoner
{
  public static void main(String arg[])
  {
    SnakkesagligPerson<emphasis> p = new SnakkesagligPerson(&quot;Jacob&quot;,150)</emphasis>;
    Thread <emphasis>t = new Thread(p)</emphasis>; <emphasis>// Ny tråd, klar til at udføre p.run()</emphasis>
    <emphasis>t.start()</emphasis>; <emphasis>// .. Nu starter personen med at snakke...</emphasis>

    p = new SnakkesagligPerson(&quot;Troels&quot;,400);
    t = new Thread(p);
    t.start();

<emphasis>    // Det kan også gøres meget kompakt:</emphasis>
<emphasis>    new Thread(new SnakkesagligPerson(&quot;Henrik&quot;,200)).start();</emphasis>
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
Jacob: bla bla bla 0
Troels: bla bla bla 0
Henrik: bla bla bla 0
Jacob: bla bla bla 1
Henrik: bla bla bla 1
Jacob: bla bla bla 2
Troels: bla bla bla 1
Henrik: bla bla bla 2
Jacob: bla bla bla 3
Henrik: bla bla bla 3
Jacob: bla bla bla 4
Troels: bla bla bla 2
Henrik: bla bla bla 4
Troels: bla bla bla 3
Troels: bla bla bla 4
</screen>

<para>
  Bemærk, at udførelsen af main(), der faktisk sker i en fjerde tråd,
  afsluttes med det samme, men at programmet kører videre, indtil de tre
  tråde er færdige med deres opgaver; Java fortsætter med at udføre et
  program, så længe der er tråde, der stadig er aktive, dvs.  ikke har
  returneret fra run().
</para>

</sect2>    <!--   Eksempel -->
</sect1>    <!--   Princip -->

<sect1 id="java-traade-ekstra-eksempler">
<title>Ekstra eksempler</title>

<sect2 id="java-traade-ekstra-eksempler-webserver">
<title>En flertrådet webserver</title>

<para>
  Herunder har vi lavet en flertrådet webserver (sammenlign med
  webserveren i <xref linkend="java-net" />). For at gøre det nemmere at se, hvad der
  foregår, lader vi hver anmodning vente i 10 sekunder, før den
  afslutter.
</para>

<screen>
import java.io.*;
import java.net.*;
import java.util.*;

public class Anmodning <emphasis>implements Runnable</emphasis>
{
<emphasis>  private Socket forbindelse;</emphasis>

  Anmodning(Socket forbindelse)
  {
    this.forbindelse = forbindelse;
  }

<emphasis>  public void run()</emphasis>
  {
    try {
      PrintWriter ud = new PrintWriter(<emphasis>forbindelse.getOutputStream()</emphasis>);
      BufferedReader ind = new BufferedReader(
        new InputStreamReader(<emphasis>forbindelse.getInputStream()</emphasis>));

      String anmodning = ind.readLine();
      System.out.println(&quot;start &quot;+new Date()+&quot; &quot;+anmodning);

      ud.println(&quot;HTTP/0.9 200 OK&quot;);
      ud.println();
      ud.println(&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Svar&lt;/title&gt;&lt;/head&gt;&quot;);
      ud.println(&quot;&lt;body&gt;&lt;h1&gt;Svar&lt;/h1&gt;&quot;);
      ud.println(&quot;Tænker over &quot;+anmodning+&quot;&lt;br&gt;&quot;);
      for (int i=0; i&lt;100; i++) 
      {
        ud.print(&quot;.&lt;br&gt;&quot;);
        ud.flush();
        Thread.sleep(100);
      }
      ud.println(&quot;Nu har jeg tænkt færdig!&lt;/body&gt;&lt;/html&gt;&quot;);
      ud.flush();
      forbindelse.close();
      System.out.println(&quot;slut  &quot;+new Date()+&quot; &quot;+anmodning);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
</screen>

<para>
  Når der kommer en anmodning, oprettes et Anmodning-objekt, der snakker
  med klienten og behandler forespørgslen, og en ny tråd knyttes til
  anmodningen.
</para>

<screen>
import java.io.*;
import java.net.*;
public class FlertraadetHjemmesidevaert
{
  public static void main(String arg[])
  {
    try {
      ServerSocket <emphasis>værtssokkel = new ServerSocket(8001)</emphasis>;

      while (true)
      {
        Socket <emphasis>forbindelse = værtssokkel.accept()</emphasis>;
        Anmodning <emphasis>a = new Anmodning(forbindelse)</emphasis>;
        <emphasis>new Thread(a).start()</emphasis>;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
</screen>

<para>Resultatet bliver</para>

<screen>
<emphasis>start</emphasis> Tue Nov 28 15:37:31 GMT+01:00 2000 GET /xxx.html HTTP/1.0
<emphasis>start</emphasis> Tue Nov 28 15:37:38 GMT+01:00 2000 GET /yyy.html HTTP/1.0
<emphasis>start</emphasis> Tue Nov 28 15:37:42 GMT+01:00 2000 GET /zzz.html HTTP/1.0
<emphasis>slut</emphasis>  Tue Nov 28 15:37:42 GMT+01:00 2000 GET /xxx.html HTTP/1.0
<emphasis>slut</emphasis>  Tue Nov 28 15:37:49 GMT+01:00 2000 GET /yyy.html HTTP/1.0
<emphasis>start</emphasis> Tue Nov 28 15:37:50 GMT+01:00 2000 GET /qqq.html HTTP/1.0
<emphasis>slut</emphasis>  Tue Nov 28 15:37:53 GMT+01:00 2000 GET /zzz.html HTTP/1.0
<emphasis>slut</emphasis>  Tue Nov 28 15:38:01 GMT+01:00 2000 GET /qqq.html HTTP/1.0
</screen>

<para>
  Programmet er afprøvet ved i Netscape at åbne adressen
  http://localhost:8001/xxx.html hhv. yyy zzz og qqq.html. Man ser, at
  anmodningerne xxx, yyy og zzz bliver behandlet samtidigt.
</para>
</sect2>    <!--   En flertrådet webserver -->

<sect2 id="java-traade-ekstra-eksempler-applet">
<title>En flertrådet applet med bolde</title>

<para>
  Lad os lave en applet med nogle bolde, der hopper rundt. Hver bold
  kører i sin egen tråd. Når en bold oprettes, får den i konstruktøren
  overført start-koordinater og et Graphics-objekt, som den husker. Den
  opretter og starter en tråd, som kører boldens run()-metode.
</para>

<screen>
import java.awt.*;

public class Bold implements Runnable
{
  double x, y, fartx, farty;
  Graphics g;

  public Bold(Graphics g1, int x1, int y1)
  {
    g = g1;
    x = x1;
    y = y1;
    fartx = Math.random();
    farty = Math.random();
<emphasis>    Thread t = new Thread(this);</emphasis>
<emphasis>    t.start();</emphasis>
  }

  public void run()
  {
    for (int tid=0; tid&lt;5000; tid++)
    {
<emphasis>      // Tegn bolden over med hvid på den gamle position</emphasis>
      g.setColor(Color.white);
      g.drawOval((int) x, (int) y, 50, 50);

<emphasis>      // Opdater positionen med farten</emphasis>
      x = x + fartx;
      y = y + farty;

<emphasis>      // Tegn bolden med sort på den nye position</emphasis>
      g.setColor(Color.black);
      g.drawOval((int) x, (int) y, 50, 50);

<emphasis>      // ændr boldens fart lidt nedad</emphasis>
      farty = farty + 0.1;

      <emphasis>// Hvis bolden er uden for det tilladte område skal den</emphasis>
<emphasis>      // rettes hen mod området</emphasis>
      if (x &lt; 0) fartx = Math.abs(fartx);
      if (x &gt; 400) fartx = -Math.abs(fartx);
      if (y &lt; 0) farty = Math.abs(farty);
      if (y &gt; 100) farty = -Math.abs(farty);

<emphasis>      // Vent lidt</emphasis>
      try { Thread.sleep(10); } catch (Exception e) {};
    }
  }
}
</screen>

<para>
  Lad os nu lave en applet med nogle bolde:
</para>

<screen>
import java.applet.*;
import java.awt.*;

public class FlertraadetApplet extends Applet
{
  public void init()
  {
    setBackground(Color.white);
    Graphics g = getGraphics();
    new Bold(g,  0, 0);
    new Bold(g, 50,10);
    new Bold(g,100,50);
    new Bold(g,150,90);
  }
}
</screen>

<figure id="java-traade-ekstra-eksempler-applet-fig">
  <title>Java</title>
  <graphic fileref="Nordfalk1815465.&magic;" scale="60"></graphic>
</figure>

</sect2>    <!--   En flertrådet applet med bolde -->
</sect1>    <!--   Ekstra eksempler -->

<sect1 id="java-traade-opgaver">
<title>Opgaver</title>

<orderedlist>
  <listitem><para>Udvid FlertraadetApplet med andre figurer end bolde.</para></listitem>
  <listitem><para>Skriv et program, der udregner primtal. Samtidig med, at programmet regner, skal det kunne kommunikere med brugeren og give ham mulighed for at afslutte programmet og udskrive de primtal, der er fundet indtil nu.</para></listitem>
</orderedlist>

</sect1>    <!--   Opgaver -->
</chapter>    <!--   Flertrådet programmering -->

