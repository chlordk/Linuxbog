<chapter id="java-io">
<title>Datastrømme og filhåndtering</title>

<para>Indhold:</para>

<itemizedlist mark="bullet">
  <listitem><para>At forstå datastrømme</para></listitem>
  <listitem><para>At læse og skrive filer</para></listitem>
  <listitem><para>At analysere tekstfiler og udtrække data</para></listitem>
  <listitem><para>Overblikket over og sammenhængen mellem alle datastrøm-klasserne</para></listitem>
</itemizedlist>

<para>
  Kapitlet forudsættes af <xref linkend="java-net" />, Netværkskommunikation
  og <xref linkend="java-serialisering" />, Serialisering.
</para>

<para>
  Forudsætter <xref linkend="java-exception" />, Undtagelser.
</para>

<para>
  En fil er et arkiv på et lagermedium, hvori der er gemt
  data. På lagermediet gemmes en række 0'er og 1-taller
  (bit) i grupper a 8 bit, svarende til en byte (et tal mellem 0 og 255).
</para>

<para>
  Data kan være gemt <emphasis>binært</emphasis>, sådan at de
  kun kan læses af et program eller styresystemet. Det gælder
  f.eks. en .exe-fil eller et dokument gemt i et proprietært
  binært format som f.eks. Word. De kan også være
  gemt som <emphasis>tekst</emphasis> uden formatering. Det gælder f.eks.
  filer, der ender på .txt, .html og .java. Oplysningerne i
  tekstfiler kan læses med en teksteditor.
  Det er op til programmet, der læser/skriver i filen, at afgøre,
  om indholdet er tekst eller binært.
</para>

<para>
  I Java behandles filer som datastrømme. En datastrøm
  er et objekt, som man enten henter data fra (læser fra en
  datakilde, f.eks. en fil) eller
  skriver data til (et datamål).
</para>

<para>
  Denne arbejdsmåde gør, at forskellige datakilder og
  -mål kan behandles ensartet, og at det er let at udskifte
  datakilden eller -målet med noget andet end en fil, f.eks. en
  forbindelse til netværket.
</para>

<sect1 id="java-io-skrive-tekstfiler">
<title>Skrive til en tekstfil</title>

<para>
  Klassen FileWriter bruges til at skrive en fil med tekstdata. I
  konstruktøren angiver man filnavnet:
</para>

<screen>
    FileWriter fil = new FileWriter(&quot;tekstfil.txt&quot;);
</screen>

<para>
  FileWriter-objektet er en datastrøm, hvis mål er
  filen. Nu kan man skrive tekstdata til filen med:
</para>

<screen>
    fil.write(&quot;Her kommer et tal:\n&quot;);
    fil.write(322+&quot;\n&quot;);
</screen>

<para>
  FileWriter-objektets write()-metode er lidt besværlig at
  arbejde med, da den ikke understøtter linjeskift (som så
  i stedet må laves med &quot;\n&quot;).
</para>

<figure id="java-io-skrive-tekstfil-fig">
  <title>Java</title>
  <graphic fileref="Nordfalk1615453.&magic;" scale="60"></graphic>
</figure>

<para>
  Det er mere bekvemt at lægge objektet ind i en PrintWriter. Et
  PrintWriter-objekt har print() og println()-metoder, som vi er vant
  til, og man skal skrive til den præcis, som når man
  skriver til System.out:
</para>

<screen>
    PrintWriter ud = new PrintWriter(fil);
    ud.println(&quot;Her kommer et tal:&quot;);
    ud.println(322);
</screen>

<para>
  Når vi skriver til PrintWriter-objektet, sender det teksten
  videre til FileWriter-objektet, der skriver teksten i filen.
</para>

<para>
  Her er et samlet eksempel, der skriver nogle fiktive personers
  navn, køn og alder til en fil:
</para>

<screen>
import java.io.*;
public class SkrivTekstfil 
{
  public static void main(String[] args) throws IOException
  {
<emphasis>    FileWriter fil = new FileWriter(&quot;skrevet fil.txt&quot;);</emphasis>
<emphasis>    PrintWriter ud = new PrintWriter(fil);</emphasis>
    for (int i=0; i&lt;5; i++)
    {
      String navn = &quot;person&quot;+i;
      String køn;
      if (Math.random()&gt;0.5) køn = &quot;m&quot;; else køn = &quot;k&quot;;
      int alder = 10+(int) (Math.random()*60);

<emphasis>      ud.println(navn+&quot; &quot;+køn+&quot; &quot;+alder);</emphasis>
    }
<emphasis>    ud.close()</emphasis>; <emphasis>// luk så alle data skrives til disken</emphasis>
    System.out.println(&quot;Filen er gemt.&quot;);
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
Filen er gemt.
</screen>

<para>
  Eventuelle IO-undtagelser (f.eks. ikke mere plads på disken)
  tager vi os ikke af, men sender dem videre til styresystemet.
</para>

<para>
  Det er vigtigt at lukke filen, når man er færdig med
  at skrive. Ellers kan de sidste data gå tabt! Det gør
  man ved at lukke datastrømmen, man skrev til:
</para>

<screen>
    ud.close();
</screen>

<para>
  Efter at programmet har kørt, findes filen &quot;skrevet
  fil.txt&quot; på disken, med indhold:
</para>

<screen>
person0 m 34
person1 m 26
person2 m 24
person3 k 51
person4 k 16
</screen>
</sect1> 

<sect1 id="java-io-laese-tekstfil">
<title>Læse fra en tekstfil</title>

<para>
  Lad os læse filen ovenfor og skrive den ud til skærmen.
  Til det formål bruger vi et FileReader-objekt som
  datakilde. Igen pakker vi det ind i et andet objekt, denne gang af
  klassen BufferedReader. BufferedReader gør det mere
  bekvemt, da indlæsning kan ske linje for linje med metoden
  readLine(). Når der ikke er flere data, returnerer readLine()
  null.
</para>

<figure id="java-io-laese-tekstfil-fig">
  <title>Java</title>
  <graphic fileref="Nordfalk1615454.&magic;" scale="60"></graphic>
</figure>

<screen>
import java.io.*;
import java.util.*;

public class LaesTekstfil
{
  public static void main(String[] args) throws IOException
  {
<emphasis>    FileReader fil = new FileReader(&quot;skrevet fil.txt&quot;);</emphasis>
<emphasis>    BufferedReader ind = new BufferedReader(fil);</emphasis>

    String linje = ind.readLine();
    while (linje != null)
    {
      System.out.println(&quot;Læst: &quot;+linje);
      linje = <emphasis>ind.readLine()</emphasis>;
    }
  }
}
</screen>

<screen>
Læst: person0 m 34
Læst: person1 m 26
Læst: person2 m 24
Læst: person3 k 51
Læst: person4 k 16
</screen>
</sect1> 

<sect1 id="java-io-tastatur-laese">
<title>Indlæsning fra tastatur</title>

<para>
  For et tekstbaseret (ikke-grafisk) program skal uddata som bekendt
  skrives til System.out.
</para>

<para>
  Det modsvarende objekt til at læse fra tastaturet,
  System.in, er en byte-baseret (binær) datastrøm. Det er
  nemmest at pakke den ind i en InputStreamReader, der konverterer til
  tegnbaseret (tekst)indlæsning
</para>

<screen>
  InputStreamReader tegnlæser = new InputStreamReader(System.in);
</screen>

<para>
  ... og derpå gøre den linjeorienteret ved at pakke
  den yderligere ind i et BufferedReader-objekt:
</para>

<screen>
  BufferedReader ind = new BufferedReader( tegnlæser );
</screen>

<para>
  Derefter kan man læse inddata fra tastaturet linje for
  linje, ligesom vi gør med filer:
</para>

<screen>
  String linje = ind.readline();
</screen>
</sect1> 

<sect1 id="java-io-txt-analyse">
<title>Analysering af tekstdata</title>

<para>
  Ofte er det ikke nok bare at indlæse data, de skal også
  kunne behandles bagefter.
</para>

<para>
  Det kunne være sjovt at udregne aldersgennemsnit i
  LaesTekstfil.java. Det kræver, at vi først opdeler data
  for at finde kolonnen med aldrene og derefter konverterer dem til
  tal, der kan regnes på.
</para>

<sect2 id="java-io-txt-analyse-tokenizer">
<title>Opdele inddata (StringTokenizer)</title>

<para>
  Har man brug for at dele strenge op i mindre dele, kan det gøres
  med StringTokenizer-klassen, der deler en streng op i bidder (eng.:
  tokens) efter bestemte skilletegn. Normalt opdeles efter blanktegn,
  og strengen bliver derfor delt op i ord.
</para>

<para>
  En StringTokenizer oprettes med den streng, der skal opdeles:
</para>

<screen>
  StringTokenizer strengbidder = new StringTokenizer(&quot;Hej kære venner!&quot;);
</screen>

<para>
  Herefter kan man med metoden nextToken() få bidderne frem en
  efter en.
</para>

<para>
  Metoden hasMoreTokens() er sand, hvis der er flere bidder, og
  falsk, når vi er nået forbi sidste bid:
</para>

<screen>
  while (strengbidder.hasMoreTokens())
  {
    String bid = strengbidder.nextToken();
    System.out.println(&quot;bid: &quot;+bid);
  }
  ...
</screen>

<para>Resultatet bliver:</para>

<screen>
  bid: Hej
  bid: kære
  bid: venner!
</screen>

<para>
  &Oslash;nsker man at opdele efter andet end mellemrum, kan man
  angive det i StringTokenizer's konstruktør. Herunder opdeler
  vi en formel efter både &quot;+&quot; og &quot;-&quot;. Den
  sidste parameter angiver, at vi godt vil have skilletegnene, dvs. +
  og -, ud som selvstændige bidder (i stedet for at de
  smides væk som ligegyldige):
</para>

<screen>
import java.util.*;
public class LaesFormel
{
  public static void main(String[] args)
  {
    StringTokenizer bidder = new StringTokenizer(&quot;2*x*x +8*x -5&quot;, &quot;+-&quot;, true);
    while (bidder.hasMoreTokens())
    {
      String bid = bidder.nextToken();
      bid = bid.trim();           <emphasis>// fjern mellemrum omkring hver bid</emphasis>

      if (bid.equals(&quot;+&quot;))      System.out.print(&quot; plus &quot;);
      else if (bid.equals(&quot;-&quot;)) System.out.print(&quot; minus &quot;);
      else                      System.out.print(&quot;'&quot; + bid + &quot;'&quot;);
    }
    System.out.println();
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
'2*x*x' plus '8*x' minus '5'
</screen>

<para>
  Bemærk, at vi kalder trim() på strengene for at fjerne
  eventuelle blanktegn omkring hver bid.
</para>
</sect2> 

<sect2 id="java-io-txt-analyse-tal-konvertering">
<title>Konvertere til tal</title>

<para>
  For at omsætte en streng til et tal (int eller double) skal
  strengen analyseres (eng.: parse), dvs. undersøges for, om den
  indeholder et tal, og tallet, som kan være repræsenteret
  på mange måder, skal findes frem. Det har Integer- og
  Double-klasserne funktioner til,
  nemlig hhv. parseInt() og parseDouble().
</para>

<para>
  De tager en streng og returnerer den ønskede type:
</para>

<screen>
  int i = Integer.parseInt(&quot;542&quot;);
  double d = Double.parseDouble(&quot;3.14&quot;);
</screen>

<para>
  Eksponentiel notation (hvor 9.8E3 betyder 9800) forstås
  også, og der kan også bruges andre talsystemer end
  titalsystemet. F.eks. giver Integer.parseInt(&quot;00010011&quot;,2)
  tallet 19 (19 svarer til 00010011 i det binære talsystem), og
  Integer.parseInt(&quot;1F&quot;,16) giver 31 (1F i det hexadecimale
  talsystem):
</para>

<screen>
  d = Double.parseDouble(&quot;9.8E3&quot;);        <emphasis>// d = 9800</emphasis>
  i = Integer.parseInt(&quot;00010011&quot;,2);      <emphasis>// i = 19</emphasis>
  i = Integer.parseInt(&quot;1F&quot;,16);          <emphasis>// i = 31</emphasis>
</screen>
</sect2> 

<sect2 id="java-io-txt-analyse-formatering">
<title>DecimalFormat og DateFormat-klasserne</title>

<para>
  Klasserne DecimalFormat og DateFormat giver ikke blot mange
  muligheder for at formatere tal/datoer som strenge, men kan også
  analysere strenge for forskellige tal- og tidsformater og trække
  data ud af strenge. De er nærmere beskrevet i slutningen af
  <xref linkend="java-obj" />.
</para>
</sect2> 

<sect2 id="java-io-txt-analyse-statistik">
<title>Samlet eksempel: Statistik</title>

<para>
  Nu kan vi skrive et statistikprogram. Vi tæller antallet af
  personer (linjer i filen) og summen af aldrene. Linjerne
  analyseres og lægges ind i variablerne navn, køn og
  alder.
</para>

<screen>
import java.io.*;
import java.util.*;
public class LaesTekstfilOgLavStatistik 
{
  public static void main(String[] args)
  {
    int antalPersoner = 0;
    int sumAlder = 0;

    try 
    {
      BufferedReader ind =
        new BufferedReader(new FileReader(&quot;skrevet fil.txt&quot;));

      String linje = ind.readLine();
      while (linje != null)
      {
        try 
        {
          StringTokenizer bidder = new StringTokenizer(linje);

          String navn = bidder.nextToken();
          String køn = bidder.nextToken();
          int alder = Integer.parseInt(bidder.nextToken());

          System.out.println(navn+&quot; er &quot;+alder+&quot; år.&quot;);
          antalPersoner = antalPersoner + 1;
          sumAlder = sumAlder + alder;
        } catch (Exception u) 
        {
          System.out.println(&quot;Fejl. Linjen springes over.&quot;);
          u.printStackTrace();
        }
        linje = ind.readLine();
      }

      System.out.println(&quot;Aldersgennemsnittet er: &quot;+sumAlder/antalPersoner);
    } catch (FileNotFoundException u) 
    {
      System.out.println(&quot;Filen kunne ikke findes.&quot;);
    } catch (Exception u) 
    {
      System.out.println(&quot;Fejl ved læsning af fil.&quot;);
      u.printStackTrace();
    }
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
person0 er 34 år.
person1 er 26 år.
person2 er 24 år.
person3 er 51 år.
person4 er 16 år.
Aldersgennemsnittet er: 30
</screen>

<para>
  Undervejs kan der opstå forskellige undtagelser. Hvis filen
  ikke eksisterer udskrives &quot;Filen kunne ikke findes&quot;, og
  programmet afslutter. En anden mulig fejl er, at filen er tom. Så
  vil der opstå en aritmetisk undtagelse, når vi dividerer
  med antalPersoner, og &quot;Fejl ved læsning af fil&quot;
  udskrives.
</para>

<para>
  Under analyseringen af linjen kan der også opstå flere
  forskellige slags undtagelser: Konverteringen til heltal kan gå
  galt, og der kan være for få bidder, så nextToken()
  bliver kaldt efter sidste bid.
</para>

<para>
  For eksempel giver linjen &quot;person2 m24&quot; (der mangler et
  mellemrum mellem m og 24)
</para>

<screen>
Fejl. Linjen springes over.
java.util.NoSuchElementException
        at java.util.StringTokenizer.nextToken(StringTokenizer.java:241)
        at LaesTekstfil.main(LaesTekstfil.java:25)
</screen>


<para>
  Hvis disse fejl opstår, fortsætter programmet efter
  catch-blokken med at læse næste linje af inddata.
</para>

<para>
  Da sumAlder og antalPersoner ændres sidst i
  try-catch-blokken, vil de kun blive opdateret hvis hele linjen
  er i orden, og statistikken udregnes derfor kun på grundlag af
  de gyldige linjer.
</para>
</sect2>
</sect1>

<sect1 id="java-io-txt-analyse-appendix">
<title>Appendiks</title>

<para>
  I pakken java.io findes omkring 40 klasser, der kan læse
  eller skrive binære eller tegnbaserede data fra et væld
  af datakilder eller -mål og på et væld af
  forskellige måder. Der henvises til javadokumentationen
  for en nærmere beskrivelse af de enkelte klasser.
</para>

<para>
  Næsten alle metoderne i klasserne kan kaste en
  IOException-undtagelse, som skal fanges i en try-catch-blok (eller
  kastes videre som beskrevet i kapitlet om undtagelser).
</para>

<sect2 id="java-io-txt-analyse-navngivning">
<title>Navngivning</title>

<para>
  Datastrømmene kan ordnes i fire grupper, og den konsistente
  navngivning gør dem lettere at overskue:
</para>

<para>
  <emphasis>InputStream</emphasis>-objekter læser binære data.  
  <emphasis>OutputStream</emphasis>-objekter skriver binære data.
</para>

<para>
  <emphasis>Reader</emphasis>-objekter læser
  tekstdata. <emphasis>Writer</emphasis>-objekter skriver tekstdata.
</para>
</sect2>

<sect2 id="java-io-txt-analyze-binaere-data">
<title>Binære data ( -OutputStream og -InputStream)</title>

<para>
  Byte-baserede data som f.eks. billeder, lyde eller andre binære
  programdata håndteres af klasser, der arver fra InputStream
  eller OutputStream.
</para>

<figure id="java-io-txt-analyze-binaere-data-fig">
  <title>Java</title>
  <graphic fileref="Nordfalk1615456.&magic;" scale="60"></graphic>
</figure>

<para>
  Af klassediagrammet ses, at metoderne i InputStream og
  OutputStream læser og skriver byte-data: write(byte[]) på
  OutputStream skriver et array (en række) af byte. Arvingerne
  har lignende metoder (disse er ikke vist).
</para>

<para>
  InputStream og OutputStream er tegnet i kursiv. Det er fordi de er
  <emphasis>abstrakte</emphasis> klasser, og det betyder, at man ikke kan oprette
  InputStream og OutputStream-objekter direkte med f.eks. new
  InputStream(). I stedet skal man bruge en af nedarvingerne. Abstrakte
  klasser og metoder bliver behandlet i <xref linkend="java-avancerede-klasser" />, Avancerede klasser.
</para>
</sect2>    <!--   Binære data ( -OutputStream og -InputStream) -->

<sect2 id="java-io-txt-analyze-reader-writers">
<title>Tekstdata ( -Writer og -Reader)</title>

<para>
  Tegn-baserede data bruges til tekstfiler, til at læse
  brugerinput og til meget netværkskommunikation. Dette
  håndteres af klasserne, der nedarver fra Reader og Writer.
</para>

<figure id="java-io-txt-analyse-reader-writers-fig">
  <title>Java</title>
  <graphic fileref="Nordfalk1615458.&magic;" scale="60"></graphic>
</figure>

<para>
  Af klassediagrammet ses, at alle metoderne i Reader og Writer
  læser og skriver tegndata (datatype char). Tegn
  repræsenteres i Java som 16-bit unicode-værdier, og man
  kan derfor arbejde med ikke blot det vesteuropæiske
  tegnsæt, men også det østeuropæiske,
  kinesiske, russiske, ...
</para>
</sect2>   

<sect2 id="java-io-txt-analyse-read-write">
<title>Fillæsning og -skrivning (File- )</title>

<para>
  Klasserne til filhåndtering er FileInputStream, FileReader,
  FileOutputStream og FileWriter.
</para>
</sect2>    <!--   Fillæsning og -skrivning (File- ) -->

<sect2 id="java-io-txt-analyse-strenge">
<title>Strenge (String- )</title>

<para>
  Med StringReader kan man læse data fra en streng, som om det
  kom fra en datastrøm. Det kan være praktisk til f.eks.
  at simulere indtastninger fra tastaturet under test (sml. 
<xref linkend="java-io-tastatur-laese" />,
  Indlæsning fra tastatur).
</para>

<screen>
  StringReader tegnlæser = new StringReader(&quot;Jacob\n4\n5.14\n&quot;);
  BufferedReader ind = new BufferedReader( tegnlæser );
</screen>

<para>
  StringWriter er en datastrøm, der gemmer uddata i et
  StringBuffer-objekt, der kan konverteres til en streng.
</para>
</sect2>   

<sect2 id="java-io-txt-analyse-arrays">
<title>Arrays (ByteArray- og CharArray- )</title>

<para>
  Et array er en liste eller række af noget (se <xref linkend="java-arrays" /> om
  arrays). Ligesom man kan behandle en streng som en datastrøm,
  kan man også arbejde med et array som datakilde eller
  -mål. Klasserne CharArrayReader og CharArrayWriter hhv.
  læser og skriver fra et array af tegn, mens
  ByteArrayInputStream og ByteArrayOutputStream læser og
  skriver binært fra et array af byte.
</para>
</sect2>   

<sect2 id="java-io-txt-analyse-read-write-objects">
<title>Læse/skrive objekter (Object- )</title>

<para>
  Det er muligt at skrive hele objekter ned i en datastrøm.
  Objektet bliver da &quot;serialiseret&quot;, dvs. dets data gemmes i
  datastrømmen. Refererer objektet til andre objekter, bliver
  disse også serialiseret og så fremdeles. Dette er nyttigt
  til at gemme en hel graf af objekter på disken for senere at
  hente den frem igen. Emnet vil blive behandlet mere i <xref linkend="java-serialisering" />Serialisering.
</para>
</sect2>   

<sect2 id="java-io-txt-analyse-dataopsamling">
<title>Dataopsamling (Buffered- )</title>

<para>
  Klasserne BufferedInputStream, BufferedReader,
  BufferedOutputStream og BufferedWriter sørger for en
  buffer (et opsamlingsområde) til datastrømmen. Det
  sikrer mere effektiv indlæsning, fordi der bliver læst/skrevet
  større blokke data ad gangen.
</para>

<para>
  BufferedReader sørger også for, at man kan læse
  en hel linje af datastrømmen ad gangen.
</para>
</sect2>   

<sect2 id="java-io-txt-analyse-binaer-til-tegn">
<title>Gå fra binære til tegnbaserede datastrømme</title>

<para>
  Nogen gange står man med en binær datastrøm og
  ønsker at arbejde med den, som om den var tekstbaseret. Der er
  to klasser, der konverterer til tegnbaseret indlæsning og
  -udlæsning:
</para>

<para>
  <emphasis>InputStreamReader</emphasis> er et Reader-objekt, der læser fra
  en InputStream (byte til tegn).
</para>

<para>
  <emphasis>OutputStreamWriter</emphasis> er et Writer-objekt, der skriver til en
  InputStream (tegn til byte).
</para>
</sect2>   

<sect2 id="java-io-txt-analyze-filtre">
<title>Filtreringsklasser til konvertering og databehandling</title>

<para>
  Klasserne, der arver fra FilterOutputStream og FilterInputStream,
  sørger alle for en eller anden form for behandling og
  præsentation, der letter programmørens arbejde:
</para>

<para>
  <emphasis>LineNumber</emphasis>-klasser tæller antallet af linjeskift i
  datastrømmen, men lader den ellers være uændret.
</para>

<para>
  <emphasis>Pushback</emphasis>-klasser giver mulighed for at skubbe data tilbage
  i datastrømmen (nyttigt hvis man af en eller anden grund kan
  &quot;komme til&quot; at læse for langt).
</para>

<para>
  <emphasis>SequenceInputStream</emphasis> tager to eller flere datakilder og
  læser dem i forlængelse af hinanden.
</para>

<para>
  <emphasis>Piped</emphasis>-klasserne letter datakommunikationen mellem to tråde
  (samtidige programudførelsespunkter i et program) ved at
  sætte data &quot;i kø&quot; sådan, at en tråd
  kan læse fra datastrømmen og en anden skrive.
</para>

<para>
  <emphasis>Checked</emphasis>-klasserne (i pakken java.util.zip) udregner en
  tjeksum på data. Det kan være nyttigt til at undersøge,
  om nogen eller noget har ændret data (f.eks. en cracker eller
  en dårlig diskette). Man skal angive et tjeksum-objekt, f.eks.
  Adler32 eller CRC32.
</para>

<para>
  <emphasis>Zip</emphasis>-klasserne (i java.util.zip) læser og skriver
  ZIP-filer (lavet af f.eks. WinZip). De er lidt indviklede at bruge,
  da de er indrettet til at håndtere pakning af flere filer.
</para>

<para>
  <emphasis>GZIP</emphasis>-klasserne (i java.util.zip) komprimerer og
  dekomprimerer data med Lempel-Ziv-kompression, kendt fra filer, der
  ender på .gz på UNIX-systemer (især Linux). Er
  nemmere at bruge end Zip-klasserne, hvis man kun ønsker
  at pakke &eacute;n fil.
</para>

<para>
  Filtreringsklasser skydes ind som ekstra &quot;indpakning&quot;
  mellem de andre datastrømme. F.eks. kan
</para>

<screen>
PrintWriter ud= new PrintWriter(new FileOutputStream(&quot;fil&quot;));
</screen>

<para>
  ændres til også at komprimere uddata, simpelthen ved
  at skyde et GZIPOutputStream-objekt ind:
</para>

<screen>
PrintWriter ud=new PrintWriter(GZIPOutputStream(new(FileOutputStream(&quot;fil.gz&quot;));
</screen>
</sect2>   
</sect1>   

<sect1 id="java-io-ekstra-eksempler">
<title>Ekstra eksempler</title>

<para>
  Herunder læser vi en fil og udregner filens tjeksum og
  antallet af linjer i filen.
</para>

<screen>
import java.io.*;
import java.util.zip.*;

public class UndersoegFil
{
  public static void main(String[] args) throws IOException
  {
    FileInputStream <emphasis>fil = new FileInputStream(&quot;skrevet fil.txt&quot;)</emphasis>;
    BufferedInputStream <emphasis>bstrøm = new BufferedInputStream(fil)</emphasis>;
    CRC32 tjeksum = new CRC32();
    CheckedInputStream <emphasis>chkstrøm = new CheckedInputStream(bstrøm,tjeksum)</emphasis>;
    InputStreamReader <emphasis>txtstrøm  = new InputStreamReader(chkstrøm)</emphasis>;
    LineNumberReader <emphasis>ind        = new LineNumberReader(txtstrøm)</emphasis>;

    String linje;
    while ((linje=<emphasis>ind.readLine()</emphasis>)!= null) System.out.println(&quot;Læst: &quot;+linje);

    System.out.println(&quot;Antal linjer: &quot;  +<emphasis>ind.getLineNumber()</emphasis>);
    System.out.println(&quot;Checksum (CRC):&quot; +<emphasis>tjeksum.getValue()</emphasis>);
  }
}
</screen>

<para>Resultatet bliver</para>

<screen>
Læst: person0 k 43
Læst: person1 k 10
Læst: person2 k 16
Læst: person3 k 11
Læst: person4 k 21
Antal linjer: 5
Checksum (CRC):3543848051
</screen>

<para>
  Læg mærke til, hvordan vi hægter
  datastrøm-objekterne sammen i en kæde ved hele tiden
  at bruge det forrige objekt i som parameter til konstruktørerne:
  Filindlæsning, buffering, tjeksum, gå fra binær
  til tekstbaseret indlæsning (InputStreamReader) og
  linjetælling.
</para>

<para>
  While-løkken er skrevet meget kompakt med en tildeling
  (linje=ind.readLine()) og derefter en sammenligning, om værdien
  af tildelingen var null ( (..) != null).
</para>
</sect1>   

<sect1 id="java-io-opgaver">
<title>Opgaver</title>

<para>
  Prøv eksemplerne fra kapitlet og:
</para>

<orderedlist>
  <listitem><para>Udvid LaesTekstfilOgLavStatistik.java sådan, at linjer, der starter med &quot;#&quot; er kommentarer, som ignoreres, og afprøv om programmet virker.</para></listitem>
  <listitem><para>Skriv et program, Grep.java, der læser en fil og udskriver alle linjer, der indeholder en bestemt delstreng (vink: Ret LaesTekstfil.java - en linje undersøges for en delstreng med substring(...))</para></listitem>
  <listitem><para>Skriv et program, Diff.java, der sammenligner to tekstfiler linje for linje og udskriver de linjer, der er forskellige.</para></listitem>
  <listitem><para>Ret SkrivTekstfil.java til SkrivKomprimeretTekstfil.java, der gemmer data komprimeret.</para></listitem>
  <listitem><para>Lav den tilsvarende LaesKomprimeretTekstfilOgLavStatistik.java.</para></listitem>
  <listitem>
    <para>
      Lav et program, der læser fra en tekstfil, skyld.txt, og udskriver summen af tallene i hver linje med navnet foranstillet (f.eks. Anne:  450). Filen kunne f.eks. indeholde</para>
      <screen>Anne 300 150Peter 18 300 900 -950Lis 1000 13.5</screen>
  </listitem>
</orderedlist>

</sect1>
</chapter> 

