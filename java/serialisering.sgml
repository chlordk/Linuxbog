<chapter id="java-serialisering">
<title>Serialisering af objekter</title>

<para>
  Kapitlet forudsættes af <xref linkend="java-rmi" />, RMI.
</para>

<para>
  Forudsætter <xref linkend="java-io" />, Datastrømme og filhåndtering.
</para>

<para>
  Når et program afslutter, kan det være, at man ønsker at gemme data
  til næste gang, programmet starter.
</para>

<para>
  Man kan selvfølgelig skrive programkode, der gemmer og indlæser alle
  variablerne i de objekter, der skal huskes, men der findes en nemmere
  måde.
</para>

<para>
  Java har en mekanisme, kaldet <emphasis>serialisering</emphasis>, der
  består i, at objekter kan omdannes til en byte-sekvens (med
  datastrømmen ObjectOutputStream), der f.eks.  kan skrives til en fil
  <footnote><para>Eller netværket for den sags skyld.</para></footnote>.
  Denne bytesekvens kan senere, når man har brug for objekterne igen,
  deserialiseres (gendannes i hukommelsen med datastrømmen
  ObjectInputStream). Dette kunne f.eks. ske, når programmet starter
  næste gang.
</para>

<sect1 id="java-serialisering-gemme-hente-objekter">
<title>Hente og gemme objekter</title>

<para>
  Her er en klasse med to klassemetoder, der henter og gemmer objekter i
  en fil:
</para>

<screen>
import java.io.*;
public class Serialisering
{
  public static void <emphasis>gem(Object obj, String filnavn)</emphasis> throws IOException
  {
    FileOutputStream <emphasis>datastrøm = new FileOutputStream(filnavn)</emphasis>;
    ObjectOutputStream <emphasis>p = new ObjectOutputStream(datastrøm)</emphasis>;
    <emphasis>p.writeObject(obj)</emphasis>;
    p.close();
  }

  public static Object hent(String filnavn) throws Exception
  {
    FileInputStream datastrøm = new FileInputStream(filnavn);
    ObjectInputStream p = new ObjectInputStream(datastrøm);
    Object obj = p.readObject();
    p.close();
    return obj;
  }
}
</screen>

<para>
  Du kan benytte klassen fra dine egne programmer.
</para>

<para>
  Her er et program, der læser en vektor fra filen <footnote><para>Man
  bruger ofte filendelsen .ser til serialiserede
  objekter.</para></footnote> <constant>venner.ser</constant>, tilføjer
  en indgang og gemmer vektoren i filen igen.
</para>

<screen>
import java.util.*;
public class HentOgGem
{
  public static void main(String arg[]) throws Exception
  {
    Vector v;
    try {
<emphasis>      v = (Vector) Serialisering.hent(&quot;venner.ser&quot;);</emphasis>
      System.out.println(&quot;Læst: &quot;+v);
    } catch (Exception e) {
      v = new Vector();
      v.addElement(&quot;Jacob&quot;);
      v.addElement(&quot;Brian&quot;);
      v.addElement(&quot;Preben&quot;);
      System.out.println(&quot;Oprettet: &quot;+v);
    }

    v.addElement(&quot;Ven&quot;+v.size());
<emphasis>    Serialisering.gem(v,&quot;venner.ser&quot;);</emphasis>
    System.out.println(&quot;Gemt: &quot;+v);
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
Oprettet: [Jacob, Brian, Preben]
Gemt: [Jacob, Brian, Preben, Ven3]
</screen>

<para>
  Første gang, programmet kører, opstår der en undtagelse, fordi filen
  ikke findes. Den fanger vi og tilføjer &quot;Jacob&quot;,
  &quot;Brian&quot; og &quot;Preben&quot; til vektoren. Derpå tilføjer
  vi &quot;Ven3&quot; og gemmer vektoren.
</para>

<para>
  Næste gang er uddata:
</para>

<screen>
Læst: [Jacob, Brian, Preben, Ven3]
Gemt: [Jacob, Brian, Preben, Ven3, Ven4]
</screen>

<para>
  Køres programmet igen, ser man, at den hver gang tilføjer en indgang:
</para>

<screen>
Læst: [Jacob, Brian, Preben, Ven3, Ven4]
Gemt: [Jacob, Brian, Preben, Ven3, Ven4, Ven5]
</screen>

<para>og</para>

<screen>
Læst: [Jacob, Brian, Preben, Ven3, Ven4, Ven5]
Gemt: [Jacob, Brian, Preben, Ven3, Ven4, Ven5, Ven6]
</screen>

<para>og</para>

<screen>
Læst: [Jacob, Brian, Preben, Ven3, Ven4, Ven5, Ven6]
Gemt: [Jacob, Brian, Preben, Ven3, Ven4, Ven5, Ven6, Ven7]
</screen>

<para>og</para>

<screen>
Læst: [Jacob, Brian, Preben, Ven3, Ven4, Ven5, Ven6, Ven7]
Gemt: [Jacob, Brian, Preben, Ven3, Ven4, Ven5, Ven6, Ven7, Ven8]
</screen>

<para>
  Hvis nogle af de serialiserede objekter indeholder datafelter, der er
  referencer til andre objekter, serialiseres disse også.  Ovenfor så
  vi, at hvis man serialiserer en vektor, bliver elementerne i vektoren
  også serialiseret. Dette gælder også, hvis disse elementer selv
  indeholder eller er vektorer og så fremdeles, og så kan et helt
  netværk af objekter med indbyrdes referencer blive serialiseret. Man
  skal derfor være lidt påpasselig i sine egne programmer, det kan være,
  at man får for meget med.
</para>
</sect1>    <!--   Hente og gemme objekter -->

<sect1 id="java-serialisering-egne-klasser">
<title>Serialisering af egne klasser</title>

<para>
  Det er ikke alle klasser, der må/kan serialiseres. For eksempel giver
  det ikke mening at serialisere en datastrøm til en forbindelse over
  netværket (eller bare til en fil).  Hvordan skulle systemet genskabe
  en forbindelse, der har været gemt på harddisken i tre uger? Den anden
  ende af netværksforbindelsen vil formentlig være væk på det tidspunkt
  (og filen kan være flyttet eller slettet).
</para>

<sect2 id="java-serialisering-egne-klasser-interface">
<title>Interfacet Serializable</title>

<para>
  Serializable-interfacet, der ingen metoder har defineret, bruges til
  at markere, at objekter <emphasis>godt må</emphasis> serialiseres.
  Hvis en klasse implementerer Serializable, har man fortalt Java at
  objekter af denne type godt kan serialiseres.
</para>

<para>
  Prøver man alligevel at serialisere et objekt der ikke er
  Serializable, opstår der en køretidsfejl. Derfor implementerer
  f.eks. FileWriter og Socket ikke Serializable.
</para>
</sect2>    <!--   Interfacet Serializable -->

<sect2 id="java-serialisering-egne-klasser-transient">
<title>Nøgleordet transient</title>

<para>
  Ud over, at der kan findes objekt-typer, som overhovedet ikke kan
  serialiseres, kan det også ske, at der er visse dele af et objekts
  data, man ikke ønsker serialiseret. Hvis et objekt indeholder
  midlertidige data (f.eks. fortrydelses-information i et
  tekstbehandlingsprogram), kan man markere de midlertidige datafelter i
  klassen med nøgleordet <emphasis>transient</emphasis>.
</para>
</sect2>    <!--   Nøgleordet transient -->

<sect2 id="java-serialisering-egne-klasser-eksempel">
<title>Eksempel</title>

<para>
  Eksemplet herunder viser en klasse, der kan serialiseres (implements
  Serializable), med en transient variabel (tmp). Hvis et Data-objekt
  serialiseres, vil a blive gemt i byte-sekvensen, men tmp vil ikke.
</para>

<para>
  Af bekvemmelighedsgrunde er der også lavet en toString()-metode.
</para>

<screen>
import java.io.*;
public class Data <emphasis>implements Serializable</emphasis>
{
  public int a;
  public <emphasis>transient</emphasis> int tmp;    <emphasis>// transiente data bliver ikke serialiseret</emphasis>

  public String toString()
  { 
    return &quot;Data: a=&quot;+a+&quot; tmp=&quot;+tmp;
  }
}
</screen>

<para>
  Her er et program, der læser en vektor af Data-objekter, tilføjer et
  og gemmer den igen.
</para>

<screen>
import java.util.*;
public class HentOgGemData
{
  public static void main(String arg[]) throws Exception
  {
    Vector v;
    try {
<emphasis>      v = (Vector) Serialisering.hent(&quot;data.ser&quot;);</emphasis>
      System.out.println(&quot;Indlæst: &quot;+v);
    } catch (Exception e) {
      v = new Vector();
      System.out.println(&quot;Oprettet: &quot;+v);
    }

    Data <emphasis>d = new Data()</emphasis>;
    d.a   = (int) (Math.random()*100);
    d.tmp = (int) (Math.random()*100);
<emphasis>    v.addElement(d);</emphasis>

    System.out.println(&quot;Gemt: &quot;+v);
<emphasis>    Serialisering.gem(v,&quot;data.ser&quot;);</emphasis>
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
Oprettet: []
Gemt: [Data: a=88 tmp=2]
</screen>

<para>
  Køres programmet igen fås:
</para>

<screen>
Læst: [Data: a=88 tmp=0]
Gemt: [Data: a=88 tmp=0, Data: a=10 tmp=10]
</screen>

<para>og</para>

<screen>
Læst: [Data: a=88 tmp=0, Data: a=10 tmp=0]
Gemt: [Data: a=88 tmp=0, Data: a=10 tmp=0, Data: a=52 tmp=96]
</screen>

<para>og</para>

<screen>
Læst: [Data: a=88 tmp=0, Data: a=10 tmp=0, Data: a=52 tmp=0]
Gemt: [Data: a=88 tmp=0, Data: a=10 tmp=0, Data: a=52 tmp=0, Data: a=78 tmp=88]
</screen>

<para>
  Læg mærke til, at den transiente variabel tmp ikke bliver husket fra
  gang til gang.
</para>

</sect2>    <!--   Eksempel -->
</sect1>    <!--   Serialisering af egne klasser -->

<sect1 id="java-serialisering-opgaver">
<title>Opgaver</title>

<orderedlist>
  <listitem>
    <para>
      Lav et program, der holder styr på en musiksamling.  Opret en klasse,
      der repræsenterer en udgivelse (int år, String navn, String gruppe,
      String pladeselskab). Programmet skal huske listen over udgivelser og
      kunne udskrive den, brugeren skal kunne tilføje flere, og gemme og
      hente listen i en fil (vha.  serialisering).
    </para>
  </listitem>
  <listitem><para>Udvid programmet til, at brugeren angiver filnavnet, der skal hentes/gemmes i.</para></listitem>
</orderedlist>

</sect1>    <!--   Opgaver -->
</chapter>    <!--   Serialisering af objekter -->

