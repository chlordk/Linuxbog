<chapter id="java-arrays">
  <title>Arrays</title>

<para>
Kapitlet forudsættes ikke i resten af bogen, men er nyttigt
i praktisk programmering.
</para>

<para>
Forudsætter <xref linkend="java-obj" />, Objekter (og et enkelt sted 
<xref linkend="java-arv" />, Nedarvning).  </para>

<para>
Ofte har man behov for at håndtere et større antal
objekter eller simple typer på en ensartet måde.
Indtil nu har vi gjort det med lister af typen Vector, men Java
understøtter også <emphasis>arrays</emphasis>.
</para>

<blockquote><para>Et array er en række data af
samme type</para></blockquote>

<para>
Man kan f.eks. have et array af int eller et array af Point. Når
man har et array af int, betyder det, at man har en række
int-variabler som ligger i arrayet og kan ændres eller læses
vha. arrayet og et indeks. Indekset er nummeret på variablen i
arrayet - ligesom i Vector.
</para>

<para>
Ligesom med Vector skal man skelne mellem array-variablen og
array-objektet. Array-variablen refererer til array-objektet, som
indeholder variablerne.
</para>

<sect1 id="java-arrays-erkl">
  <title>Erklæring og brug</title>

<para>
Man erklærer en array-variabel med den type data, man ønsker
at lave et array af, umiddelbart efterfulgt af &quot;[]&quot;,
f.eks.:
</para>

<screen>
    int[] arr;
</screen>


<para>
Dette erklærer, at arr er en variabel med typen &quot;array
af int&quot;. Ligesom med variabler af objekt-type er dette blot
en reference hen til det egentlige array-objekt. Hvis man ønsker
at oprette et array, skriver man f.eks.:
</para>

<screen>
    arr = new int[6];
</screen>


<para>
Dette sætter arr til at referere til et array, der har 6
elementer.
</para>

<para>
Elementer i et array har som udgangspunkt værdien 0. Havde
arrayet indeholdt referencer til objekter, var de blevet sat til
null.
</para>

<para>
Arrayets værdier kan sættes og aflæses ved at
angive indeks i firkantede []-parenteser efter variabelnavnet:
</para>

<screen>
public class ArrayEksempel1
{
  public static void main(String[] args)
  {
<emphasis>    int[] arr = new int[6];</emphasis>
<emphasis>    arr[0] = 28;</emphasis>
    arr[2] = 13;

    arr[3] = arr[0] + arr[1] + arr[2];

    int længde = <emphasis>arr.length</emphasis>;    <emphasis>// = 6, da vi oprettede det med new int[6]</emphasis>

    for (int i=0; i&lt;længde; i=i+1) System.out.print( <emphasis>arr[i]</emphasis> + &quot; &quot; );
    System.out.println();
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
28 0 13 41 0 0
</screen>


<para>
Indekseringen starter altid fra 0 af, og sidste lovlige indeks er
dermed lig med arrayets længde-1. Indekserer man uden for
arrayets grænser, kastes undtagelsen
ArrayIndexOutOfBoundsException.
</para>

<para>
Alle arrays er objekter (derfor bruges new-operatoren, når
vi opretter et nyt array). Alle array-objekter har variablen length,
som fortæller hvor mange pladser arrayet indeholder.
</para>

<blockquote><para>Længden på et array kan
ikke ændres</para></blockquote>

<para>
Selvom array-objekter ikke kan ændre længde, kan man
lade variablen referere til et andet array-objekt med en anden
længde:
</para>

<screen>
    arr = new int[8];
</screen>


<para>
Nu refererer arr til et andet array med længde 8 (og det
gamle arrays og dets værdier er glemt).
</para>

<sect2 id="java-arrays-erkl-eks">
  <title>Eksempel: Statistik</title>

<para>
Arrays er gode til at lave statistik med. Her laver vi statistik
på slag med to terninger:
</para>

<screen>
import java.util.*;

public class TerningStatistik
{
  public static void main(String[] args)
  {
    int[] antal = new int[13];    <emphasis>// array med element nr. 0 til og med 12</emphasis>

    for (int i=0; i&lt;100; i=i+1) 
    {
      int sum = (int) (6*Math.random()+1) + (int) (6*Math.random()+1);

      antal[sum] = antal[sum]+1;  <emphasis>// optæl statistikken for summen af øjne</emphasis>
    }

    for (int n=2; n&lt;=12; n=n+1) System.out.println( n + &quot;: &quot; + antal[n]);
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
2: 2
3: 9
4: 7
5: 17
6: 14
7: 15
8: 8
9: 9
10: 8
11: 7
12: 4
</screen>
</sect2>
</sect1>

<sect1 id="java-arrays-main">
  <title>Main-metoden</title>

<para>
Main-metoden, som vi har defineret utallige gange, tager en
parameter, som er et array af strenge. Dette array indeholder
kommandolinie-parametrene ved kørsel af programmet.
</para>

<screen>
public class Kommandolinie 
{
  public static void main(<emphasis>String[] args</emphasis>)
  { 
    System.out.println(<emphasis>&quot;Antallet af parametre er: &quot; + args.length</emphasis>);

    for (int i=0; i&lt; <emphasis>args.length</emphasis>; i=i+1)
      System.out.println(&quot;Parameter &quot;+i+&quot; er: &quot; + <emphasis>args[i]</emphasis>);
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
Antallet af parametre er: 3
Parameter 0 er: x
Parameter 1 er: y
Parameter 2 er: z
</screen>


<para>
Programmet herover er kørt fra prompten med &quot;java
Kommandolinie x y z&quot;.
</para>
</sect1>    <!--   Main-metoden -->

<sect1 id="java-arrays-start-values">
  <title>Arrays med startværdier</title>

<para>
Arrays kan initialiseres med startværdier i {} og er adskilt
med komma.
</para>

<screen>
    int[] arr = {28, 0, 13, 41, 0, 0};
</screen>


<para>
Det er ofte meget mere bekvemt end at sætte de enkelte
værdier.
</para>

<para>
Herunder et program, der udskriver antallet af dage i hver måned:
</para>

<screen>
public class Maaneder
{  
  public static void main(String[] args)
  { 
<emphasis>    int[] måneder = {31,28,31,30,31,30,31,31,30,31,30,31};</emphasis>
    
    System.out.println(&quot;Længden af januar er: &quot; + måneder[0]);
    System.out.println(&quot;Længden af april er: &quot; + måneder[3]);

    for (int i=0; i &lt;måneder.length; i++)
      System.out.print(måneder[i] + &quot;, &quot;);

    System.out.println();
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
Længden af januar er: 31
Længden af april er: 30
31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
</screen>
</sect1>

<sect1 id="java-arrays-gennemloeb">
  <title>Gennemløb og manipulering</title>

<para>
Et array er faktisk et objekt, men det har ingen metoder og kun &eacute;n
variabel, nemlig length. Arrays kan ikke ændre størrelse,
og length er da også konstant. Den eneste måde at få
et array af en anden størrelse er at oprette et andet array og
så kopiere det gamle indhold over i det nye array.
</para>

<para>
Herunder ses, hvordan man kan fjerne et element fra et array.
</para>

<screen>
public class FjernEtElement
{
  public static void main(String args[])
  {    
<emphasis>    // Oprettelse og initialisering af array</emphasis>
     <emphasis>int[] a=new int[10]</emphasis>;
    for (int n=0;n&lt;a.length;n=n+1) a[n]=n*10;

<emphasis>    // Gennemløb og udskrivning af array   </emphasis>
    System.out.print(&quot;a før: &quot;);
     for (int n=0;n&lt;a.length;n=n+1) System.out.print(a[n]+&quot; &quot;);
     System.out.println();

<emphasis>    // Kopiering af array / udtagning af element</emphasis>
    int fjernes=5;        <emphasis>// Element nr 5 skal fjernes.</emphasis>

    <emphasis>int[] tmp=new int[9]</emphasis>;<emphasis> // Nyt array med 9 pladser</emphasis>

<emphasis>    // bemærk at elementet der skal fjernes ikke kopieres</emphasis>
    <emphasis>for (int n=0;n&lt;fjernes;n=n+1) tmp[n]=a[n]</emphasis>;

    <emphasis>for (int n=fjernes+1;n&lt;a.length;n=n+1) tmp[n-1]=a[n]</emphasis>;

    <emphasis>a=tmp</emphasis>;                <emphasis>// Nu refererer a til det nye array med 9 elementer</emphasis>

    System.out.print(&quot;a efter: &quot;);
    for (int n=0;n&lt;a.length;n=n+1) System.out.print(a[n]+&quot; &quot;);
    System.out.println();
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
a før: 0 10 20 30 40 50 60 70 80 90
a efter: 0 10 20 30 40 60 70 80 90
</screen>
</sect1>

<sect1 id="java-arrays-objekter">
  <title>Array af objekter</title>

<para>
Et array af objekter oprettes på samme måde som et
array af simple typer:
</para>

<screen>
    Point[] pkt = new Point[10];
</screen>


<para>
Bemærk: Arrayet indeholder en række af referencer til
objekterne. Herover oprettes altså ingen punkter! Dvs. pkt[0],
pkt[1],...,pkt[9] er alle null.
</para>

<para>
Arrays kan bruges til at gå mellem værdier fra et
domæne til værdier i et andet domæne. For eksempel
konvertering af måneders numre (1-12) til deres navne:
</para>

<screen>
public class MaanedersNavne
{
  public static void main(String[] args) 
  {
<emphasis>    String[] måneder = {&quot;januar&quot;, &quot;februar&quot;, &quot;marts&quot;, &quot;april&quot;, &quot;maj&quot;, &quot;juni&quot;,</emphasis>
<emphasis>      &quot;juli&quot;, &quot;august&quot;, &quot;september&quot;, &quot;oktober&quot;, &quot;november&quot;, &quot;december&quot; };</emphasis>

      System.out.println(&quot;Den 1. måned er &quot; + måneder[0] );
      System.out.println(&quot;Den 6. måned er &quot; + måneder[5] );
      System.out.println(&quot;Den 9. måned er &quot; + måneder[9] );  
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
Den 1. måned er januar
Den 6. måned er juni
Den 9. måned er oktober
</screen>


<para>
På samme måde som strenge kan andre slags objekter
lægges i et array, f.eks. punkter:
</para>

<screen>
Point[] pkt = { new Point(100,100), new Point(110,90), new Point(10,10) };
</screen>


<sect2 id="java-arrays-objekter-polymorfi">
  <title>Polymorfi</title>

<para>
Ligesom med almindelige variabler kan elementerne i et array godt
referere til nedarvinger.
</para>

<screen>
<emphasis>// Bruger Terning.java og FalskTerning2.java fra tidligere kapitler</emphasis>
public class Terninger
{
  public static void main(String[] args) 
  {
<emphasis>    Terning[] t={new Terning(), new FalskTerning2(), new FalskTerning2()};</emphasis>

    for (int i=0; i&lt;t.length; i++) t[i].kast();
  }
}
</screen>
</sect2>
</sect1>

<sect1 id="java-arrays-vs-vector">
  <title>Arrays versus vektorer</title>

<para>
Som det ses, er det besværligt at ændre størrelsen
på et array, f.eks. når der skal indsættes eller
slettes elementer. Til gengæld kan arrays indeholde simple
typer, det er nemmere at få adgang til elementerne, og man kan
initialisere et array på &eacute;n linie. Faktisk er
Vector-klassen et array i en indpakning, der gør det nemmere
at bruge. Hvad du vælger er op til dig selv.
</para>

<para>
En vektor er god at bruge, når:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>

antallet af elementer kan ændre sig
</para>

</listitem>

  <listitem>

<para>
der er brug for at indsætte og slette elementer løbende
</para>

</listitem>
</itemizedlist>

<para>
Et array er godt at bruge, når:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>

antallet af elementer er fast, og man evt. kender værdierne
  på forhånd
</para>

</listitem>

  <listitem>

<para>
man arbejder med simple typer som int og double
</para>

</listitem>

  <listitem>

<para>
programmet skal være meget hurtigt
</para>

</listitem>
</itemizedlist>

<para>
Der er desuden den fordel ved arrays, at de er typesikre. Vi kan
ikke komme til at lægge værdier af forkerte typer ind i
et array - så stopper oversætteren os.
</para>
</sect1>

<sect1 id="java-arrays-opg">
  <title>Opgaver</title>
<orderedlist>
  <listitem>

<para>

Lav et program, der simulerer kast med 2 terninger. Der
  udføres f.eks. 100 kast. Optæl i et array hyppigheden
  af summen af øjenantallene.
</para>

</listitem>

  <listitem>

<para>
Lav programmet om til at lave hyppighedsstatistik på
  med 6 terninger. Udvid det derpå til at kunne lave
  statistik på kast med et vilkårligt antal terninger.
</para>

</listitem>
</orderedlist>
</sect1>
</chapter>

