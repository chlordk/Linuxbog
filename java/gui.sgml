<chapter>
  <title>Grafiske brugergrænseflader</title>

<para>
Indhold:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>

Design af en grafisk brugergrænseflade med et værktøj
</para>

</listitem>

  <listitem>

<para>
De vigtigste grafiske komponenter og deres egenskaber
</para>

</listitem>

  <listitem>

<para>
Containere og layout-managers
</para>

</listitem>

  <listitem>

<para>
Større opgave: Matador-spillet som en applet
</para>

</listitem>
</itemizedlist>

<para>
Forudsættes af kapitel 12, Hændelser.
</para>

<para>
Kapitlet forudsætter kapitel 9, Appletter og grafik, og at
du har adgang til et værktøj, der kan udvikle grafiske
brugergrænseflader (f.eks. Borland JBuilder, Oracle JDeveloper,
Sun Forte eller IBM VisualAge for Java). Den større opgave
forudsætter kapitel 5, Nedarvning.
</para>

<para>
Når man skal lave en grafisk brugergrænseflade, gøres
det ofte ved at anvende standardkomponenter. Vi vil starte med
at se på, hvordan det gøres i praksis med et værktøj.
</para>

<sect1>
  <title>Generering med et værktøj</title>

<para>
Med moderne udviklingsværktøjer kan man udarbejde en
grafisk brugergrænseflade ud fra standardkomponenter på
ret kort tid. Herunder er beskrevet, hvordan man gør i
Borland JBuilder. JDeveloper har helt de samme muligheder og
udseende. Hvis du bruger et andet værktøj, må

du prøve dig lidt frem. Ideerne er de samme, og koden, der
genereres, ligner også nogenlunde, men menuerne og knapperne
varierer selvfølgelig noget.
</para>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215420.&magic;" scale="60"></graphic>
</figure>

<para>
Tag en eksisterende applet, f.eks. MinApplet fra kapitlet om
appletter, og føj den til et projekt. Hvis du i stedet vil
oprette en ny, så vælg &quot;New..&quot; og Applet. Fjern
pakkenavnet, skriv et navn på din klasse, vælg
superklasse (&quot;base class&quot;) Applet, og klik &quot;Finish&quot;.
Defin&eacute;r evt. en paint()-metode, der tegner noget (hvis du
bruger et andet værktøj end JBuilder, så find
menuerne til at oprette en ny applet, og gør det).
</para>

<orderedlist>
  <listitem>

<para>

Gå over på Design-fanen (ved punkt 1 nederst).
  Den er delt op i en del, hvor du designer din brugergrænseflade
  til venstre, og en tabel af egenskaber til højre (punkt 2).
</para>

</listitem>

  <listitem>

<para>
Her skal du først ændre layout fra &quot;&lt;default
  layout&gt;&quot; til &quot;null&quot; (punkt 2 til højre;
  måske skal du klikke på den grå flade i designeren
  først).
</para>

</listitem>

  <listitem>

<para>
Nu kan du gå i gang med at lægge komponenter ind
  på grænsefladen. Vælg i første omgang
  at arbejde med AWT-komponenter (punkt 3).
</para>

</listitem>

  <listitem>

<para>
Vælg først en Label (det store A ved punkt 4),
  og klik på grænsefladen. Der dukker en mærkat med
  en tekst op. På egenskabstabellen til højre kan du
  ændre dens variabelnavn (<emphasis>name</emphasis>
  øverst) til f.eks. labelHvadErDitNavn. Længere nede
  er egenskaben <emphasis>text</emphasis>,
  der bestemmer, hvad der skal stå på mærkaten. Ret
  den til f.eks. &quot;Hvad er dit navn?&quot;.
</para>

</listitem>

  <listitem>

<para>
Indsæt derefter et TextField (et indtastningsfelt
  -punkt 5). Ret variabelnavnet til textFieldNavn og teksten til
  f.eks. &quot;Jacob&quot;.
</para>

</listitem>
</orderedlist>

<para>
Gå tilbage til Source-fanen. Nu ser kildeteksten således
ud:
</para>

<screen>
import java.awt.*;
import java.applet.*;

public class MinApplet extends Applet
{
  <emphasis>Label labelHvadErDitNavn = new Label()</emphasis>;
  <emphasis>TextField textFieldNavn = new TextField()</emphasis>;

  public void paint(Graphics g)
  {
<emphasis>    // Herunder referer g til et Graphics-objekt man kan tegne med.</emphasis>
    g.drawLine(10,10,50,70);

    g.fillOval(5,5,300,50);

    g.setColor(Color.green);
    g.drawString(&quot;Hej grafiske verden!&quot;,100,30);
  }

  public MinApplet() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    <emphasis>labelHvadErDitNavn.setText(&quot;Hvad er dit navn?&quot;)</emphasis>;
    labelHvadErDitNavn.setBounds(new Rectangle(15, 69, 108, 15));
    <emphasis>textFieldNavn.setText(&quot;Jacob&quot;)</emphasis>;
    textFieldNavn.setBounds(new Rectangle(141, 61, 112, 29));
    this.setLayout(null);
    this.add(textFieldNavn, null);
    this.add(labelHvadErDitNavn, null);
  }
}
</screen>


<para>
De to objekter, vi satte på i designeren, er erklæret
og oprettet øverst uden for metoderne:
</para>

<screen>
  Label labelHvadErDitNavn = new Label();
  TextField textFieldNavn = new TextField();
</screen>


<para>
Nedenunder står vores gamle paint() uændret. Herunder
er der oprettet en konstruktør, der kalder metoden jbInit().
Den andet kode, 'try{ ... } catch (Exception e) {...}', er beregnet
til at håndtere undtagelser, og vil blive forklaret senere i
kapitel 13, Undtagelser.
</para>

<para>
I metoden jbInit() nedenunder lægger JBuilder (og
JDeveloper) al sin programkode. Man ser her, hvordan både Label
og TextField har metoden setText(), og begge objekter får kaldt
denne metode (svarende til, at vi ændrede egenskaben <emphasis>text</emphasis>).
</para>

<screen>
    labelHvadErDitNavn.setText(&quot;Hvad er dit navn?&quot;);
    textFieldNavn.setText(&quot;Jacob&quot;);
</screen>


<para>
De andre kommandoer i jbInit() sørger for at placere
komponenterne korrekt på appletten.
</para>

<para>
&quot;Design&quot;- og &quot;Source&quot;-fanen i JBuilder (og
JDeveloper) er to måder at se programmet på, og man kan
frit skifte mellem dem. Laver man en designændring, vil det
blive afspejlet i koden og omvendt. Prøv selv.
</para>

<sect2>
  <title>Interaktive programmer</title>

<para>
Lad os nu tilføje en knap og et indtastningsfelt på
flere linier (TextArea). Jeg kalder dem for buttonOpdater og
textAreaHilsen. Knappen skal selvfølgelig gøre noget.
Fra Design-fanen, dobbeltklik på knappen, og vupti! Der
genereres automatisk en metode til at håndtere et klik:
</para>

<screen>
  void buttonOpdater_actionPerformed(ActionEvent e) {

  }
</screen>


<para>
Hvis du kigger i jbInit(), kan du se, at JBuilder har indsat
følgende kode:
</para>

<screen>
    buttonOpdater.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        buttonOpdater_actionPerformed(e);
      }
    });
</screen>


<para>
Det er disse linier, der sørger for at &quot;lytte efter
hændelser&quot; på knappen, sådan at når man
klikker på buttonOpdater, så kaldes metoden
buttonOpdater_actionPerformed(). Det vil vi komme tilbage til i
kapitel 12, Hændelser.
</para>

<para>
Nu kan du indsætte kode, der udfører en handling.
Skriv f.eks. noget ud til systemoutput:
</para>

<screen>
  void buttonOpdater_actionPerformed(ActionEvent e) {
    System.out.println(&quot;Opdater!&quot;);
  }
</screen>


<para>
Vi kunne også lave noget sjovere, f.eks. læse den
indtastede tekst fra textFieldNavn og skrive den i textAreaHilsen.
JBuilder har lavet koden, der sætter teksterne for os, og ved
at studere den kan man få en ide til, hvordan det skal gøres:
</para>

<screen>
    String navn = textFieldNavn.getText();     // aflæs navnet

    textAreaHilsen.setText(&quot;Hej kære &quot;+navn);  // sæt navnet
</screen>


<para>
Her kommer det fulde eksempel. paint() er ændret til også
at tegne navnet 5 gange.
</para>

<screen>
import java.awt.*;
import java.applet.*;
import java.awt.event.*;

public class MinAppletFaerdig extends Applet 
{
  Label labelHvadErDitNavn = new Label();
  TextField textFieldNavn = new TextField();
<emphasis>  Button buttonOpdater = new Button();</emphasis>
<emphasis>  TextArea textAreaHilsen = new TextArea();</emphasis>

  public MinAppletFaerdig() 
  {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  public void paint(Graphics g) 
  {
    g.drawLine(10,10,50,70);
    g.fillOval(5,5,300,50);

    g.setColor(Color.green);
    String navn = textFieldNavn.getText();
    for (int i=0; i&lt;50; i=i+10)
      g.drawString(&quot;Hej &quot;+navn+&quot; !&quot;,100+i,30+i);
  }

  private void jbInit() throws Exception {
    labelHvadErDitNavn.setText(&quot;Hvad er dit navn?&quot;);
    labelHvadErDitNavn.setBounds(new Rectangle(15, 69, 108, 15));
    textFieldNavn.setText(&quot;Jacob&quot;);
    textFieldNavn.setBounds(new Rectangle(129, 61, 95, 29));
<emphasis>    buttonOpdater.setLabel(&quot;opdater!&quot;);</emphasis>
    buttonOpdater.setBounds(new Rectangle(231, 60, 91, 32));
    buttonOpdater.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        buttonOpdater_actionPerformed(e);
      }
    });
<emphasis>    textAreaHilsen.setText(&quot;Her kommer en tekst...&quot;);</emphasis>
    textAreaHilsen.setBounds(new Rectangle(6, 102, 316, 78));
    this.setLayout(null);
    this.add(labelHvadErDitNavn, null);
    this.add(textAreaHilsen, null);
    this.add(buttonOpdater, null);
    this.add(textFieldNavn, null);
  }

  void buttonOpdater_actionPerformed(ActionEvent e) {
<emphasis>    String navn = textFieldNavn.getText();</emphasis>
    System.out.println(&quot;Opdater! navn=&quot;+navn);
<emphasis>    textAreaHilsen.setText(&quot;Hej kære &quot;+navn);</emphasis>
<emphasis>    repaint();</emphasis><emphasis> // gentegn appletten</emphasis>
  }
}
</screen>


<para>
Her har vi tastet &quot;Jacob Nordfalk&quot; ind og trykket på
&quot;opdater!&quot;-knappen:
</para>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215421.&magic;" scale="60"></graphic>
</figure>

<para>
Der er altså to måder at arbejde med grafik på:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>

I paint() tegner man &quot;i hånden&quot; ved at give
  kommandoer til et Graphics-objekt.
</para>

</listitem>

  <listitem>

<para>
Ved at bruge grafiske standardkomponenter.
</para>

</listitem>
</itemizedlist>
</sect2>
</sect1>

<sect1>
  <title>Komponenter</title>

<para>
Komponenter er objekter, der bruges som en synlig del
af en grafisk brugergrænseflade, f.eks. knapper, valglister,
indtastningsfelter, mærkater.
</para>

<para>
Alle komponenter arver fra Component-klassen og har derfor dennes
træk til fælles:
</para>

<para>
Metoderne setForeground(Color c) og setBackground(Color c) sætter
farven hhv. baggrundsfarven for komponenten, svarende til
egenskaberne <emphasis>foreground</emphasis> og <emphasis>background</emphasis>. Egenskaberne kan
aflæses med getForeground() og getBackground().
</para>

<para>
En anden egenskab er <emphasis>font</emphasis>, der bestemmer skrifttypen. I
tråd med de andre egenskaber sættes den med setFont(Font
f) og aflæses med getFont().
</para>

<para>
Dette kan sammenfattes i en tabel over egenskaber, der
er fælles for alle komponenter.
</para>

<table>
<tgroup cols="0" align="char">
<thead>
    <tr valign=top>
      <th width=20%>

<para>
Egenskab
</para>

</th>
      <th width=16%>

<para>
Type
</para>

</th>
      <th width=33%>

<para>
Sættes med
</para>

</th>
      <th width=31%>

<para>
Læses med
</para>

</th></row>
</thead>

<tbody>
    <tr valign=top>
      <td width=20%>

<para>
foreground
</para>

</entry>
<td width=16%>

<para>
Color
</para>

</entry>
<td width=33%>

<para>
setForeground(Color c)
</para>

</entry>
<td width=31%>

<para>
getForeground()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
background
</para>

</entry>
<td width=16%>

<para>
Color
</para>

</entry>
<td width=33%>

<para>
setBackground(Color c)
</para>

</entry>
<td width=31%>

<para>
getBackground()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
font
</para>

</entry>
<td width=16%>

<para>
Font
</para>

</entry>
<td width=33%>

<para>
setFont(Font f)
</para>

</entry>
<td width=31%>

<para>
getFont()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
visible
</para>

</entry>
<td width=16%>

<para>
boolean
</para>

</entry>
<td width=33%>

<para>
setVisible(boolean synlig)
</para>

</entry>
<td width=31%>

<para>
isVisible()
</para>

</entry>
</row>
</tbody>

</tgroup>
</table>

<para>
Nedenfor vil de mest almindelige komponenter blive beskrevet. Kun
de nye egenskaber er beskrevet.
</para>

<sect2>
  <title>Button</title>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215422.&magic;" scale="60"></graphic>
</figure>
<br clear=left>En
trykknap. Egenskaben <emphasis>label</emphasis> angiver, hvad der står på
knappen.
</para>

<table>
<tgroup cols="0" align="char">
<thead>
    <tr valign=top>
      <th width=20%>

<para>
Egenskab
</para>

</th>
      <th width=16%>

<para>
Type
</para>

</th>
      <th width=33%>

<para>
Sættes med
</para>

</th>
      <th width=31%>

<para>
Læses med
</para>

</th></row>
</thead>

<tbody>
    <tr valign=top>
      <td width=20%>

<para>
label
</para>

</entry>
<td width=16%>

<para>
String
</para>

</entry>
<td width=33%>

<para>
setLabel(String t)
</para>

</entry>
<td width=31%>

<para>
getLabel()
</para>

</entry>
</row>
</tbody>

</tgroup>
</table>
</sect2>

<sect2>
  <title>Checkbox</title>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215423.&magic;" scale="60"></graphic>
</figure>
<br clear=left>Et
afkrydsningsfelt. Kan både bruges til flueben og til
radioknapper. Hvis man skal have radioknapper (der gensidigt
udelukker hinanden), skal objekterne knyttes sammen af et
CheckboxGroup-objekt.
</para>

<para>
<emphasis>label</emphasis> angiver, hvad der står ved feltet.
<emphasis>state</emphasis> angiver, om feltet er afkrydset.
</para>

<table>
<tgroup cols="0" align="char">
<thead>
    <tr valign=top>
      <th width=20%>

<para>
Egenskab
</para>

</th>
      <th width=16%>

<para>
Type
</para>

</th>
      <th width=33%>

<para>
Sættes med
</para>

</th>
      <th width=31%>

<para>
Læses med
</para>

</th></row>
</thead>

<tbody>
    <tr valign=top>
      <td width=20%>

<para>
label
</para>

</entry>
<td width=16%>

<para>
String
</para>

</entry>
<td width=33%>

<para>
setLabel(String t)
</para>

</entry>
<td width=31%>

<para>
getLabel()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
state
</para>

</entry>
<td width=16%>

<para>
boolean
</para>

</entry>
<td width=33%>

<para>
setState (boolean afkrydset)
</para>

</entry>
<td width=31%>

<para>
getState()
</para>

</entry>
</row>
</tbody>

</tgroup>
</table>
</sect2>

<sect2>
  <title>Choice</title>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215424.&magic;" scale="60"></graphic>
</figure>
<br clear=left>En
valgliste. Brug metoden add(String elementnavn) til at tilføje
indgange.
</para>

<para>
Med getSelectedItem() undersøger man, hvad
brugeren har valgt.
</para>
</sect2>

<sect2>
  <title>TextField</title>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215425.&magic;" scale="60"></graphic>
</figure>
<br clear=left>Et
indtastningsfelt på en linie. Egenskaben <emphasis>text</emphasis> angiver,
hvad der står i feltet.
</para>

<para>
Mindre brugt er: <emphasis>columns</emphasis> angiver, hvor bredt
feltet skal være.
</para>

<para>
<emphasis>editable</emphasis> angiver, om brugeren kan redigere
teksten i indtastningsfeltet.
</para>

<para>
<emphasis>echoChar</emphasis> bruges til felter, der skal skjule det
indtastede, typisk adgangskoder.
</para>

<para>
Sæt f.eks. <emphasis>echoChar</emphasis> til '*' for at få
vist stjerner i stedet for det indtastede.
</para>

<table>
<tgroup cols="0" align="char">
<thead>
    <tr valign=top>
      <th width=20%>

<para>
Egenskab
</para>

</th>
      <th width=16%>

<para>
Type
</para>

</th>
      <th width=33%>

<para>
Sættes med
</para>

</th>
      <th width=31%>

<para>
Læses med
</para>

</th></row>
</thead>

<tbody>
    <tr valign=top>
      <td width=20%>

<para>
text
</para>

</entry>
<td width=16%>

<para>
String
</para>

</entry>
<td width=33%>

<para>
setText(String t)
</para>

</entry>
<td width=31%>

<para>
getText()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
editable
</para>

</entry>
<td width=16%>

<para>
boolean
</para>

</entry>
<td width=33%>

<para>
setEditable(boolean rediger)
</para>

</entry>
<td width=31%>

<para>
isEditable()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
columns
</para>

</entry>
<td width=16%>

<para>
int
</para>

</entry>
<td width=33%>

<para>
setColumns(int bredde)
</para>

</entry>
<td width=31%>

<para>
getColumns()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
echoChar
</para>

</entry>
<td width=16%>

<para>
char
</para>

</entry>
<td width=33%>

<para>
setEchoChar(char tegn)
</para>

</entry>
<td width=31%>

<para>
getEchoChar()
</para>

</entry>
</row>
</tbody>

</tgroup>
</table>
</sect2>

<sect2>
  <title>TextArea</title>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215426.&magic;" scale="60"></graphic>
</figure>
<br clear=left>Et
indtastningsfelt på flere linier.
</para>

<para>
Egenskaberne <emphasis>text, rows</emphasis>
og <emphasis>columns</emphasis> angiver, hvad der står i feltet, hhv.
bredde og højde.
</para>

<table>
<tgroup cols="0" align="char">
<thead>
    <tr valign=top>
      <th width=20%>

<para>
Egenskab
</para>

</th>
      <th width=14%>

<para>
Type
</para>

</th>
      <th width=35%>

<para>
Sættes med
</para>

</th>
      <th width=31%>

<para>
Læses med
</para>

</th></row>
</thead>

<tbody>
    <tr valign=top>
      <td width=20%>

<para>
text
</para>

</entry>
<td width=14%>

<para>
String
</para>

</entry>
<td width=35%>

<para>
setText(String t)
</para>

</entry>
<td width=31%>

<para>
getText()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
editable
</para>

</entry>
<td width=14%>

<para>
boolean
</para>

</entry>
<td width=35%>

<para>
setEditable(boolean rediger)
</para>

</entry>
<td width=31%>

<para>
isEditable()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
columns
</para>

</entry>
<td width=14%>

<para>
int
</para>

</entry>
<td width=35%>

<para>
setColumns(int bredde)
</para>

</entry>
<td width=31%>

<para>
getColumns()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
rows
</para>

</entry>
<td width=14%>

<para>
int
</para>

</entry>
<td width=35%>

<para>
setRows(int højde)
</para>

</entry>
<td width=31%>

<para>
getRows()
</para>

</entry>
</row>
</tbody>

</tgroup>
</table>

<para>
TextField og TextArea har en del egenskaber til fælles,
og disse fællestræk ligger i superklassen
TextComponent (se klassediagrammet).
</para>
</sect2>

<sect2>
  <title>Label</title>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215427.&magic;" scale="60"></graphic>
</figure>
<br clear=left>En
mærkat der viser en tekst (som brugeren ikke kan redigere i).
</para>

<para>
Egenskaben <emphasis>text</emphasis> angiver, hvad der står i
feltet.
</para>

<table>
<tgroup cols="0" align="char">
<thead>
    <tr valign=top>
      <th width=20%>

<para>
Egenskab
</para>

</th>
      <th width=14%>

<para>
Type
</para>

</th>
      <th width=35%>

<para>
Sættes med
</para>

</th>
      <th width=31%>

<para>
Læses med
</para>

</th></row>
</thead>

<tbody>
    <tr valign=top>
      <td width=20%>

<para>
text
</para>

</entry>
<td width=14%>

<para>
String
</para>

</entry>
<td width=35%>

<para>
setText(String t)
</para>

</entry>
<td width=31%>

<para>
getText()
</para>

</entry>
</row>
</tbody>

</tgroup>
</table>
</sect2>

<sect2>
  <title>List</title>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215428.&magic;" scale="60"></graphic>
</figure>
<br clear=left>En
menu, hvor flere af indgangene kan ses samtidigt, og hvor man kan
vælge en eller flere elementer. Brug metoden add(String
elementnavn) til at tilføje indgange.
</para>

<para>
Med isIndexSelected(int index) undersøger man,
om en indgang er valgt.
</para>

<para>
Egenskaberne <emphasis>rows</emphasis>
og <emphasis>multipleMode</emphasis> angiver, hvad højden er, og om
man kan vælge flere indgange samtidigt.
</para>

<table>
<tgroup cols="0" align="char">
<thead>
    <tr valign=top>
      <th width=20%>

<para>
Egenskab
</para>

</th>
      <th width=14%>

<para>
Type
</para>

</th>
      <th width=35%>

<para>
Sættes med
</para>

</th>
      <th width=31%>

<para>
Læses med
</para>

</th></row>
</thead>

<tbody>
    <tr valign=top>
      <td width=20%>

<para>
rows
</para>

</entry>
<td width=14%>

<para>
int
</para>

</entry>
<td width=35%>

<para>
setRows(int højde)
</para>

</entry>
<td width=31%>

<para>
getRows()
</para>

</entry>
</row>
<tr valign=top>
      <td width=20%>

<para>
multipleMode
</para>

</entry>
<td width=14%>

<para>
boolean
</para>

</entry>
<td width=35%>

<para>
setMultipleMode(boolean m)
</para>

</entry>
<td width=31%>

<para>
getMultipleMode()
</para>

</entry>
</row>
</tbody>

</tgroup>
</table>
</sect2>

<sect2>
  <title>Canvas</title>

<para>
Et tegne-område. Canvas er lidt besværlig,
idet man skal nedarve fra klassen og implementere paint(Graphics
g) for at kunne tegne noget.
</para>

<para>
En lettere (men ikke nødvendigvis altid
smartere) måde er som sagt at definere paint()-metoden direkte
i appletten/vinduet som vi har gjort tidligere.
</para>
</sect2>
</sect1>

<sect1>
  <title>Eksempel</title>

<para>
Herunder et eksempel (genereret med JBuilder), der viser
komponenterne omtalt i forrige afsnit. På billedet ses det
resulterende skærmbillede under Windows (sidst i kapitlet ses,
hvordan det ser ud under Linux).
</para>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215429.&magic;" scale="60"></graphic>
</figure>
<br clear=left>
</para>

<screen>
import java.awt.*;
import java.applet.*;

public class GrafiskeKomponenter extends Applet
{
<emphasis>  // opret alle komponenterne og husk dem i nogle objektvariabler</emphasis>
  Button button1 = new Button();
  Checkbox checkbox1 = new Checkbox();
  Checkbox checkbox2 = new Checkbox();
  Checkbox checkbox3 = new Checkbox();
  Checkbox checkbox4 = new Checkbox();
  Checkbox checkbox5 = new Checkbox();
  CheckboxGroup checkboxGroup1 = new CheckboxGroup();
  Choice choice1 = new Choice();
  TextField textField1 = new TextField();
  TextArea textArea1 = new TextArea();
  List list1 = new List();
  Label label1 = new Label();

<emphasis>  // JBuilder og JDeveloper definerer metoden jbInit() hvor de</emphasis>
<emphasis>  // initialiserer komponenterne. Det kunne dog lige så godt</emphasis>
<emphasis>  // ligge direkte i init()</emphasis>
  public void init() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

<emphasis>  // initialisering af komponenterne med deres startværdier</emphasis>
  private void jbInit() throws Exception {
    button1.setLabel(&quot;OK&quot;);

    checkbox1.setLabel(&quot;En&quot;);     <emphasis>// Sæt afkrydsningsfelternes navne</emphasis>
    checkbox2.setLabel(&quot;To&quot;);
    checkbox3.setLabel(&quot;Tre&quot;);

    checkbox4.setLabel(&quot;Radio1&quot;); <emphasis>// Sæt radioknappernes navne og</emphasis>
    checkbox5.setLabel(&quot;Radio2&quot;);
    checkbox4.setCheckboxGroup(checkboxGroup1);<emphasis> // gruppen de tilhører</emphasis>
    checkbox5.setCheckboxGroup(checkboxGroup1);
    checkboxGroup1.setSelectedCheckbox(checkbox4);

    choice1.add(&quot;Choice Rød&quot;);
    choice1.add(&quot;Choice Grøn&quot;);
    choice1.add(&quot;Choice Blå&quot;);

    textField1.setColumns(10);
    textField1.setText(&quot;Et TextField&quot;);

    textArea1.setColumns(15);
    textArea1.setRows(5);
    textArea1.setText(&quot;Et TextArea&quot;);

    label1.setText(&quot;En Label&quot;);

    list1.add(&quot;List Rød&quot;);
    list1.add(&quot;List Grøn&quot;);
    list1.add(&quot;List Blå&quot;);

    this.add(button1, null);    <emphasis>// til sidst skal komponenterne føjes</emphasis>
    this.add(checkbox1, null);  <emphasis>// til containeren (se senere)</emphasis>
    this.add(checkbox2, null);
    this.add(checkbox3, null);
    this.add(checkbox4, null);
    this.add(checkbox5, null);
    this.add(choice1, null);
    this.add(textArea1, null);
    this.add(textField1, null);
    this.add(label1, null);
    this.add(list1, null);
  }
}
</screen>
</sect1>

<sect1>
  <title>Containere</title>

<para>
En <emphasis>container</emphasis> er beregnet til at indeholde komponenter. De
arver alle fra Container-klassen og har alle en såkaldt <emphasis>layout
manager</emphasis> tilknyttet, der
bestemmer, hvor og med hvilken størrelse komponenterne
skal vises i containeren.
</para>

<para>
Før en komponent bliver vist, skal den tilføjes en
container. I eksemplet ovenfor er appletten den container,
komponenterne bliver tilføjet, og derfor står der sidst
i initialiseringen:
</para>

<screen>
    this.add(button1, null);
</screen>

<sect2>
  <title>Panel</title>

<para>
Et panel er den simpleste og oftest brugte container.
Den indeholder simpelt hen komponenterne (i henhold til
layoutmanageren).
</para>

<h3 align=left> Applet</h3>

<para>
En applet er et udvidet panel, der er beregnet til at
vise i en browser. Læs kapitlet om appletter for mere
information.
</para>

<h3 align=left> Window</h3>

<para>
Window repræsenterer et vindue på skærmen.
Det bruges meget sjældent direkte, man bruger i stedet
arvningerne Frame og Dialog.
</para>

<h3 align=left> Frame</h3>

<para>
En Frame er den simpleste og oftest brugte måde
at definere et &quot;normalt&quot; vindue med en titel.
</para>

<h3 align=left> Dialog</h3>

<para>
Dialog bruges til dialog-bokse, vinduer, der dukker op
med et eller andet spørgsmål, som skal besvares, før
man kan gå videre. Egenskaben <emphasis>modal</emphasis> angiver, om
dialog-boksen er modal, dvs. om man skal lukke den før man kan
få adgang til ejer-vinduet. Den sættes med
setModal(boolean m) og aflæses med isModal().
</para>
</sect2>
</sect1>

<sect1>
  <title>Relationer mellem klasserne</title>

<para>
Herunder ses klassediagrammet for nogle komponenter og containere.
</para>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215431.&magic;" scale="60"></graphic>
</figure>

<para>
De hule pile repræsenterer <emphasis>er-en</emphasis>-relationer
(dvs. nedarvning).
</para>

<para>
De andre pile repræsenterer <emphasis>har</emphasis>-relationer (dvs.
at et objekt har en reference til et andet objekt, evt. 'ejer'
objektet).
</para>

<para>
Bemærk, at Container selv arver fra Component, så
en Container kan i sig selv bruges som en komponent. Det er relevant
for Panel og ScrollPane, der er beregnet til at blive placeret inden
i andre containere.
</para>

<h2 align=left> Layout-managere</h2>

<para>
En <emphasis>layout manager</emphasis>
styrer layoutet af komponenterne på et Panel eller en anden
container. Alle containere har egenskaben <emphasis>layout</emphasis>, der kan
sættes med metoden setLayout(Layout l).
</para>

<para>
Bruges et grafisk
udviklingsværktøj, er det mest bekvemt at sætte
layoutmanageren til null, der tillader udvikleren at sætte
komponenterne, som han vil på en hvilken som helst
(x,y)-position og med en hvilken som helst højde og bredde.
Layoutet tager slet ikke højde for vinduets størrelse,
så hvis vinduet bliver for lille, vil nogle af komponenterne
ikke blive vist.
</para>

<sect2>
  <title>FlowLayout</title>

<para>
FlowLayout placerer komponenterne ligesom bogstaver:
&Oslash;verst fra venstre mod højre og på en ny linie
nedenunder, når der ikke er mere plads.
</para>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215432.&magic;" scale="60"></graphic>
</figure>

<para>
Angiver man ikke nogen anden layout-manager, vil
FlowLayout blive brugt.
</para>
</sect2>

<sect2>
  <title>BorderLayout</title>

<para>
BorderLayout tager højde for vinduets størrelse
og tilpasser komponenternes størrelse efter den
tilgængelige plads. Komponenterne kan placeres på 5
mulige positioner, nemlig NORTH, SOUTH, EAST, WEST og CENTER.
</para>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215433.&magic;" scale="60"></graphic>
</figure>

<para>
Den mest almindelige måde at lave det grafiske
layout af et skærmbillede er med BorderLayout. I de
områder, hvor man ønsker at placere flere komponenter,
sætter man først et Panel, og komponenterne tilføjes
så panelet.
</para>
</sect2>

<sect2>
  <title>GridBagLayout</title>

<para>
GridBagLayout lægger komponenterne efter et
usynligt gitter.
</para>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215434.&magic;" scale="60"></graphic>
</figure>

<h2 style="page-break-before: always"> Opgaver</h2>
</sect2>

<sect2>
  <title>Matadorspillet grafisk</title>

<para>
Denne opgave kræver, at du har læst kapitel 5, Nedarvning
og  9, Appletter og grafik.
</para>

<para>
Lav matadorspillet om til at kunne vises grafisk i en applet. Der
skal som minimum være en knap, som spiller en omgang.
</para>

<sect3>
  <title>Vink</title>

<para>
Når du skal programmere, så vær systematisk, og
del opgaven op i små delopgaver. Løs en delopgave ad
gangen, og afprøv, at det fungerer, før du går
videre.
</para>

<orderedlist>
  <listitem>

<para>

Hent kildeteksten til matadorspillet (version 2: Felt.java,
  Gade2.java, Grund2.java, Helle.java, Rederi2.java, Start.java,
  Spiller.java og SpilMatador.java ændret til at bruge Gade2 og
  Rederi2), og prøv det.
</para>

</listitem>

  <listitem>

<para>
Genbrug MinApplet ovenfor. Husk at initialisering skal ske i
  init()-metoden eller i konstruktøren. De variabler der skal
  deles mellem flere metoder, skal være objektvariabler
  (lokale eksisterer jo kun i den metode de er defineret i).
</para>

</listitem>

  <listitem>

<para>
Lav en tur-knap, som spiller en runde.
</para>

</listitem>

  <listitem>

<para>
Føj en metode til Felt, der tegner feltet. Hvert felt
  skal også have en position (den er en del af initialiseringen,
  så sæt  den fra init()-metoden).
</para>

</listitem>

  <listitem>

<para>
Løb igennem alle felter, og tegn dem i paint().
</para>

</listitem>

  <listitem>

<para>
Udbyg derefter spillet efter egen smag.
</para>

</listitem>
</itemizedlist>

<figure>
<title>Java</title>

<graphic fileref="Nordfalk1215435.&magic;" scale="60"></graphic>
</figure>
</sect3>

<sect3>
  <title>Flere vink</title>

<para>
Det er bedst at du bruger hovedet og kun ser på dem hvis du
er gået i stå.
</para>

<orderedlist>
  <listitem>

<para>

Prøve programmetHar du ikke allerede i sidste
  lektion prøvet matadorspillet, så prøv at køre
  programmet. Derefter er det naturligvis meget lettere at lave
  en grafisk udgave! Brug trinvis gennemgang (trace into/step over),
  indtil du føler, du har forstået programkoden. Først
  da er du klar til at prøve i en applet.
</para>

</listitem>

  <listitem>

<para>
Struktur i en appletOpret en applet, eller genbrug
  MinApplet ovenfor. Flyt initialiseringen fra SpilMatador.java
  til init()-metoden eller konstruktøren. Husk at importere
  java.util.* øverst for at få adgang til Vector-klassen.
  Variablerne felter, sp1, sp2 skal nu være objektvariabler
  (før var de lokale variabler), for at de kan ses i resten af
  appletten:
</para>

</listitem>
</itemizedlist>

<screen>
import java.awt.*;
import java.applet.*;
import java.util.*;
public class MatadorApplet extends Applet  
{ 
<emphasis>  // objektvariabler:</emphasis>
  Spiller sp1=new Spiller(&quot;Søren&quot;,50000,Color.green); <emphasis>   // opret spiller 1 </emphasis>
  Spiller sp2=new Spiller(&quot;Gitte&quot;,50000,Color.yellow);<emphasis>   // opret spiller 2 </emphasis>
  Vector felter=new Vector(); 
  public MatadorApplet()<emphasis>                        // eller &quot;public void init()&quot; </emphasis>
  { 
    felter.addElement(new Start(5000)); 
    felter.addElement(new Gade2(&quot;Gade 1&quot;,10000, 400,1000)); 
    felter.addElement(new Gade2(&quot;Gade 2&quot;,10000, 400,1000)); 
<emphasis>    //... osv. </emphasis>
</screen>


<para>

Husk, at appletten først tegner noget, når
initialiseringen er færdig, så hvis du f.eks. kører
20 runder i initialiseringen, tager det lang tid, førend
systemet når til at kalde paint()!
</para>

<orderedlist>
  <listitem>

<para>

Defin&eacute;r en tur-knapFor at få spillet til at
  køre kan du lave en knap. Når brugeren trykker på
  knappen, så  kald spillernes tur()-metode. (Alternativ:
  kald spillernes tur()-metode inde i paint() og afslut paint() med:
  repaint(1000); dette får systemet til at kalde paint() igen
  efter et sekund).
</para>

</listitem>

  <listitem>

<para>
Hvert felt skal have en position. Føj en position (af
  typen Point) til Felt-klassen:
</para>

</listitem>
</itemizedlist>

<screen>
import java.awt.*; 
public class Felt 
{ 
  String navn; 
  Point position = new Point();
</screen>


<para>
  og defin&eacute;r metoden tegn(Graphics g) på Felt, der
tegner feltets navn på positionen:
</para>

<screen>
  public void tegn(Graphics g) 
  { 
    g.setColor(Color.black); 
    g.drawString(navn,position.x,position.y); 
  }
</screen>


<para>
Husk at importere java.awt.* øverst
for at få adgang til Point- og Graphics-klassen.
</para>

<para>
Løb alle felterne igennem i
init(), og sæt koordinaterne på felterne:
</para>

<screen>
    felter.addElement(new Gade2(&quot;Gade 8&quot;,20000,1100,2000)); 
    felter.addElement(new Gade2(&quot;Gade 9&quot;,30000,1500,2200)); 
    for (int i=0; i&lt;felter.size(); i++)
    {
      double v = Math.PI*2*i/felter.size(); <emphasis>// vinkel i radianer</emphasis>
      Felt f = (Felt) felter.elementAt(i); 
      f.position = new Point( 
        100 + (int) (100*Math.cos(v)),  
        110 + (int) (100*Math.sin(v)) 
      ); 
    }
</screen>

<orderedlist>
  <listitem>

<para>

Defin&eacute;r applettens paint()-metode til at kalde
  felternes tegn() for at tegne brættet:
</para>

</listitem>
</itemizedlist>

<screen>
  public void paint(Graphics g) 
  {
    for (int i=0; i&lt;felter.size(); i++) 
    {
      Felt f = (Felt) felter.elementAt(i); 
      f.tegn(g); 
    }
</screen>


<para>

En grund skal også have tegnet ejeren nedenunder, så den
skal have en anderledes tegn(). Defin&eacute;r tegn() i Grund2. En
gade skal også vise antallet af huse. Defin&eacute;r også
tegn() i Gade2.
</para>

<orderedlist>
  <listitem>

<para>

Find selv på flere ting:
</para>

</listitem>
</itemizedlist>

<itemizedlist mark="bullet">
  <listitem>

<para>

Lav tekstfelter, der beskriver hver spillers beholdning.
</para>

</listitem>

  <listitem>

<para>
Tegn spillernes biler på skærmen .
</para>

</listitem>

  <listitem>

<para>
Automatisk spil (vink: kald spillernes tur()-metode inde
  i paint(). Start paint() med: repaint(1000); dette får
  systemet til at kalde paint() igen efter et sekund).
</para>

</listitem>
</itemizedlist>
</sect3>
</sect2>
</sect1>
</chapter>

