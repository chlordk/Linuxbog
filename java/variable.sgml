<chapter id="java-lok-obj-klasse-var">
  <title>Lokale, objekt- og
klassevariable</title>

<para>
Indhold:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>

Klassevariable
</para>

</listitem>

  <listitem>

<para>
Repetition af objektvariabler og lokale variabler
</para>

</listitem>

  <listitem>

<para>
Rekursion
</para>

</listitem>
</itemizedlist>

<para>
Forudsættes ikke i resten af bogen.
</para>

<para>
Forudsætter <xref linkend="java-klasser" />, Definition af klasser.
</para>

<para>
De variabler, vi er stødt på indtil nu, har enten
været lokale variabler eller objektvariabler.
</para>

<para>
Objektvariabler hedder sådan, fordi de bliver oprettet for
hvert objekt.
</para>

<para>
Der findes også variabler, der eksisterer &quot;i klassen&quot;,
uafhængigt af om der bliver oprettet objekter. Disse kaldes
klassevariable og erklæres med nøgleordet <emphasis>static</emphasis>,
og de kaldes også statiske variabler.
</para>

<para>
Herunder ses et eksempel på en klassevariabel og en
klassemetode (antalBokse).
</para>

<para>
Klassevariabler og -metoder vises med understregning i
UML-notationen (diagrammet til højre).
</para>

<figure id="java-lok-obj-klasse-var-fig">
<title>Java</title>

<graphic fileref="Nordfalk915416.&magic;" scale="60"></graphic>
</figure>

<screen>
public class Boks4 
{
  private double længde;              <emphasis>// objektvariabel</emphasis>
  private double bredde;              <emphasis>// objektvariabel</emphasis>
  private double højde;               <emphasis>// objektvariabel</emphasis>
<emphasis>  private static int antalBokse;      </emphasis><emphasis>// klassevariabel</emphasis>

  public Boks4(double lgd, double b, double h)
  {
<emphasis>    // lgd, b og h er lokale variabler</emphasis>
    længde = lgd;
    bredde = b;
    højde  = h;
    antalBokse = antalBokse + 1;
  }

<emphasis>  public static int læsAntalBokse()   </emphasis><emphasis>// klassemetode</emphasis>
  {
    return antalBokse;
  }

  public double volumen()
  {
<emphasis>    // vol er en lokal variabel</emphasis>
    double vol;
    vol = længde*bredde*højde;
    return vol; 
  }
}
</screen>


<para>
Variablen antalBokse er en klassevariabel, fordi den er
erklæret med static-nøgleordet. Dette betyder, at
variablen er tilknyttet klassen, og at alle Boks-objekter deler den
samme variabel. Der vil eksistere &eacute;n og kun &eacute;n
antalBokse-variabel, uanset om der oprettes 0, 1, 2 eller 100
Boks-objekter.
</para>

<para>
Variablerne bredde, højde og længde er
objektvariabler, fordi hvert Boks-objekt har tilknyttet en af
hver.
</para>

<para>
Og for fuldstændighedens skyld: Variablen vol er
en lokal variabel, fordi den er erklæret lokalt i
volumen-metoden og altså kun eksisterer, når
volumen-metoden udføres. Ligeledes med lgd, b og h: De
eksisterer kun i Boks' konstruktør.
</para>

<para>
En klassemetode er en metode, der er erklæret static. Den
arbejder på klasseniveau (uafhængigt af om der er
skabt nogen objekter) og kan derfor ikke anvende objektvariabler
eller -metoder.
</para>

<para>
Vi kan afprøve Boks4 med:
</para>

<screen>
public class BenytBoks4
{
  public static void main(String args[])
  {
    System.out.println(&quot;Antal bokse: &quot;+ <emphasis>Boks4.læsAntalBokse()</emphasis>);

    Boks4 boksen;
    boksen = new Boks4(2,5,10);

    System.out.println(&quot;Antal bokse: &quot;+ <emphasis>Boks4.læsAntalBokse()</emphasis>);

    Boks4 enAndenBoks, enTredjeBoks;
    enAndenBoks = new Boks4(5,5,10);
    enTredjeBoks = new Boks4(7,5,10);

    System.out.println(&quot;Antal bokse: &quot;+ <emphasis>Boks4.læsAntalBokse()</emphasis>);
  }
}
</screen>

<para>Resultatet bliver:</para>

<screen>
Antal bokse: 0
Antal bokse: 1
Antal bokse: 3
</screen>


<para>
Inde fra objektet bruges statiske variabler og metoder ligesom de
almindelige variabler og metoder. Det ses f.eks. i Boks' konstruktør:
</para>

<screen>
    antalBokse = antalBokse + 1;
</screen>


<sect1 id="java-lok-obj-klasse-var-eksempel">
  <title>Eksempler i standardpakkerne</title>

<para>
Du har allerede benyttet dig af et par statiske metoder
og variabler.
</para>

<sect2 id="java-lok-obj-klasse-var-eksempel-kv">
  <title>Klassevariable</title>

<para>
Der er mange klassevariabler<emphasis>
</emphasis>i standardpakkerne. Af de oftest brugte kan nævnes
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>
Math.PI - værdien af pi
  er en klassevariabel i Math-klassen (pakken java.lang).
</para>

</listitem>

  <listitem>

<para>
System.out - systemoutputtet er et PrintStream-objekt, der
  bl.a. har metoderne print() og println(). Objektet er en
  klassevariabel i System-klassen (pakken java.lang).
</para>

</listitem>

  <listitem>

<para>
Color.black - et Color-objekt, der repræsenterer sort.
  Objektet ligger som en klassevariabel i (selvsamme)
  Color-klasse (pakken java.awt).
</para>

</listitem>
</itemizedlist>

<para>
Som det ses, er klassevariabler nyttige til variabler, der er
tilgængelige overalt. Det er det nærmeste man kommer
globale variabler i Java, som det kendes fra andre
programmeringssprog.
</para>
</sect2>    <!--   Klassevariable -->

<sect2 id="java-lok-obj-klasse-var-eksempel-km">
  <title>Klassemetoder</title>

<para>
Af nyttige klassemetoder
kan nævnes
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>

Matematiske funktioner som Math.random(),
  Math.sin(double&nbsp;x), Math.cos(double&nbsp;x),
  Math.sqrt(double&nbsp;x), Math.abs(double&nbsp;x),
  Math.exp(double&nbsp;x), Math.log(double&nbsp;x), 
  Math.pow(double&nbsp;x,&nbsp;double&nbsp;y),
  Math.max(double&nbsp;x,&nbsp;double&nbsp;y),
  Math.min(double&nbsp;x,&nbsp;double&nbsp;y), ...
</para>

</listitem>

  <listitem>

<para>
Double.parseDouble(String s) returnerer værdien af <emphasis>s</emphasis>
  som et kommatal. Nyttig til at fortolke brugerindtastede tal. F.eks.
  giver Double.parseDouble(&quot;3.553&quot;) tallet 3.553.
</para>

</listitem>

  <listitem>

<para>
Integer.parseInt(String s)
  returnerer værdien af <emphasis>s</emphasis> som et heltal. F.eks. giver
  Integer.parseInt(&quot;13&quot;) tallet 13.
</para>

</listitem>

  <listitem>

<para>
String.valueOf(double d) gør
  det modsatte af Double.parseDouble, den returnerer nemlig en
  streng, som repræsenterer et flydende kommatal.
  String.valueOf(3.21) giver altså strengen &quot;3.21&quot;.
  Findes også med int, byte, char etc. som parameter.
</para>

</listitem>

  <listitem>

<para>
Character.isDigit(character
  t) returnerer true eller false afhængigt af om tegnet <emphasis>t</emphasis>
  er et ciffer. Ligeledes findes Character.isLetter(character t),
  Character.isLetterOrDigit(character t),
  Character.isLowerCase(character t), Character.isUpperCase(character
  t) og Character.isWhitespace(character t). Den sidste undersøger
  om t er et usynligt tegn, f.eks. mellemrum, linjeskift, tabulator.
</para>

</listitem>

  <listitem>

<para>
System.exit() - stopper programudførelsen og afslutter
  Java.
</para>

</listitem>

  <listitem>

<para>
main-metoden, som du selv erklærer, når du
  skriver et program, f.eks. BenytBoks.main(). Når et program
  startes, er det altid main, der kaldes. På dette tidspunkt
  eksisterer der endnu ingen objekter, og main er da også en
  klassemetode. Der oprettes aldrig nogen BenytBoks-objekter!
</para>

</listitem>
</itemizedlist>
</sect2>    <!--   Klassemetoder -->
</sect1>    <!--   Eksempler i standardpakkerne -->

<sect1 id="java-lok-obj-klasse-var-lvogp">
  <title>Lokale variabler og parametre</title>

<para>
Når en metode kaldes, opretter systemet en &quot;omgivelse&quot;
for det metodekald. I denne omgivelse oprettes
parametervariablerne og de lokale variabler.
</para>

<blockquote><para>En lokal variabel er kendt fra dens
erklæring og ned til slutningen af den blok, der omslutter den</para></blockquote>
<blockquote><para>Dette kaldes variablens virkefelt</para></blockquote>

<para>
Den lidt indviklede formulering skyldes, at man kan lave
variabler, der er lokale for en hvilken som helst blok - ikke kun en
metode-krop. Man kan altså skrive noget som:
</para>

<screen>
  ...
  int a=10;
  while (a&gt;0)
  {
    double b; <emphasis>// b erklæres lokalt i while-blokken</emphasis>
    b=math.Random();
    ...
    System.out.println(b);
    a--;
  }
  System.out.println(a);
  System.out.println(b); <emphasis>// fejl: b eksisterer ikke, </emphasis>
<emphasis>                         // fordi vi er uden for blokken.</emphasis>
...
</screen>


<para>
Vi har desuden allerede set, at man i for-løkker kan
erklære en variabel, der er lokal for løkkens krop:
</para>

<screen>
  for (int i=0;i&lt;10;i++) 
    System.out.print(i);

  System.out.print(i); <emphasis>// fejl: i eksisterer ikke uden for løkken.</emphasis>
</screen>


<sect2 id="java-lok-obj-klasse-var-lvogp-pv">
  <title>Parametervariable</title>

<para>
Parametervariablerne får tildelt en <emphasis>kopi</emphasis> af den
værdi, de blev kaldt med, og opfører sig i øvrigt
fuldstændigt som lokale variabler. Man kan f.eks. godt tildele
dem nye værdier:
</para>

<screen>
  ...
<emphasis>  // metode, der udskriver et bestemt antal stjerner på skærmen.</emphasis>
  public void udskrivStjerner(<emphasis>int antal</emphasis>)
  {
    while (antal&gt;0)
    {
      System.out.print(&#148;*&#148;);
      <emphasis>antal=antal-1;</emphasis> <emphasis>// Det kan man godt</emphasis>
    }
    System.out.println();
  }

    ....
<emphasis>    int stj=10;</emphasis>
<emphasis>    udskrivStjerner(stj);</emphasis> <emphasis>// kald af udskrivStjerner</emphasis>
<emphasis><emphasis>    // stj er stadig 10.</emphasis></emphasis>
    ...
</screen>


<para>
Dette mærker kalderen intet til, netop fordi kalderens værdi
blev kopieret. Her skal man være opmærksom på
forskellen mellem variabler af primitiv type og variabler af
objekt-type. Fordi det sidste er referencer, peger parametervariablen
på samme objekt som kalderen, når den bliver
kopieret. Ved at ændre i objektet, som parametervariablen
refererer til, kan man derfor ændre på kalderens objekt.
</para>

<para>
Derfor kan metoden herunder godt ændre på kalderens
punkt-objekt:
</para>

<screen>
  public void flyt(Point p, int dx, int dy)
  {
    p.x=p.x+dx;  <emphasis>// OK, vi ændrer på kalderens objekt</emphasis>
    p.y=p.y+dy;
  }

    ...
    Point p1=new Point();
<emphasis>    p1.x=10;p1.y=10;</emphasis>
<emphasis>    flyt(p1,10,10);</emphasis>
<emphasis><emphasis>    // nu er p1 (20,20)</emphasis></emphasis>
    ...
</screen>


<para>
Men man kan stadig ikke ændre på kalderens reference.
Dvs. p1's værdi:
</para>

<screen>
  public void flyt(Point p, int dx, int dy)
  {
<emphasis>    // hmm... vi glemmer kalderens objekt, men det opdager han ikke</emphasis>
    p=new Point(p.x+dx,p.y+dy); 
  }

    ...
    Point p1=new Point();
<emphasis>    p1.x=10;p1.y=10;</emphasis>
<emphasis>    flyt(p1,10,10);</emphasis>
<emphasis><emphasis>    // nu er p1 stadig (10,10)</emphasis></emphasis>
    ...
</screen>


<para>
En lokal variabel oprettes, når man går ind i blokken,
hvor den er defineret, og nedlægges igen, når man går
ud af blokken. Der bliver oprettet en ny variabel, hver gang
programudførelsen går ind i blokken.
</para>

<para>
Hvis en metode bliver kaldt to gange, eksisterer der altså
to versioner af den lokale variabel - &eacute;n i hver deres
omgivelse. Det behøver man som regel ikke at tænke på,
men det er rart at have vished for at en anden ikke bare kan ændre
ens lokale variabler.
</para>
</sect2>    <!--   Parametervariable -->

<sect2 id="java-lok-obj-klasse-var-lvogp-rekusion">
  <title>Rekursion</title>

<para>
Rekursion er en teknik, der netop udnytter, at der bliver oprettet
en ny omgivelse med nye lokale variabler, hver gang en metode kaldes.
En rekursiv metode er en metode, der kalder sig selv. F.eks.:
</para>

<screen>
  void tælNed(int tæller)
  {
    System.out.print(&#148;(&#148;+tæller+&#148; &#148;);
    if (tæller&gt;=0) <emphasis>tælNed(tæller-1)</emphasis>; <emphasis>// tælNed kalder sig selv !!</emphasis>
    System.out.print(&#148; &#148;+tæller+&#148;)&#148;);
  }
</screen>


<para>
Hvis man kalder tælNed(4), får man udskrevet følgende:
</para>

<screen>
&#148;(4(3 (2 (1 (0  0) 1) 2) 3) 4)&#148;
</screen>


<para>
Fidusen er, at parameteren tæller eksisterer &eacute;n gang
for hver gang, tælNed() kalder sig selv. Så når
tælNed() vender tilbage til kalderen, som også er
tælNed(), er tællers værdi bevaret som før
kaldet.
</para>

<para>
Visse problemstillinger kan løses meget elegant med
rekursion, men vi vil ikke her komme yderligere ind på emnet.
</para>
</sect2>    <!--   Rekursion -->
</sect1>    <!--   Lokale variabler og parametre -->
</chapter>    <!--   Lokale, objekt- og
klassevariable -->

