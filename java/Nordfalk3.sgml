<chapter>
  <title>Introduktion</title>

<sect1>
  <title>xxx</title>

<para>
Indhold:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>

Programmering
</para>

</listitem>

  <listitem>

<para>
Fordele og ulemper ved Java
</para>

</listitem>

  <listitem>

<para>
Værktøjer til at programmere i Java
</para>

</listitem>
</itemizedlist>

<para>
Hvis du har lyst til at komme i gang med at programmere, kan du
springe over dette kapitel.
</para>

<sect2>
  <title>Programmering</title>

<para>
Ethvert program, som f.eks. tekstbehandlingsprogram, regneark,
e-post, tegneprogram, spil, webserver består af nogle data
(f.eks. hjælpefiler og konfigurationsfiler) og en samling
instruktioner til computeren.
</para>

<para>
Hver instruktion er meget simpel, og computeren udfører den
ubetinget, uanset om det er smart eller ej. En computer kan udføre
instruktionerne ekstremt hurtigt (over 1 milliard instruktioner pr.
sekund), og det kan få computeren til at virke smart, selvom
instruktionerne er simple.
</para>

<sect3>
  <title>Styresystemet</title>

<para>
Styresystemet er det program, som styrer computeren, og tillader
brugeren at bruge andre programmer. Af styresystemer kan nævnes
Linux, DOS, Windows, MacOS, OS/2, UNIX.
</para>

<para>
Styresystemet styrer computerens hukommelse og eksterne enheder
 som skærm, tastatur, mus, disk, printere og netværksadgang. 
Det tilbyder tjenester til programmerne, f.eks. muligheden for
 at læse på disken eller tegne en grafisk brugergrænseflade.
</para>

<para>
Et program kan normalt kun køre på et bestemt styresystem. 
Javaprogrammer kan dog køre på flere styresystemer, og de 
bruges derfor bl.a. som programmer, der automatisk hentes 
ned til brugerens web-browser, og afvikles der. Den type 
programmer kaldes appletter eller miniprogrammer.
</para>
</sect3>    <!--   Styresystemet -->

<sect3>
  <title>Hvorfor lære at programmere?</title>

<para>
Det er sjovt og spændende, og kan være en kilde til
kreativitet og leg at skabe sine egne programmer. Man kan bedre
forestille sig nye løsninger og produkter, og man får
bedre kendskab til computeres formåen og begrænsninger.
</para>

<para>
Desuden er det et håndværk, der er efterspurgt blandt
IT-virksomheder og mange andre. Ved hjælp af programmering kan
du løse problemer, og du er dermed ikke mere afhængig
af, at andre laver et program, der opfylder dine behov.
</para>

<para>
Programmering er en af datalogiens helt basale discipliner, og
selv om man ikke arbejder som programmør, kan kendskab til
programmering være en stor fordel i mange beslægtede fag.
</para>

<para>
Java er et sprog, der har stor udbredelse såvel i industrien som i
akademiske kredse. Det er kraftfuldt og relativt let lært.
Lærer du Java, har du et godt fundament til at lære
andre programmeringssprog.
</para>
</sect3>    <!--   Hvorfor lære at programmere? -->

<sect3>
  <title>Et simpelt program</title>

<para>
For at computeren kan arbejde, skal den have nogle instruktioner, 
den kan følge slavisk. For at lægge to tal, som brugeren oplyser, 
sammen kunne man forestille sig følgende opskrift:
</para>

<screen>
  1   Skriv &quot;Indtast første tal&quot; på skærmen
  2   Læs tal fra tastaturet
  3   Gem tal i lagerplads A
  4   Skriv &quot;Indtast andet tal&quot; på skærmen
  5   Læs tal fra tastaturet
  6   Gem tal i lagerplads B
  7   Læg indhold af lagerplads A og indhold af lagerplads B sammen
  8   Gem resultat i lagerplads C
  9   Skriv &quot;Summen er:&quot; på skærmen
  10  Skriv indhold af lagerplads C på skærmen
</screen>


<para>
Et program minder lidt om en kogebogsopskrift, som computeren
følger punkt for punkt ovenfra og ned. Hvert punkt (eller
instruktion eller kommando) gøres færdigt, før
der fortsættes til næste punkt.
</para>
</sect3>    <!--   Et simpelt program -->

<sect3>
  <title>Hvordan lærer man at programmere</title>

<para>
Man lærer ikke at programmere blot ved at læse en bog. Har 
man ikke tid til at øve sig og eksperimentere med det man 
læser om, spilder man bare sin tid. 
For de fleste kræver det en stor arbejdsindsats at lære
at programmere, og for alle tager det lang tid, før de
bliver rigtig dygtige til det.
</para>

<blockquote><para>Der er kun én måde at
lære at programmere på: Øv dig</para></blockquote>

<para>
Der er blevet lavet forskning, der underbygger dette. P.M. Cheney
konkluderer,
at den eneste betydende faktor i produktiviteten for programmører
er: Erfaring. Han fandt i øvrigt forskelle i
produktiviteten på en faktor 25.
</para>

<para>
Artiklen
  hedder 'Effects of Individual Characteristics, Organizational
  Factors and Task Characteristics on Computer Programmer
  Productivity and Job Satisfaction' og kan findes i Information
  and Management, 7, 1984.
</para>


</sect3>    <!--   Hvordan lærer man at programmere -->
</sect2>    <!--   Programmering -->

<sect2>
  <title>Fordele og ulemper ved Java</title>

<para>
Java er et initiativ til at skabe et programmeringssprog, der kan
køre på flere styresystemer. Det er udviklet af Sun
Microsystems, der i 1991 arbejdede med at designe et
programmeringssprog, der var velegnet til at skrive programmer
til fremtidens telefoner, fjernsyn, opvaskemaskiner og andre
elektroniske apparater. Sådanne programmer skal være
meget kompakte (begrænset hukommelseslager) og fejlsikre
(risikoen for, at apparatet ikke virker skal være
minimal).
</para>

<para>
Med udviklingen af internettet blev Java samtidig meget udbredt,
fordi teknologien bl.a. tillader, at små programmer kan lægges
ind i en hjemmeside (se kapitlet om appletter).
</para>

<para>
Det har på kort tid udviklet sig til at være
fremherskende på grund af dets egenskaber. Java er et
enkelt, objektorienteret, robust, netværksorienteret,
platformuafhængigt, sikkert, fortolket, højtydende,
flertrådet og dynamisk sprog.
</para>



<sect3>
  <title>Enkelt</title>
<para>
Java er i forhold til andre programmeringssprog et ret enkelt sprog, og det er forholdsvis nemt at programmere (specielt for C++ og C-programmører). Mange af de muligheder for at lave fatale fejl, der eksisterer i andre programmeringssprog, er fjernet i Java.
</para>
</sect3>



<sect3>
  <title>Objektorienteret</title>
<para>
Samtidig kommer det med over 1000 foruddefinerede objekt-typer, som kan udføre næsten enhver tænkelig opgave. Præcist hvad "objektorienteret" betyder handler denne bog om.
</para>
</sect3>




<sect3>
  <title>Platformuafhængigt</title>
<para>
Java er platformuafhængigt. Det vil sige, at samme program umiddelbart kan udføres på mange forskellige styresystemer, f.eks. UNIX, Linux, Mac og Windows,  og processor-typer f.eks. Intel IA32, PowerPC og Alpha. 
</para>
</sect3>



<sect3>
  <title>Netværksorienteret</title>
<para>
Java har indbygget alskens netværkskommunikation (se kapitlet om netværk), og bruges meget på internettet, da javaprogrammer kan køre på næsten alle platforme. Samtidig er Javaprogrammer så kompakte, at de nemt kan indlejres i en hjemmeside.
</para>
</sect3>




<sect3>
  <title>Fortolket</title>
<para>
Kildeteksten oversættes til en standardiseret platformuafhængig kode (kaldet bytekode), som derefter udføres af en javafortolker på det enkelte styresystem. Derved opnås, at man kun behøver at oversætte sin kildetekst én gang. Javafortolkeren er en såkaldt virtuel maskine, der konverterer instruktionerne i bytekoden til instruktioner, som det aktuelle styresystem kan forstå.
</para>
</sect3>




<sect3>
  <title>Højtydende</title>
<para>
De nuværende fortolkere tillader javaprogrammer at blive udført næsten lige så hurtigt, som hvis de var blevet oversat direkte til det pågældende styresystem.
<!-- JN: det er faktisk rigtigt! Det der tager tid er når man begynder
     at bruge objekter i den store stil. -->
</para>
</sect3>




<sect3>
  <title>Flertrådet</title>
<para>
Java er designet til at udføre flere forskellige programdele samtidigt, og en programudførsel kan blive fordelt over flere CPU'er  (se kapitlet om flertrådet programmering).
</para>
</sect3>




<sect3>
  <title>Robust</title>
<para>
Java er også robust; under afviklingen af et program tjekkes det, at handlingerne er tilladelige, og opstår der en fejl, såsom en ønsket fil ikke kan findes, erklærer Java, at der er opstået en undtagelse. I mange andre sprog vil sådanne uventede fejl føre til, at programmet stopper. I Java har man let adgang til at fange og håndtere disse undtagelser, så programmet alligevel kan køre videre (se kapitlet om undtagelser).
</para>
</sect3>




<sect3>
  <title>Sikkert</title>
<para>
Et sikkerhedssystem tjekker al programkode og sørger for, at bl.a. hjemmesider med Java-appletter ikke kan gøre ting, de ikke har lov til (f.eks. læse eller ændre i brugerens filer), uden at brugeren selv har givet tilladelse til det.
</para>
</sect3>




<sect3>
  <title>Dynamisk</title>
<para>
Java kan dynamisk (i et kørende program) indlæse ekstra programkode fra netværket og udføre den, når det er nødvendigt, og der er indbygget mekanismer til at lade programmer på forskellige maskiner dele dataobjekter (se eksempelvis kapitlet om RMI).
</para>
</sect3>


<sect3>
  <title>Stor opbakning</title>

<para>
Ovenstående egenskaber gør, at Java også har vundet stor udbredelse i serversystemer de seneste år, og Java understøttes i dag af næsten alle større softwarefirmaer, f.eks. IBM, Oracle, Borland, Netscape.

</para>

<para>
Softwaregiganten Microsoft er en undtagelse. Microsoft blev i efteråret
2000 kendt skyldig ved domstolen i USA for ulovligt at misbruge sin
monopollignende magt på PC-markedet for at skade bl.a. Java.
Sagen blev naturligvis anket, og det er i skrivende stund uvist
hvad den ender med.
</para>

<para>
Microsoft er ikke interesseret i, at programmerne kan udføres
under andre styresystemer end Windows. De har lavet deres egen udgave
af Java, der kun virker under Windows, og har (uden større
held) forsøgt at lokke programmører til at bruge den.
</para>
</sect3>    <!--   Stor opbakning -->

<sect3>
  <title>Svagheder ved Java</title>

<para>
Java har også en del kritikere, især blandt de, hvis
forretningsmodel eller område er truet af Java.  Ikke desto
mindre er der nogle gode pointer iblandt:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>

Java kræver hukommelse (RAM). Store Javaprogrammer kan
  kræve så meget, at de har problemer med at køre
  på mindre kontor-PC'ere.
</para>

</listitem>

  <listitem>

<para>
Java skal installeres på en computer, før den
  kan afvikle javaprogrammer. Hvis man vil distribuere sit program,
  skal man således pakke en version af Java med.
</para>

</listitem>

  <listitem>

<para>
Sun Microsystems ejer Java, og nogle frygter, at det vil
  udvikle sig til et monopol som med Microsoft. Indtil videre har de
  dog opført sig eksemplarisk og bl.a. frigivet hele
  kildeteksten til Java, og derudover findes der andre uafhængige
  udgaver af Java.
</para>

</listitem>

  <listitem>

<para>
Java satser på at være platformuafhængigt,
  men der er alligevel små forskelle på de forskellige
  platforme. Dette gælder specielt ved programmering af grafiske
  brugergrænseflader. Det kræver erfaring og test at
  sikre sig, at ens program virker tilfredsstillende på
  flere platforme. Dette er ikke kun et Java-relateret problem,
  designere af hjemmesider har tilsvarende problemer. Java gør
  det nemmere at skrive platformuafhængige programmer, men
  det løser ikke alle problemer for programmøren.
</para>

</listitem>
</itemizedlist>
</sect3>    <!--   Svagheder ved Java -->
</sect2>    <!--   Fordele og ulemper ved Java -->
</sect1> 
</chapter>    <!--   Introduktion -->









