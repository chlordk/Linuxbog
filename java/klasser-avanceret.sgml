<chapter id="java-avancerede-klasser">
<title>Avancerede klasser</title>

<para>
  Indhold:
</para>

<itemizedlist mark="bullet">
  <listitem><para>Nøgleordene public, protected og private forklaret i dybden</para></listitem>
  <listitem><para>Nøgleordet final</para></listitem>
  <listitem><para>Nøgleordet abstract</para></listitem>
  <listitem><para>Nøgleordenes betydning når de anvendes på variabler, metoder ogklasser</para></listitem>
</itemizedlist>

<para>
  Dette kapitels afsnit om final på variabler forudsættes af kapitel 21,
  Indre klasser.
</para>

<para>
  Forudsætter kapitel 5, Nedarvning og 6, Pakker og ønske om at vide
  mere om emner som først bliver relevante når man laver større
  programmer.
</para>

<sect1 id="java-avancerede-klasser-tilgang">
<title>public, protected og private</title>

<para>
  Det er vigtigt at styre adgangen til at kalde metoder og ændre på
  variabler, i særdeleshed når programmerne bliver store. Det kan lette
  overskueligheden meget hvis interne variabler, metoder og klasser er
  skjult for programmøren.
</para>

<para>
  Adgang styres med nøgleordene public, protected og private.
  Adgangskontrol ud over public/private bliver først interessant når der
  er mange klasser og programmet spænder over flere pakker. Se eventuelt
  kapitlet om pakker.
</para>

<sect2 id="java-avancerede-klasser-tilgang-var-metode">
<title>Variabler og metoder</title>

<para>
  Variabler og metoder erklæret <emphasis>public</emphasis> er altid
  tilgængelige, inden og uden for klassen.
</para>

<para>
  Variabler og metoder erklæret <emphasis>protected</emphasis> er
  tilgængelige for alle klasser inden for samme pakke. Klasser i andre
  pakker kan kun få adgang, hvis de er nedarvinger.
</para>

<para>
  Skriver man <emphasis>ingenting</emphasis>, er det kun klasser i samme
  pakke, der har adgang til variablen eller metoden.
</para>

<para>
  Hvis en variabel eller metode er erklæret
  <emphasis>private</emphasis>, kan den kun benyttes inden for samme
  klasse (og kan derfor ikke tilsidesættes med nedarvning). Det er det
  mest restriktive.
</para>

<para>
  Adgangen kan sættes på skemaform:
</para>

<table>
<title>Adgangsregler</title>
<tgroup cols="5" align="left" colsep="1" rowsep="1">

<thead>
<row>
  <entry><para>Adgang</para></entry>
  <entry><para>public</para></entry>
  <entry><para>protected</para></entry>
  <entry><para>(ingenting)</para></entry>
  <entry><para>private</para></entry>
</row>
</thead>

<tbody>
<row>
  <entry><para>i samme klasse</para></entry>
  <entry><para>ja</para></entry>
  <entry><para>ja</para></entry>
  <entry><para>ja</para></entry>
  <entry><para>ja</para></entry>
</row>
<row>
  <entry><para>klasse i samme pakke</para></entry>
  <entry><para>ja</para></entry>
  <entry><para>ja</para></entry>
  <entry><para>ja</para></entry>
  <entry><para>nej</para></entry>
</row>
<row>
  <entry><para>arving i en anden pakke</para></entry>
  <entry><para>ja</para></entry>
  <entry><para>ja</para></entry>
  <entry><para>nej</para></entry>
  <entry><para>nej</para></entry>
</row>
<row>
  <entry><para>ej arving og i en anden pakke</para></entry>
  <entry><para>ja</para></entry>
  <entry><para>nej</para></entry>
  <entry><para>nej</para></entry>
  <entry><para>nej</para></entry>
</row>
</tbody>

</tgroup>
</table>

<para>
  Holder man sig inden for samme pakke, er der altså ingen
  forskel mellem public, protected og ingenting.
</para>
</sect2>    <!--   Variabler og metoder -->

<sect2 id="java-avancerede-klasser-tilgang-klasser">
<title>Klasser</title>

<para>
  Klasser kan erklæres public eller ingenting (men ikke
  protected eller private).
</para>

<para>
  Klasser erklæres normalt public og er tilgængelige fra
  alle pakker.
</para>

<screen>
<emphasis>public</emphasis> class X
<prompt>{</prompt>
<emphasis>  // ...</emphasis>
<prompt>}</prompt>
</screen>

<para>
  Undlader man public, er klassen kun tilgængelig inden for
  samme pakke.
</para>

<screen>
<prompt>class X</prompt>
<prompt>{</prompt>
<emphasis>  // ...</emphasis>
<prompt>}</prompt>
</screen>

<para>
  Man kan have flere klasser i en fil, men højst en, der er
  public, og denne klasse skal hedde det samme som filnavnet.
</para>
</sect2>    <!--   Klasser -->
</sect1>    <!--   public, protected og private -->

<sect1 id="java-avancerede-klasser-final">
<title>Nøgleordet final</title>

<para>
  Noget, der er erklæret <emphasis>final</emphasis>, kan ikke ændres.
  Både variabler, metoder og klasser kan erklæres
  final.
</para>

<sect2 id="java-avancerede-klasser-final-variable">
<title>Variabler</title>

<para>
  En variabel, der er erklæret <emphasis>final</emphasis>, kan ikke ændres,
  når den først har fået en værdi.
</para>

<screen>
public class X 
{
  public <emphasis>final</emphasis> int a=10;

<emphasis>  //..</emphasis>
<emphasis>  // forbudt: a=11;</emphasis>
}
</screen>

<para>
  Herover kan a's værdi ikke ændres i den efterfølgende
  kode.
</para>

<para>
  Det kan lette overskueligheden at vide, hvilke variabler, der er
  konstante. Desuden udføres programmet lidt hurtigere.
</para>

<para>
  final foran en objektvariabel angiver ikke synlighed, men kan
  bruges sammen med public, protected og private.
</para>

<para>
  final kan også bruges på lokale variabler (hvor
  public, protected og private aldrig kan bruges):
</para>

<screen>
  public static void main(String args[])
  {
    <emphasis>final</emphasis> Vector v = new Vector();

<emphasis>    //v = new Vector();  // ulovligt! v kan ikke ændres.</emphasis>
</screen>

<para>
  Bemærk: Når vi arbejder med objekter, er variablerne
  jo referencer til objekterne. En variabel erklæret final
  kan ikke ændres til at referere til et andet objekt, men
  objektet kan godt få ændret sin indre tilstand, f.eks.
  gennem et metodekald:
</para>

<screen>
    v.addElement(&quot;Hans&quot;);<emphasis>  // lovligt, v refererer stadig til samme objekt</emphasis>
</screen>
</sect2>    <!--   Variabler -->

<sect2 id="java-avancerede-klasser-final-metoder">
<title>Metoder</title>

<para>
  En metode erklæret final kan ikke tilsidesættes i en
  nedarving.
</para>

<screen>
public class X 
{
  public <emphasis>final</emphasis> void a()
  {
<emphasis>    // ..</emphasis>
  }
}
</screen>

<para>og</para>

<screen>
public class Y extends X 
{
  public void a()<emphasis> // ulovligt! a() er final</emphasis>
  {
<emphasis>    //..</emphasis>
  }
}
</screen>

<para>
  Den virtuelle maskine kan optimere final metoder, så kald
  til dem sker en smule hurtigere.
</para>
</sect2>    <!--   Metoder -->

<sect2 id="java-avancerede-klasser-final-klasser">
<title>Klasser</title>

<para>
  En klasse erklæret final må man overhovedet ikke arve
  fra (og alle dens metoder bliver final).
</para>

<screen>
public <emphasis>final</emphasis> class X 
{
<emphasis>  // ..</emphasis>
}
</screen>

<para>og</para>

<screen>
public class Y extends X<emphasis>  // ulovligt! X er final</emphasis>
{
}
</screen>
</sect2>    <!--   Klasser -->
</sect1>    <!--   Nøgleordet final -->

<sect1 id="java-avancerede-klasser-abstract">
<title>Nøgleordet abstract</title>

<para>
  Noget der er erklæret <emphasis>abstract</emphasis> er ikke implementeret
  og skal defineres i en nedarvning.
</para>

<para>
  Det skrives i kursiv i UML-notationen.
</para>

<sect2 id="java-avancerede-klasser-abstract-klasser">
  <title>Klasser</title>

<para>
  En abstrakt klasse erklæres således
</para>

<screen>
public <emphasis>abstract</emphasis> class X 
{
  public void a()
  {
<emphasis>    //..</emphasis>
  }
}
</screen>

<para>
  Det er ikke tilladt at oprette objekter fra en abstrakt klasse
</para>

<screen>
  public static void main(String args[])
  {
    X x = new X();<emphasis>   // ulovligt! X er abstrakt</emphasis>
</screen>

<para>
  I stedet skal man arve fra klassen
</para>

<screen>
public class Y extends X 
{
}
</screen>

<para>
  og lave objekter fra den nedarvede klasse:
</para>

<screen>
  public static void main(String args[])
  {
    X x;            <emphasis>// lovligt</emphasis>

    x = new Y();    <emphasis>// lovligt, Y er ikke abstrakt</emphasis>
</screen>

<para>
  Basisklasserne for IO-systemet, InputStream og OutputStream,
  abstrakte, fordi programmøren altid skal bruge en mere
  konkret klasse, f.eks. FileInputStream (se afsnit 14.5.2).
</para>

<para>
  Det er lovligt (og nyttigt i visse tilfælde) at have
  variabler af en abstrakt klasse (det svarer til, at det er lovligt og
  nyttigt at have variabler af en interface-type).
</para>
</sect2>    <!--   Klasser -->

<sect2 id="java-avancerede-klasser-final-metoder2">
<title>Metoder</title>

<para>
  En metode erklæret abstract har et metodehoved, men ingen
  krop. Den kan kun erklæres i en abstrakt klasse
</para>

<screen>
public abstract class X 
{
  public <emphasis>abstract</emphasis> void a();
}
</screen>

<para>
  Nedarvede klasser skal definere de abstrakte metoder (eller også
  selv være abstrakte)
</para>

<screen>
public class Y extends X 
{
  public void a()
  {
<emphasis>    //..</emphasis>
  }
}
</screen>
</sect2>    <!--   Metoder -->
</sect1>    <!--   Nøgleordet abstract -->
</chapter>    <!--   Avancerede klasser -->

