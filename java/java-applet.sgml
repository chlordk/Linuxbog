<chapter id="java-applet">
  <title>Appletter og grafik</title>

<para>
Indhold:
</para>

<itemizedlist mark="bullet">
  <listitem>

<para>

At lægge Java i en hjemmeside
</para>

</listitem>

  <listitem>

<para>
At tegne simpel grafik
</para>

</listitem>

  <listitem>

<para>
Metoder i en applet
</para>

</listitem>
</itemizedlist>

<para>
Kapitlet forudsættes af <xref linkend="java-gui" />, Grafiske brugergrænseflader
og <xref linkend="java-interface" />, Interfaces.
</para>

<para>
Forudsætter <xref linkend="java-obj" />, Objekter (<xref linkend="java-klasser" />, Definition af klasser og
<xref linkend="java-arv" />, Nedarvning er en fordel).
</para>

<para>
En applet er et javaprogram i en hjemmeside. Når siden
vises, vil browseren (fremviseren af HTML-dokumentet) hente
javaprogrammet og udføre det på brugerens maskine. Ordet
applet giver mange associationer til &quot;en lille applikation&quot;.
</para>

<sect1 id="java-applet-html-dok">
  <title>HTML-dokumentet</title>

<para>
Hjemmesider skrives i et sprog, der hedder HTML. En hjemmeside med
en applet vil have en HTML-kode, der henviser til, hvor
browseren skal finde programkoden. Det ser sådan her ud:
</para>

<screen>
  &lt;applet code=&quot;MinApplet.class&quot; width=400 height=300&gt; &lt;/applet&gt;
</screen>


<para>
Her blev angivet, at appletten hedder MinApplet, og den skal være
400 punkter bred og 300 høj. MinApplet.class, den binære
kode fra MinApplet.java, skal ligge i samme katalog som hjemmesiden.
</para>

<para>
HTML-koder er skrevet mellem &lt; og &gt;. Et helt HTML-dokument
med en applet kunne se sådan her ud:
</para>

<screen>
&lt;HTML&gt;
&lt;HEAD&gt;
        &lt;TITLE&gt;Min applet&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
        Velkommen til min første applet!&lt;BR&gt;

        &lt;APPLET
          CODEBASE = &quot;.&quot;
          CODE     = &quot;MinApplet.class&quot;
          WIDTH    = 400
          HEIGHT   = 300&gt;
        &lt;/APPLET&gt;

        Slut herfra!
&lt;/BODY&gt;
&lt;/HTML&gt;
</screen>


<para>
For mere viden om HTML henvises til de mange introduktioner til,
hvordan man laver hjemmesider. 
</para>
</sect1>

<sect1 id="java-applet-java-koden">
  <title>Javakoden</title>

<para>
Selve javaprogrammet er en klasse, der arver fra Applet. Her skal
paint()-metoden, som kaldes når appletten skal tegnes på
skærmen, defineres. Til dette formål får paint() et
Graphics-objekt (beskrevet i <xref linkend="java-applet-appendix-graphics" />) overført, som vi kan
tegne med.
</para>

<para>
I eksemplet nedenfor tegner vi en linje, en fyldt oval og noget
tekst med grøn skrift.
</para>

<screen>
import java.awt.*;
import java.applet.*;

public class MinApplet <emphasis>extends Applet</emphasis>
{
<emphasis>  public void paint(Graphics g)</emphasis>
  {
<emphasis>    // Herunder referer g til et Graphics-objekt man kan tegne med.</emphasis>
<emphasis>    g.drawLine(10,10,50,70);</emphasis>

<emphasis>    g.fillOval(5,5,300,50);</emphasis>

<emphasis>    g.setColor(Color.green);</emphasis>

<emphasis>    g.drawString(&quot;Hej grafiske verden!&quot;,100,30);</emphasis>
  }
}
</screen>


<para>
Her ses, hvordan HTML-koden med appletten ser ud i en browser
(Netscape under Linux).
</para>

<figure id="java-applet-html">
<title>Java</title>

<graphic fileref="Nordfalk1115417.&magic;" scale="60"></graphic>
</figure>

<para>
Man ser, at først kommer HTML-teksten &quot;Velkommen til
...&quot;, derunder appletten og nederst igen noget tekst fra
HTML-koden.
</para>

<sect2 id="java-applet-java-koden-bruger-metoder">
  <title>Metoder i appletter, som du kan kalde</title>

<para>
Den vigtigste metode er repaint(), som forårsager, at
appletten bliver gentegnet (ved, at systemet kalder paint()).
</para>

<para>
Andre rare metoder er getImage(), der giver dig mulighed for at
indlæse grafik, og getSize(), der giver applettens størrelse.
De er beskrevet i appendiks senere i kapitlet (<xref linkend="java-applet-appendix-bruger-metoder" />).
</para>
</sect2>

<sect2 id="java-applet-java-koden-system-metoder-">
  <title>Metoder i appletter, som systemet kalder</title>

<para>
En applet skal spille sammen med HTML-koden og fremvisningen. Der
ligger faktisk et stort maskineri bagved, der sørger for, at
den bliver vist korrekt og får relevante oplysninger om,
hvad brugeren gør. Derfor har appletter en række
metoder, som kan tilsidesættes efter behov.
</para>

<para>
Den vigtigste er paint(), som systemet kalder, hver gang der er
behov for at tegne appletten, f.eks. hvis den har været
dækket af et andet vindue.
</para>

<para>
En anden er init(), der kaldes, når appletten indlæses
som en del af HTML-dokumentet. Metoden bliver kun kaldt &eacute;n
gang, så det er en god idé at placere programkode, der
opretter objekter og initialiserer programmet, i init(). Da
appletten er et objekt, kan man selvfølgelig også
gøre det i konstruktøren, men da skal man være
opmærksom på, at de metoder du kan kalde (f.eks.
repaint() og getSize()), ikke har nogen virkning, da applettens
omgivelser ikke er blevet initialiseret endnu.
</para>

<para>
Det er en god idé at initialisere variabler og oprette objekter i
init()-metoden, og kun have selve gentegningen i paint().
</para>
</sect2>

<sect2 id="java-applet-java-koden-eksempel">
  <title>Eksempel</title>

<para>
Her er et program, der tegner en kurve over sinus-funktionen.
</para>

<para>
Det definerer init()-metoden, hvor det udregner koordinater for
alle punkterne, der skal tegnes (her bruger vi getSize() for at vide,
hvor stor appletten er).
</para>

<para>
Vi tegner punkterne i paint(), der er gjort så lille og
hurtig som muligt (den kaldes jo hver gang appletten bliver
gentegnet).
</para>

<para>
Punkterne huskes i en vektor, der er defineret som objektvariabel,
sådan at den er kendt, så længe
Kurvetegning-objektet findes. På den måde får vi
data fra init() over til paint().
</para>

<screen>
import java.util.*;
import java.awt.*;
import java.applet.*;

public class Kurvetegning extends Applet 
{
  <emphasis>Vector punkter</emphasis>; <emphasis>// objektvariabel kendt i både init() og paint()</emphasis>

<emphasis>  public void init()</emphasis>  <emphasis>// Forbered punkterne</emphasis>
  {
    punkter = new Vector();
    int br = <emphasis>getSize().width</emphasis>;  <emphasis>// applettens bredde</emphasis>
    int hø = <emphasis>getSize().height</emphasis>; <emphasis>// applettens højde</emphasis>

    for (int i=0; i&lt;br; i++)
    {
      double y = 0.5*hø - 0.4*hø*Math.sin((double) i*20 / br);
      punkter.addElement(new Point(i, (int) y ));
    }
  }

<emphasis>  public void paint(Graphics g)</emphasis> <emphasis>// tegn punkterne</emphasis>
  {
    for (int i=0; i&lt;punkter.size(); i=i+1)
    {
      Point p = (Point) punkter.elementAt(i);
      g.drawRect(p.x, p.y, 5, 5);
    }
  }
}
</screen>


<figure id="java-applet-kurvetegning">
<title>Java</title>

<graphic fileref="Nordfalk1115418.&magic;" scale="60"></graphic>
</figure>
</sect2>
</sect1>

<sect1 id="java-applet-opgaver">
  <title>Opgaver</title>
<orderedlist>
  <listitem>

<para>

Lav en applet, der viser et digitalur som tekst (vink: Brug
  et Date-objekt).
</para>

</listitem>

  <listitem>

<para>
Lav en applet, der viser et analogt ur.
</para>

</listitem>
</orderedlist>

</sect1>

<sect1 id="java-applet-appendix">
<title>Appendiks</title>

<para>
Appletter har nogle metoder, som det kan være nyttigt at
kende. De er delt i to grupper, nemlig dem <emphasis>du kan kalde</emphasis>, og
dem <emphasis>systemet kalder</emphasis>, og som du kan omdefinere for at få
udført noget af din kode, når de kaldes.
</para>

<sect2 id="java-applet-appendix-bruger-metoder">
  <title>Metoder i appletter, som du kan kalde</title>

<para>
Disse metoder står til din rådighed, når du
programmerer appletter. Det er kun de vigtigste af metoderne,
der er gengivet (se Javadokumentationen for Applet og Component for
en komplet liste).
</para>

<para>
<emphasis>Nogle af Applet-klassens
metoder</emphasis>
</para>

<para>
<emphasis>repaint</emphasis>(int
millisekunder)forårsager at systemet kalder paint() på
appletten lidt senere.
</para>

<para>
Dimension <emphasis>getSize</emphasis>()returnerer
applettens højde og bredde i et Dimension-objekt (der har
variablerne width og height).
</para>

<para>
URL
<emphasis>getCodeBase</emphasis>()giver URL'en til CODEBASE, dvs. hvor
.class-filen er.
</para>

<para>
URL
<emphasis>getDocumentBase</emphasis>()giver URL'en til der, hvor
HTML-dokumentet ligger.
</para>

<para>
AudioClip
<emphasis>getAudioClip</emphasis>(URL url, String filnavn)returnerer et
lydklip-objekt, typisk fra en .wav-fil.
</para>

<para>
Image
<emphasis>getImage</emphasis>(URL url, String filnavn)returnerer et
billede-objekt, typisk fra en .&magic; eller .&magic;-fil.
</para>

<para>
String <emphasis>getParameter</emphasis>(String
parameternavn)returnerer den pågældende
parameterværdi, hvis den er defineret i HTML-koden, ellers
null. En parameter sættes med &lt;PARAM name=&quot;navn&quot;
value=&quot;værdi&quot;&gt; før &lt;/APPLET&gt;.
</para>
</sect2>

<sect2 id="java-applet-appendix-system-metoder">
  <title>Metoder, som systemet kalder</title>

<para>
Appletter har en række metoder, som du selv kan definere, og
som systemet vil kalde.
</para>

<screen>
  public void paint(Graphics g)
</screen>

<para>
Her programmerer du, hvordan appletten skal se ud på skærmen
ved at kalde metoder på Graphics-objektet g (dets metoder er
forklaret i næste afsnit).
</para>

<para>
Metoden kaldes af systemet, hver gang der er behov for at gentegne
en del eller hele appletten. Det kan være ret så
ofte, så man bør have så lidt kode som muligt her,
så metoden kan udføres hurtigt.
</para>

<screen>
  public void init()
</screen>

<para>

Kaldes, når fremviseren indlæser HTML-dokumentet og
appletten. Her kan du lægge kode, der initialiserer
programmet. init() bliver kun kaldt &eacute;n gang.
</para>

<screen>
  public void start()
</screen>

<para>

Kaldes, når appletten bliver synlig. Normalt sker det lige
efter init(), men hvis HTML-dokumentet er meget stort, og
appletten er i bunden af dokumentet, kan det være, den ikke er
synlig med det samme. Så kaldes start() først, når
appletten bliver synlig for brugeren. start() kan godt blive kaldt
flere gange, hvis appletten skjules og bliver synlig igen.
</para>

<screen>
  public void stop()
</screen>

<para>

Kaldes, når appletten bliver skjult. Det kan være, fordi
vinduet bliver minimeret, eller fordi brugeren går til et
andet dokument. Ligesom start() kan stop() godt blive kaldt flere
gange.
</para>

<screen>
  public void destroy()
</screen>

<para>

Kaldes, når appletten smides væk af fremviseren, fordi
brugeren er gået til et andet dokument eller har lukket
vinduet. destroy() bliver kun kaldt &eacute;n gang. Er der noget, der
er vigtigt at få gjort inden programmet afsluttes, kan du
lægge kode til at gøre det i destroy().
</para>
</sect2>

<sect2 id="java-applet-appendix-graphics">
  <title>Klassen Graphics</title>

<para>
Graphics er beregnet til at tegne grafik (på skærm
eller printer). Man skal ikke selv oprette Graphics-objekter med new,
i stedet får man givet et &quot;i hånden&quot;, når
styresystemet afgører, at vinduet skal tegnes op.
Herunder gengives kun nogle af metoderne - se Javadokumentationen
for en komplet liste.
</para>

<para>
<emphasis>java.awt.Graphics -
todimensional grafiktegning</emphasis>
</para>

<para>
<emphasis>Metoder</emphasis>
</para>

<para>
void
<emphasis>drawLine</emphasis>(int x1, int y1, int x2, int y2)
</para>

<para>
  tegner
en linje mellem punkterne (x1, y1) og (x2, y2).
</para>

<para>
void
<emphasis>drawRect</emphasis>(int x, int y, int bredde, int højde)
</para>

<para>
  tegner
omridset af et rektangel.
</para>

<para>
void
<emphasis>drawString</emphasis>(String tekst, int x, int y)
</para>

<para>
  tegner
tekst med øverste venstre hjørne i (x,y).
</para>

<para>
void
<emphasis>drawOval</emphasis>(int x, int y, int bredde, int højde)
</para>

<para>
  tegner
en oval med øverste venstre hjørne i (x,y). Er
bredde==højde, tegnes en cirkel.
</para>

<para>
void
<emphasis>drawArc</emphasis>(int x, int y, int bredde, int højde, int
startvinkel, int vinkel)
</para>

<para>
  tegner
en del af en oval, men kun buen fra <emphasis>startvinkel</emphasis>
og <emphasis>vinkel</emphasis> grader rundt (mellem 0 og 360).
</para>

<para>

void <emphasis>fillRect</emphasis>(int x, int y, int bredde, int højde)
</para>

<para>

  tegner et udfyldt rektangel.
</para>

<para>
void
<emphasis>fillOval</emphasis>(int x, int y, int bredde, int højde)
</para>

<para>
  tegner
en udfyldt oval med øverste venstre hjørne i (x,y). Er
bredde==højde, tegnes en cirkel.
</para>

<para>
void
<emphasis>fillArc</emphasis>(int x, int y, int bredde, int højde, int
startvinkel, int slutvinkel)
</para>

<para>
  tegner
en udfyldt del af en oval, men kun fra <emphasis>startvinkel</emphasis>
til <emphasis>slutvinkel</emphasis> (mellem 0 og 2 pi).
</para>

<para>
Rectangle
<emphasis>getClipBounds</emphasis>()
</para>

<para>
  giver
grafik-objektets klipnings-omrids. Kun punkter inden for dette omrids
bliver faktisk tegnet, ting uden for omridset bliver beskåret
til den del, der er inden for omridset.
</para>

<para>

void <emphasis>setColor</emphasis>(Color nyFarve)
</para>

<para>
  sætter
tegnefarven til nyFarve. Alt bliver herefter tegnet med denne farve.
</para>

<para>

Color <emphasis>getColor</emphasis>()
</para>

<para>

  aflæser tegningsfarven.
</para>

<para>

void <emphasis>setFont</emphasis>(Font nySkrifttype)
</para>

<para>
  sætter
skrifttypen til nySkrifttype. Dette påvirker tekster skrevet
med drawString() herefter.
</para>

<para>

Font <emphasis>getFont</emphasis>()
</para>

<para>
  aflæser
skrifttypen.
</para>

</sect2>
</sect1>
</chapter>


