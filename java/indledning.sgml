<!-- $Id$ -->
<chapter id="java-indledning">
<title>Indledning</title>

<sect1 id="java-indledningen">
<title>Målgrupper</title>

<para>
Denne bog er tiltænkt to målgrupper:
</para>

<itemizedlist mark="bullet">

<listitem><para>
Folk, der aldrig har prøvet at programmere før.
Disse kan starte med <xref linkend="java-basal-prg"/>, Basal programmering og
læse derfra.
</para></listitem>

<listitem><para>
Folk, der allerede kan programmere, og som har brug for
et referenceværk, hvor man kan slå forskellige emner op, og få dem gennemgået
skridt for skridt.
</para></listitem>
</itemizedlist>

<!--
<para>
Der er derfor enkelte afsnit i bogen, som ikke er egnede til en
kronologisk gennemlæsning.
</para>
-->

<para>
Som nybegynder er det vigtigt at du forstå begreber som filsystemet og
kommandolinjen inden du går igang med denne bog. Du kan læse om
disse to emner i de andre Friheden til... bøger.
</para>

</sect1>

<sect1>
<title>Om bogens kilde - http://javabog.dk</title>

<para>
Størstedelen af den bog du læser i lige nu stammer egentligt fra lærebogen
"Objektorienteret programmering i Java" af Jacob Nordfalk.
Den kan findes på adressen <ulink url="http://javabog.dk/">http://javabog.dk</ulink>.
</para>

<para>
I den trykte bog af Jacob Nordfalk findes en del ting som ikke ligger gratis
tilgængelig på nettet, bl.a.:
</para>

<itemizedlist mark="bullet">
<listitem><para>
"Test dig selv"-afsnit hvor man kan tjekke om man har forstået det væsentligste.
</para></listitem>

<listitem><para>
Resuméer der på punktform giver overblik over kapitlet.
</para></listitem>

<listitem><para>
Avancerede afsnit med ekstra stof til dem der vil vide mere.
</para></listitem>
</itemizedlist>


<para>
Det kan anbefales at købe den trykte bog hvis du er begynder og har brug
for en pædagogisk lærebog.
På hjemmesiden <ulink url="http://javabog.dk/">http://javabog.dk</ulink> kan du
også hente programeksempler, forslag til læseplan, 
undervisningsmateriale med ugesedler med øvelser, transparenter,
løsningsforslag og meget andet.
</para>
</sect1>


<sect1>
<title>Javas historie</title>
<indexterm><primary>Javas historien</primary></indexterm>
 
<para>
Der var en gang - sådan starter mange eventyr. På sin egen måde har Java også været
et eventyr, ikke kun for SUN Micro Systems (SUN) men også for den store skare af
udviklere der i tidens løb har taget sproget til sig på godt og ondt.
</para>
 
<para>
Tilbage i 1992 var der nogle visionære personer ansat hos SUN, der ønskede at
definere et programmeringssprog samt et afviklingsmiljø, som kunne anvendes til
at afvikles i små diskrete enheder. Det primære årsag til at kikke på denne
opgave var, at hver gang en virksomhed skulle at udvikle en ny enhed med en
indbygget mikroprocessor, skulle de også til at udvikle oversættere,
operativsystem, enhedsprogrammer mv. Ud over denne relative store opgave,
skulle de enkelte udviklere også bruge en del tid på at sætte sig ind i den
nye hardware platform, og evt. nyt assembler sprog (C bliver typisk kun
anvendt til større enheder med mere hukommelse og hurtigere processor).
</para>
 
<para>
SUN's tanke var at definere et simpelt letvægts afviklingsmiljø (virtual machine)
som enkelt kunne implementeres på forskellige typer af processorer. Derved kunne
udviklerne koncentrere sig om at udvikle funktionalitet i stedet for at prøve
at forstå hvordan den underliggende arktitektur var opbygget.
</para>
 
<para>
Udviklingen af det sprog, der skulle programmeres i, tog udgangspunkt
i C og C++, specielt mht.
syntaks. Dette ville gøre det let for målgruppen, som typisk allerede kendte til
især C, at komme hurtigt igang med udvikling af software.
</para>
 
<para>
SUN's direktion besluttede at sætte en række midler af til et forskningsprojekt
der skulle afdække mulighederne for en sådan platform. Projektet havde mange
kodenavne, deriblandt "stealth project" og "project green". Efter et årstid
havde gruppen fået defineret platformen og det var nu tid til at prøve tingene
af i virkelighedens verden.
</para>
 
<para>
Test-projektet (kendt under navnet "Star Seven") var en simpel PDA
(Personal Digital Assistent - som PalmPilot). Projektet var en succes,
de havde bevist at de kunne udvikle det samme produkt på væsentligt
kortere tid end det normalt ville havde taget dem (faktor 3 i forhold
til normalt), men SUN besluttede at sig for at markedet endnu ikke
kunne bære et produkt af denne type (SUN skævede selvfølgelig til
Apples PDA - Newton - som Apple, på trods af at produktet var rimelig
modent, ikke kunne sælge).
</para>
 
<para>
I stedet gik SUN i forhandlinger med bla. Times Warner om at implementere
deres platform på såkaldte SetTop bokse, som er meget udbredte i bl.a. USA. Af
ukendte årsager kunne Time Warner og SUN ikke blive enige, og aftalen
blev aldrig til noget.
</para>
 
<para>
På det tidspunkt virkede det som om platformen ikke skulle blive til noget,
projektet blev kørt lidt ud på et sidespor, men der blev arbejdet på
livet løs i de små kontorer i Silicon Valley. På det tidspunkt hed
programmeringssproget Oak - årsagen skulle efter sigende være, at James
Gosling blev inspireret af et egetræ (eng. oak) der stod udenfor hans
kontorvindue. Nu ville skæbnen blot at der allerede eksisterede et
firma der havde navnebeskyttet (trademark) navnet Oak Technologies.
De brugte noget tid på at brainstorme omkring navnet og kom på navne som:
Silk, DNA, Aliva, Jolt, Ruby, WRL (WebRunnerLanguage), Lyric, Pepper,
NetProse, Neon og Lingua Java (læs mere her:
<ulink url="http://www.javaworld.com/jw-10-1996/jw-10-javaname.html">
http://www.javaworld.com/jw-10-1996/jw-10-javaname.html</ulink>).
</para>

<para>
I starten af 1995 havde en af SUN's udviklere lavet en webbrowser i
Java på en weekend (det siger nok mere om webbrowseren end om Java).
Det specielle ved denne webbrowser (senere kendt som HotJava) var
at den kunne afvikle Java indlejret i HTML-siden, hvilket var fuldstændigt
nyt på dette tidspunkt. HotJava blev vist frem på SUN World '95.
Her blev det set af nogle folk fra Netscape,
som på det tidspunkt var den altdominerende
webbrowser på markedet, og de kunne godt lide tanken om
at kunne afvikle programkode som en del af en HTML-side. Netscape
købte en licens af SUN til at implementere en Java virtuel maskine,
og den første version af Netscape med Java 1.1 var version 3. Det
blev en bragende succes. I løbet af meget kort tid spredte kendskabet
til Java sig og alle skulle lige pludselig til at programmere
appletter (navnet på den slags Javaprogrammer der kan afvikles i en
browser).
</para>
 
<para>
Siden 1995 er det gået hurtigt for Java. Version 1.1.0 blev hurtigt til
version 1.1.2 osv. På nuværende tidspunkt er den seneste 1.x version
fra SUN version 1.1.8_008. Version 1.1.x bliver ikke længere videreudviklet
og har startet sit sidste liv - dvs. SUN retter ikke længere andet end
meget kritiske fejl (dvs. ingen).
</para>
 
<para>
I starten af 1999 kom version 1.1.x's afløser - version 1.2.0. I denne version
var der ændret på en del af arkitekturen i Java og rent markedsføringsmæssigt
blev det kaldt "Java 2", hvilket den næste også hedder idag (Java 2 Standard
Edition). Den seneste version 1.2.x fra SUN er version 1.2.2_010.
</para>
 
<para>
Den seneste endelige version af SUN hedder version 1.3.x (seneste 1.3.1_02)
og i denne version er der også blevet plads til nogle nye features (dog
ikke så mange som ved hoppet fra version 1.1.x til 1.2.x).
</para>
 
<para>
Den næste version af Java hedder version 1.4.0 og er i skrivende stund
i beta 3 - dvs. næsten klar til udgivelse. Den nye version af Java er meget
spændende mht. nye features.
</para>
 
<para>
SUN havde lige fra starten (1.1) valgt at lade oversætter og en version
af den virtuelle maskine være tilgængelige gratis til nedhentning
via internettet.
</para>
 
<para>
Det er stadig gratis at hente og bruge Java til både private og
kommecielle formål. SUN leverer Java udviklingsmiljøer til følgende
operativsystemer:
</para>
 
<itemizedlist mark="bullet">
  <listitem>
     <para>Linux (forskellige distributioner)</para>
  </listitem>
  <listitem>
   <para>SUN Solaris</para>
  </listitem>
  <listitem>
    <para>Microsoft Windows 95,98,Me,NT,2000 & XP</para>
  </listitem>
</itemizedlist>

<para>
Ud over disse versioner eksisterer der også et produkt der
hedder JavaOS som bl.a. kan afvikles under DOS med DPMI-understøttelse.
Denne version af Java bliver dog pt. ikke videreudviklet aktivt af SUN
og kan ikke længere findes på deres hjemmeside.
</para>
 
<para>
Den seneste version af Java kan hentes fra SUN Java hjemmeside:
<ulink url="http://java.sun.com/j2se/">http://java.sun.com/j2se</ulink>.
</para>
 
<para>
Ud over SUN er der en række firmaer der også implementere Java til række
platforme. Her er listen fra SUN's hjemmeside:</para>
 
<itemizedlist mark="bullet">
  <listitem><para>AIX (IBM)</para></listitem>
  <listitem><para>DG/UX 4.2 (Data General Corporation)</para></listitem>
  <listitem><para>DYNIX/pt 4.2.2 (Intel)</para></listitem>
  <listitem><para>HP-UX (Hewlett-Packard)</para></listitem>
  <listitem><para>IRIX (Silicon Graphics)</para></listitem>
  <listitem><para>Linux (Blackdown)</para></listitem>
  <listitem><para>MacOS (Apple)</para></listitem>
  <listitem><para>NetWare (Novell)</para></listitem>
  <listitem><para>OpenVMS (Compaq Computer Corporation)</para></listitem>
  <listitem><para>OS/2 (IBM)</para></listitem>
  <listitem><para>OS 390 (IBM)</para></listitem>
  <listitem><para>OS 400 (IBM)</para></listitem>
  <listitem><para>SCO (SCO)</para></listitem>
  <listitem><para>True64 (Compaq Computer Corporation)</para></listitem>
  <listitem><para>UnixWare (SCO)</para></listitem>
  <listitem><para>VxWorks (Wind River Systems)</para></listitem>
  <listitem><para>Windows NT (Digital Equipment Corporation)</para></listitem>
</itemizedlist>
 
<para>For mere information om de forskellige versioner kik på siden:
<ulink url="http://java.sun.com/cgi-bin/java-ports.cgi">
http://java.sun.com/cgi-bin/java-ports.cgi</ulink>.
</para>

</sect1>

<sect1>
<title>Hvad er en virtuel maskine</title>
<indexterm><primary>Hvad er en VM</primary></indexterm>
 
<para>
Java afvikles igennem en virtuel maskine. En virtuel maskine er, som navnet
antyder, virtuel - dvs. ikke eksisterende. Det, SUN har gjort, er at definere
et afviklingsmiljø, som passer godt med den måde, Java er skruet sammen.
Afviklingsmiljøet skjuler den underliggende platform (både hvad angår hardware
og operativ system).
</para>
 
<para>
Når man oversætter et Java program sker der to ting: Programmets syntaks tjekkes,
og der generes såkaldt mellemkode (byte-code). Mellemkoden er en mellemting
mellem kildetekst og maskinekode (også kaldt assemblerkode). Når man oversætter et
program i et "normalt" programmeringssprog, genereres der normalt maskinekode. Denne maskinkode kan direkte afvikles af den processor, man har valgt at oversætte til.
Typisk den samme processor man afvikler oversætteren under, men ikke nødvendigvis.
Dette gør at kode kun kan afvikles på den valgte processor og ikke andre.
Man kan for eksempel ikke få glæde nye features i senere generationer af processoren.
</para>
 
<para>
Det den virtuelle maskine gør, er, at den fortolker den mellemkode, som er
genereret af oversætteren. Ofte er der ikke særlig langt imellem mellemkode
og den pågældende platforms arkitektur, dvs. for hver mellemkode instruktion
er der meget få, eller bare en enkelt maskinekode instruktion.
</para>
 
<para>
Spørgsmål - "Hvorfor er der ikke nogen der har lavet en processor der kan
forstå Java mellemkode direkte?". Der er der faktisk også nogen der har,
men processoren har ikke kunnet hamle op med mere og mere avancerede
virtuelle maskiner som bl.a. SUN og IBM har lavet.
</para>
 
<para>
Selvom der ikke er særlig langt mellem mellemkode og maskinekode, skal
den virtuelle maskine gøre mere end bare at oversætte mellem de to typer af kode.
Den virtuelle maskine er også ansvarlig for styring af hukommelse samt for
grænsefladen mod det underliggende operativsystem.
</para>
 
<para>
For at få det hele til at køre lidt hurtigere har mange leverandører af
virtuelle maskiner udviklet en teknologi kaldet JIT - Just In Time.
Tanken bag denne teknologi er, at lige inden kode skal afvikles, bliver det
oversat til maskinekode på den aktuelle platform, og gemt til næste gang
den samme kode skal oversættes. Disse oversatte dele bliver ikke gemt
efter at den virtuelle maskine er afsluttet.
</para>
 
<para>
Den seneste generation af virtuelle maskiner fra SUN har kodenavnet HotSpot.
Dette navn er meget velvalgt, da det, denne type af virtuelle maskine
koncentrerer sig om, er de dele af koden som bliver afvikles oftes - og derfor
også bør være dem, der bliver oversat først og bedst. Den virtuelle maskine
foretager en såkaldt profilering af kode, hvor den gemmer information om
hvor ofte en given metode bliver kaldt, hvor lang tid den tager at afvikle
mv. Efter at den virtuelle maskine har været startet i en periode har den
indsamlet information nok til at begynde at genere maskinekode. I og med den
sidder med alle kort på hånden mht. det øjeblik hvor kode afvikles, kan den
udvælge den / de funktioner, der bruges oftes, og som derfor bør oversættes
først. Er der tale om en simpel kort metode, kan den virtuelle maskine
vælge at indlejre kode fra funktion de steder, hvor den kaldes. Regulære funktionskald
med overførsel af parametre erstattes således af kopier af funktionens kode.
Dette sparer en del kostbare processor trin. Ifølge SUN er ydelsen fra
en HotSpot virtuel maskinen meget tæt på den ydelse, man kan få fra det
tilsvarende C++ program, fordi den optimering, den virtuelle maskine
kan lave, er væsentlig bedre end den, C++ oversætteren kan foretage på
oversættelsestidspunktet. Hvis man endvidere implementere nogle af de
avancerede ting fra Java (fx. garbage collector, sikre referencer mv), som
påvirker ydelsen negativt, udkonkurerer Java med HotSpot teknologien C++
fuldstændigt (jf. SUN).
</para>

<para>
Man kan få virtuelle Javamaskiner til næsten alle platforme, lige fra de
store IBM mainframe systemer (OS 390), og ned til et smartcard (fx. Danmønt
kortet). Det, som er den store forskel mellem implementeringen af Java på
de forskellige platforme, er de runtime-biblioteker, der medfølger - selve
mellemkoden er nøjagtig den samme.
</para>
 
<para>
På nuværende tidspunkt findes der:
</para>
 
<itemizedlist>
  <listitem><para>Java 2 Enterprise Edition (applikation server)</para></listitem>
  <listitem><para>Java 2 Standard Edition (arbejdsstation)</para></listitem>
  <listitem><para>Java 2 Micro Edition (indlejret systemer)</para></listitem>
</itemizedlist>

</sect1>

<sect1 id="java-intro-prg">
<title>Programmering</title>
 
<para>
  Ethvert program, som f.eks. tekstbehandlingsprogram, regneark,
  e-post, tegneprogram, spil, webserver består af nogle data
  (f.eks. hjælpefiler og opsætningsfiler) og en samling
  instruktioner til computeren.
</para>
 
<para>
  Hver instruktion er meget simpel, og computeren udfører den
  ubetinget, uanset om det er smart eller ej. En computer kan udføre
  instruktionerne ekstremt hurtigt (over 1 milliard instruktioner pr.
  sekund), og det kan få computeren til at virke smart, selvom
  instruktionerne er simple.
</para>
 
<sect2 id="java-intro-prg-os">
<title>Styresystemet</title>
 
<para>
  Styresystemet er det program, som styrer computeren, og tillader
  brugeren at bruge andre programmer. Af styresystemer kan nævnes
  Linux, DOS, Windows, MacOS, OS/2, UNIX.
</para>
 
<para>
  Styresystemet styrer computerens hukommelse og eksterne enheder
  som skærm, tastatur, mus, disk, printere og netværksadgang.
  Det tilbyder tjenester til programmerne, f.eks. muligheden for
  at læse på disken eller tegne en grafisk brugergrænseflade.
</para>
 
<para>
  Et program kan normalt kun køre på et bestemt styresystem.
  Javaprogrammer kan dog køre på flere styresystemer, og de
  bruges derfor bl.a. som programmer, der automatisk hentes
  ned til brugerens web-browser, og afvikles der. Den type
  programmer kaldes appletter eller miniprogrammer.
</para>
</sect2>    <!--   Styresystemet -->
 
<sect2 id="java-intro-prg-hvorfor">
<title>Hvorfor lære at programmere?</title>

<para>
  Det er sjovt og spændende, og kan være en kilde til
  kreativitet og leg at skabe sine egne programmer. Man kan bedre
  forestille sig nye løsninger og produkter, og man får
  bedre kendskab til computeres formåen og begrænsninger.
</para>
 
<para>
  Desuden er det et håndværk, der er efterspurgt blandt
  IT-virksomheder og mange andre. Ved hjælp af programmering kan
  du løse problemer, og du er dermed ikke mere afhængig
  af, at andre laver et program, der opfylder dine behov.
</para>
 
<para>
  Programmering er en af datalogiens helt basale discipliner, og
  selv om man ikke arbejder som programmør, kan kendskab til
  programmering være en stor fordel i mange beslægtede fag.
</para>
 
<para>
  Java er et sprog, der har stor udbredelse såvel i industrien som i
  akademiske kredse. Det er kraftfuldt og relativt let lært.
  Lærer du Java, har du et godt fundament til at lære
  andre programmeringssprog.
</para>
</sect2>    <!--   Hvorfor lære at programmere? -->
 
<sect2 id="java-intro-prg-eksempel">
<title>Et simpelt program</title>
 
<para>
  For at computeren kan arbejde, skal den have nogle instruktioner,
  den kan følge slavisk. For at lægge to tal, som brugeren oplyser,
  sammen kunne man forestille sig følgende opskrift:
</para>
 
<screen>
  1   Skriv &quot;Indtast første tal&quot; på skærmen
  2   Læs tal fra tastaturet
  3   Gem tal i lagerplads A
  4   Skriv &quot;Indtast andet tal&quot; på skærmen
  5   Læs tal fra tastaturet
  6   Gem tal i lagerplads B
  7   Læg indhold af lagerplads A og indhold af lagerplads B sammen
  8   Gem resultat i lagerplads C
  9   Skriv &quot;Summen er:&quot; på skærmen
  10  Skriv indhold af lagerplads C på skærmen
</screen>
 
<para>
  Et program minder lidt om en kogebogsopskrift, som computeren
  følger punkt for punkt ovenfra og ned. Hvert punkt (eller
  instruktion eller kommando) gøres færdigt, før
  der fortsættes til næste punkt.
</para>

</sect2>    <!--   Et simpelt program -->

<sect2 id="java-intro-prg-hvordan">
<title>Hvordan lærer man at programmere</title>
 
<para>
  Man lærer ikke at programmere blot ved at læse en bog. Har
  man ikke tid til at øve sig og eksperimentere med det man
  læser om, spilder man bare sin tid.
  For de fleste kræver det en stor arbejdsindsats at lære
  at programmere, og for alle tager det lang tid, før de
  bliver rigtig dygtige til det.
</para>
 
<blockquote>
  <para>
    Der er kun én måde at lære at programmere på: Øv dig
  </para>
</blockquote>
 
<para>
  Der er blevet lavet forskning, der underbygger dette. P.M. Cheney
  konkluderer,
  at den eneste betydende faktor i produktiviteten for programmører
  er: Erfaring. Han fandt i øvrigt forskelle i
  produktiviteten på en faktor 25.
</para>
 
<para>
  Artiklen
  hedder 'Effects of Individual Characteristics, Organizational
  Factors and Task Characteristics on Computer Programmer
  Productivity and Job Satisfaction' og kan findes i Information
  and Management, 7, 1984.
</para>
 
</sect2>    <!--   Hvordan lærer man at programmere -->
</sect1>    <!--   Programmering -->
 
<sect1 id="java-intro-prg-fordele-ulemper">
<title>Fordele og ulemper ved Java</title>
 
<para>
  Java er et initiativ til at skabe et programmeringssprog, der kan
  køre på flere styresystemer. Det er udviklet af Sun
  Microsystems, der i 1991 arbejdede med at designe et
  programmeringssprog, der var velegnet til at skrive programmer
  til fremtidens telefoner, fjernsyn, opvaskemaskiner og andre
  elektroniske apparater. Sådanne programmer skal være
  meget kompakte (begrænset hukommelseslager) og fejlsikre
  (risikoen for, at apparatet ikke virker skal være
  minimal).
</para>
 
<para>
  Med udviklingen af internettet blev Java samtidig meget udbredt,
  fordi teknologien bl.a. tillader, at små programmer kan lægges
  ind i en hjemmeside (se kapitlet om appletter).
</para>
 
<para>
  Det har på kort tid udviklet sig til at være
  fremherskende på grund af dets egenskaber. Java er et
  enkelt, objektorienteret, robust, netværksorienteret,
  platformuafhængigt, sikkert, fortolket, højtydende,
  flertrådet og dynamisk sprog.
</para>

<sect2 id="java-intro-prg-fordele-ulemper-enkel">
<title>Enkelt</title>
 
<para>
  Java er i forhold til andre programmeringssprog et ret enkelt sprog, og det er forholdsvis
  nemt at programmere (specielt for C++ og C-programmører). Mange af de muligheder for at lave
  fatale fejl, der eksisterer i andre programmeringssprog, er fjernet i Java.
</para>
</sect2>
 
<sect2 id="java-intro-prg-fordele-ulemper-obj">
<title>Objektorienteret</title>
 
<para>
  Samtidig kommer det med over 1000 foruddefinerede objekt-typer, som kan udføre næsten enhver
  tænkelig opgave. Præcist hvad "objektorienteret" betyder handler denne bog om.
</para>
</sect2>
 
<sect2 id="java-intro-prg-fordele-ulemper-platform">
<title>Platformuafhængigt</title>
 
<para>
  Java er platformuafhængigt. Det vil sige, at samme program umiddelbart kan udføres på mange
  forskellige styresystemer, f.eks. UNIX, Linux, Mac og Windows,  og processor-typer f.eks. Intel IA32, PowerPC og Alpha.
</para>
</sect2>
 
<sect2 id="java-intro-prg-fordele-ulemper-net">
<title>Netværksorienteret</title>
 
<para>
  Java har indbygget alskens netværkskommunikation (se kapitlet om netværk), og bruges meget på internettet,
  da javaprogrammer kan køre på næsten alle platforme. Samtidig er Javaprogrammer så kompakte, at de nemt kan indlejres i en hjemmeside.
</para>
</sect2>
 
<sect2 id="java-intro-prg-fordele-ulemper-fortolket">
<title>Fortolket</title>
<para>
  Kildeteksten oversættes til en standardiseret platformuafhængig kode (kaldet bytekode), som derefter udføres
  af en javafortolker på det enkelte styresystem. Derved opnås, at man kun behøver at oversætte sin kildetekst
  én gang. Javafortolkeren er en såkaldt virtuel maskine, der konverterer instruktionerne i bytekoden til
  instruktioner, som det aktuelle styresystem kan forstå.
</para>
</sect2>
 
<sect2 id="java-intro-prg-fordele-ulemper-ydelse">
<title>Højtydende</title>
 
<para>
  De nuværende fortolkere tillader javaprogrammer at blive udført næsten lige så hurtigt, som hvis de var
  blevet oversat direkte til det pågældende styresystem.
<!-- JN: det er faktisk rigtigt! Det der tager tid er når man begynder
     at bruge objekter i den store stil. -->
</para>
</sect2>
 
<sect2 id="java-intro-prg-fordele-ulemper-traade">
<title>Flertrådet</title>
 
<para>
  Java er designet til at udføre flere forskellige programdele samtidigt, og en programudførsel kan
  blive fordelt over flere CPU'er  (se kapitlet om flertrådet programmering).
</para>
</sect2>

<sect2 id="java-intro-prg-fordele-ulemper-robust">
<title>Robust</title>
 
<para>
  Java er også robust; under afviklingen af et program tjekkes det, at handlingerne er tilladelige, og
  opstår der en fejl, såsom en ønsket fil ikke kan findes, erklærer Java, at der er opstået en undtagelse.
  I mange andre sprog vil sådanne uventede fejl føre til, at programmet stopper. I Java har man let adgang
  til at fange og håndtere disse undtagelser, så programmet alligevel kan køre videre (se kapitlet om undtagelser).
</para>
</sect2>
 
<sect2 id="java-intro-prg-fordele-ulemper-sikkerhed">
<title>Sikkert</title>
 
<para>
  Et sikkerhedssystem tjekker al programkode og sørger for, at bl.a. hjemmesider med Java-appletter ikke
  kan gøre ting, de ikke har lov til (f.eks. læse eller ændre i brugerens filer), uden at brugeren selv har givet tilladelse til det.</para>
</sect2>
 
<sect2 id="java-intro-prg-fordele-ulemper-dynamik">
<title>Dynamisk</title>
 
<para>
  Java kan dynamisk (i et kørende program) indlæse ekstra programkode fra netværket og udføre den, når det er
  nødvendigt, og der er indbygget mekanismer til at lade programmer på forskellige maskiner dele dataobjekter
  (se eksempelvis kapitlet om RMI).
</para>
</sect2>
 
<sect2 id="java-intro-prg-fordele-ulemper-opbakning">
<title>Stor opbakning</title>
 
<para>
  Ovenstående egenskaber gør, at Java også har vundet stor udbredelse i serversystemer de seneste år, og
  Java understøttes i dag af næsten alle større softwarefirmaer, f.eks. IBM, Oracle, Borland, Netscape.
</para>
 
<para>
  Softwaregiganten Microsoft er en undtagelse. Microsoft blev i efteråret
  2000 kendt skyldig ved domstolen i USA for ulovligt at misbruge sin
  monopollignende magt på PC-markedet for at skade bl.a. Java.
  Sagen blev naturligvis anket, og det er i skrivende stund uvist
  hvad den ender med.
</para>
 
<para>
  Microsoft er ikke interesseret i, at programmerne kan udføres
  under andre styresystemer end Windows. De har lavet deres egen udgave
  af Java, der kun virker under Windows, og har (uden større
  held) forsøgt at lokke programmører til at bruge den.
</para>
</sect2>    <!--   Stor opbakning -->

<sect2 id="java-intro-prg-fordele-ulemper-minus">
<title>Svagheder ved Java</title>
 
<para>
  Java har også en del kritikere, især blandt de, hvis
  forretningsmodel eller område er truet af Java.  Ikke desto
  mindre er der nogle gode pointer iblandt:
</para>
 
<itemizedlist mark="bullet">
  <listitem>
    <para>
      Java kræver hukommelse (RAM). Store Javaprogrammer kan kræve så meget, at de har problemer med at køre på mindre kontor-PC'ere.    </para>
  </listitem>
  <listitem>
    <para>
      Java skal installeres på en computer, før den
      kan afvikle javaprogrammer. Hvis man vil distribuere sit program,
      skal man således pakke en version af Java med.
    </para>
  </listitem>
  <listitem>
    <para>
      Sun Microsystems ejer Java, og nogle frygter, at det vil
      udvikle sig til et monopol som med Microsoft. Indtil videre har de
      dog opført sig eksemplarisk og bl.a. frigivet hele
      kildeteksten til Java, og derudover findes der andre uafhængige
     udgaver af Java.
   </para>
  </listitem>
  <listitem>
    <para>
      Java satser på at være platformuafhængigt,
      men der er alligevel små forskelle på de forskellige
      platforme. Dette gælder specielt ved programmering af grafiske
      brugergrænseflader. Det kræver erfaring og test at
      sikre sig, at ens program virker tilfredsstillende på
      flere platforme. Dette er ikke kun et Java-relateret problem,
      designere af hjemmesider har tilsvarende problemer. Java gør
      det nemmere at skrive platformuafhængige programmer, men
      det løser ikke alle problemer for programmøren.
   </para>
  </listitem>
</itemizedlist>
 
</sect2>    <!--   Svagheder ved Java -->

</sect1>

</chapter>
