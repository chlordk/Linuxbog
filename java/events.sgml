<chapter id="java-events">
<title>Hændelser i grafiske brugergrænseflader</title>

<para>Indhold:</para>

<itemizedlist mark="bullet">
  <listitem><para>Forstå hændelser og lyttere</para></listitem>
  <listitem><para>Abonnere på hændelser</para></listitem>
</itemizedlist>

<para>Forudsættes af <xref linkend="java-indre-klasser" />, Indre klasser.</para>

<para>Forudsætter <xref linkend="java-gui" />, Grafiske brugergrænseflader og <xref linkend="java-interface" />, Interfaces.</para>

<para>
  Hændelser (eng.: events) spiller en stor rolle i
  programmering af grafiske brugergrænseflader. Når
  brugeren foretager en handling, f.eks. bevæger musen, klikker,
  trykker en knap ned, ændrer i et tekstfelt osv., opstår
  der en <emphasis>hændelse</emphasis>. I Java
  er alle hændelser objekter (af typen Event) med metoder
  til at undersøge de præcise detaljer omkring hændelsen.
</para>

<para>
  Hændelser udsendes af de grafiske komponenter
  (knapper, vinduer osv.), og hvis man vil behandle en bestemt type
  hændelser fra en bestemt grafisk komponent, skal man &#148;lytte&#148;
  efter den hændelse. Det gøres ved at registrere en
  <emphasis>lytter</emphasis> (eng.: listener) på hændelsestypen på
  den pågældende grafiske komponent.
</para>

<para>
  En lytter er et objekt, der kan &quot;abonnere&quot; på
  en bestemt type hændelse. Når en lytter er registreret
  hos en grafisk komponent, bliver der kaldt en metode på
  lytter-objektet, når  hændelsen indtræffer (f.eks.
  kaldes mouseClicked(), når der klikkes med musen).
</para>

<para>
  For at sikre, at lytteren har den pågældende
  metode, skal lytter-objektet implementere et interface, der
  garanterer, at det har metoden.
</para>

<para>F.eks.:</para>

<para>
  Appletter kan udsende hændelser af typen
  MouseEvent. Appletter har derfor metoden
  addMouseListener(MouseListener lytter), der kan bruges til at
  registrere lytter-objekter hos appletten. Det er kun objekter af
  typen MouseListener, der kan registreres som lyttere. MouseListener
  er et interface, så man skal lave en klasse, der implementerer
  MouseListener og skabe lytter-objekter ud fra dette. Når
  brugeren klikker med musen i appletten, udsender appletten en
  MouseEvent-hændelse til alle lytter-objekter, der er blevet
  registreret vha. addMouseListener(). Det gør appletten
  ved at kalde metoden mouseClicked(MouseEvent hændelse) på
  lytter-objekterne.
</para>

<sect1 id="java-events-eksempel-lyt-til-musen">
<title>Eksempel - LytTilMusen</title>

<para>
  Herunder definerer vi klassen Muselytter, der
  implementerer MouseListener. Hver gang der sker noget med musen,
  skrives det ud til skærmen.
</para>

<para>
  MouseListener-interfacet har bl.a. metoden
  mousePressed, der kaldes, når musen trykkes ned. Parameteren er
  et MouseEvent-objekt, der bl.a. kan fortælle, hvor musen er, og
  hvilken knap der blev trykket på.
</para>

<screen>
import java.awt.*;
import java.awt.event.*;

public class Muselytter <emphasis>implements MouseListener</emphasis>
{
  public void mousePressed(MouseEvent hændelse)  <emphasis>// kræves af MouseListener</emphasis>
  {
    Point trykpunkt = hændelse.getPoint();
    System.out.println(&quot;Mus trykket ned i &quot;+trykpunkt);
  }

  public void mouseReleased(MouseEvent hændelse)  <emphasis>// kræves af MouseListener</emphasis>
  {
    Point slippunkt = hændelse.getPoint();
    System.out.println(&quot;Mus sluppet i &quot;+slippunkt);
  }

  public void mouseClicked(MouseEvent hændelse)  <emphasis>// kræves af MouseListener</emphasis>
  {
    System.out.println(&quot;Mus klikket i &quot;+hændelse.getPoint());
  }

<emphasis>  //--------------------------------------------------------------------</emphasis>
<emphasis>  //  Ubrugte hændelser (skal defineres for at implementere MouseListener)</emphasis>
<emphasis>  //--------------------------------------------------------------------</emphasis>
  public void mouseEntered (MouseEvent event) {}  <emphasis>// kræves af MouseListener</emphasis>
  public void mouseExited (MouseEvent event) {}  <emphasis>// kræves af MouseListener</emphasis>
}
</screen>

<para>Lad os nu lave en lille applet, der:</para>

<orderedlist>
  <listitem><para>Opretter et muselytter-objekt.</para></listitem>
  <listitem><para>Registrerer lytter-objektet, så det får kaldt sine metoder, når der sker noget med musen.</para></listitem>
</orderedlist>

<screen>
import java.applet.*;
public class LytTilMusen extends Applet
{
  public void init()
  {
    Muselytter lytter = new Muselytter();
    <emphasis>this.addMouseListener(lytter)</emphasis>;  <emphasis>// this er objektet selv</emphasis>
  }
}
</screen>

<para>Uddata fra appletten kan ses i konsolvinduet (i Netscape: Communicator/Tools/Java Console):</para>

<screen>
Mus trykket ned i java.awt.Point[x=132,y=209]
Mus sluppet i java.awt.Point[x=139,y=251]
Mus trykket ned i java.awt.Point[x=101,y=199]
Mus sluppet i java.awt.Point[x=101,y=199]
Mus klikket i java.awt.Point[x=101,y=199]
</screen>
</sect1> 

<sect1 id="java-events-eksempel-linjetegning">
<title>Eksempel - Linjetegning</title>

<para>
  Det foregående eksempel giver ikke appletten besked om, at
  der er sket en hændelse. Det har man brug for, hvis man f.eks.
  vil tegne noget i appletten.
</para>

<para>
  Herunder er et eksempel, hvor lytter-objektet (Linjelytter) giver
  informationer om klik videre til appletten (Linjetegning), sådan
  at en grøn linje tegnes mellem det punkt, hvor man trykkede
  museknappen ind, og det punkt, hvor man slap museknappen. Lytteren
  giver appletten besked vha. applettens to public variabler
  trykpunkt og slippunkt.
</para>

<para>Lad os først kigge på appletten:</para>

<screen>
import java.awt.*;
import java.awt.event.*;
import java.applet.*;

public class Linjetegning extends Applet
{
  public Point trykpunkt;
  public Point slippunkt;

  public void init()
  {
<emphasis>    Linjelytter lytter = new Linjelytter();</emphasis>
    <emphasis>lytter.appletten = this;</emphasis> <emphasis>// initialiserer lytterens reference til appletten</emphasis>
    <emphasis>this.addMouseListener(lytter)</emphasis>;
  }

  public void paint(Graphics g)
  {
    g.drawString(&quot;1:&quot;+trykpunkt+&quot;  2:&quot;+slippunkt,10,10);
    if (trykpunkt != null &amp;&amp; slippunkt != null)
    {
      g.setColor(Color.blue);
      g.drawLine(trykpunkt.x, trykpunkt.y, slippunkt.x, slippunkt.y);
    }
  }
}
</screen>

<para>Linjelytter er nødt til at have en reference til Linjetegning-appletten:</para>

<screen>
import java.awt.*;
import java.awt.event.*;
import java.applet.*;

public class Linjelytter implements MouseListener
{
<emphasis>  public Linjetegning appletten;                 </emphasis><emphasis>// Reference til appletten</emphasis>

  public void mousePressed(MouseEvent hændelse)  <emphasis>// kræves af MouseListener</emphasis>
  {
    <emphasis>appletten.trykpunkt = </emphasis>hændelse.getPoint();
  }

  public void mouseReleased(MouseEvent hændelse) <emphasis>// kræves af MouseListener</emphasis>
  {
    <emphasis>appletten.slippunkt = </emphasis>hændelse.getPoint();
    <emphasis>appletten.repaint()</emphasis>; <emphasis>// Gentegn appletten lige om lidt.</emphasis>
  }

<emphasis>  //--------------------------------------------------------------------</emphasis>
<emphasis>  //  Ubrugte hændelser (skal defineres for at implementere interfacet)</emphasis>
<emphasis>  //--------------------------------------------------------------------</emphasis>
  public void mouseClicked(MouseEvent event) {}  <emphasis>// kræves af MouseListener</emphasis>
  public void mouseEntered (MouseEvent event) {} <emphasis>// kræves af MouseListener</emphasis>
  public void mouseExited (MouseEvent event) {}  <emphasis>// kræves af MouseListener</emphasis>
}
</screen>

<para>Med linjen</para>

<screen>
    appletten.repaint();
</screen>

<para>
  fortæller vi Linjetegning-appletten, at den skal gentegne sig
  selv. Det forårsager kort efter et kald til dens
  paint()-metode.
</para>

<figure id="java-events-eksempel-linjetegning-fig">
<title>Java</title>

<graphic fileref="Nordfalk1415444.&magic;" scale="60"></graphic>
</figure>

<sect2 id="java-events-eksempel-linjetegning-klasse">
<title>Linjetegning i &eacute;n klasse</title>

<para>Herunder er Linjetegning igen, men nu som en applet, der <emphasis>selv</emphasis> implementerer MouseListener.</para>

<para>Det er linjen</para>

<screen>
    this.addMouseListener(this);
</screen>

<para>der registrerer applet-objektet selv som lytter.</para>

<screen>
import java.applet.*;
import java.awt.*;
import java.awt.event.*;

public class Linjetegning2 extends Applet <emphasis>implements MouseListener</emphasis>
{
  private Point trykpunkt;
  private Point slippunkt;

  public void init()
  {
    <emphasis>this.addMouseListener(this)</emphasis>;
  }

  public void paint(Graphics g)
  {
    g.drawString(&quot;1:&quot;+trykpunkt+&quot;  2:&quot;+slippunkt,10,10);
    if (trykpunkt != null &amp;&amp; slippunkt != null)
    {
      g.setColor(Color.blue);
      g.drawLine(trykpunkt.x, trykpunkt.y, slippunkt.x, slippunkt.y);
    }
  }

  public void mousePressed(MouseEvent hændelse)  <emphasis>// kræves af MouseListener</emphasis>
  {
    trykpunkt = hændelse.getPoint();
  }

  public void mouseReleased(MouseEvent hændelse)  <emphasis>// kræves af MouseListener</emphasis>
  {
    slippunkt = hændelse.getPoint();
    repaint();
  }

<emphasis>  //--------------------------------------------------------------------</emphasis>
<emphasis>  //  Ubrugte hændelser (skal defineres for at implementere interfacet)</emphasis>
<emphasis>  //--------------------------------------------------------------------</emphasis>
  public void mouseClicked(MouseEvent event) {}  <emphasis>// kræves af MouseListener</emphasis>
  public void mouseEntered (MouseEvent event) {}  <emphasis>// kræves af MouseListener</emphasis>
  public void mouseExited (MouseEvent event) {}  <emphasis>// kræves af MouseListener</emphasis>
}
</screen>

<para>
  Bemærk, at nu kan vores trykpunkt og slippunkt-variabler
  være private i stedet for public, fordi de ikke behøver
  at være tilgængelige udefra.
</para>
</sect2>  
</sect1>  

<sect1 id="java-events-ekstra-eksempler">
<title>Ekstra eksempler</title>

<para>
  Ovenfor har vi brugt MouseListener som illustration. Her vil vi
  give eksempler på brug af de andre typer lyttere (beskrevet i
  appendiks senere i kapitlet).
</para>

<sect2 id="java-events-ekstra-eksempler-lytte-til-mus">
<title>Lytte til musebevægelser</title>

<para>
  Med MouseMotionListener får man adgang til hændelserne
  mouseMoved og mouseDragged. Det kan bruges til at tegne grafiske
  figurer ved at hive musen hen over skærmen.
</para>

<para>
  Her er en applet til at tegne kruseduller. Vi husker punktet, når
  musen trykkes ned (mousePressed()), og tegner en linje fra forrige
  punkt til musen, når den trækkes med nedtrykket knap
  (mouseDragged()).
</para>

<para>Tegningen af grafikken sker direkte i håndteringen af hændelsen.</para>

<screen>
import java.applet.*;
import java.awt.*;
import java.awt.event.*;
public class Kruseduller extends Applet
                         implements MouseListener<emphasis>, MouseMotionListener</emphasis>
{
  public void init()
  {
    this.addMouseListener(this);
    <emphasis>this.addMouseMotionListener(this);</emphasis>
  }

  Point punkt;

  public void mousePressed(MouseEvent hændelse) <emphasis>// kræves af MouseListener</emphasis>
  {
    punkt = hændelse.getPoint();
  }

  public void mouseDragged(MouseEvent hændelse) <emphasis>// kræves af MouseMotionListener</emphasis>
  {
    Point gammeltPunkt = punkt;
    punkt =   hændelse.getPoint();
    Graphics g = getGraphics();
    g.drawLine(gammeltPunkt.x, gammeltPunkt.y, punkt.x, punkt.y);
  }

  public void mouseReleased (MouseEvent hændelse){} <emphasis>// kræves af MouseListener</emphasis>
  public void mouseClicked (MouseEvent event) {}    <emphasis>// kræves af MouseListener</emphasis>
  public void mouseEntered (MouseEvent event) {}    <emphasis>// kræves af MouseListener</emphasis>
  public void mouseExited (MouseEvent event) {}     <emphasis>// kræves af MouseListener</emphasis>
  public void mouseMoved (MouseEvent hændelse) {}<emphasis>// kræves af MouseMotionListener</emphasis>
}
</screen>

<para>
  Da vi ikke husker de gamle punkter, kan vi ikke gentegne
  krusedullen, når systemet kalder paint().
</para>
</sect2>  

<sect2 id="java-events-ekstra-eksempel-lytte-til-knap">
<title>Lytte til en knap</title>

<para>
  Det vigtigste interface til programmering af grafiske
  brugergrænseflader er ActionListener med metoden
  actionPerformed(). Den bruges bl.a. til at lytte til, om knapper
  bliver trykket på. Her er et eksempel, hvor den tekst, der er
  valgt med musen i et tekstområde, bliver kopieret til det andet
  tekstområde, når man trykker på knappen:
</para>

<screen>
import java.applet.*;
import java.awt.*;
import java.awt.event.*;

public class LytTilKnap extends Applet <emphasis>implements ActionListener</emphasis>
{
  private TextArea t1, t2;
  private Button kopierKnap;

  public void init()
  {
    String s = &quot;Her er en tekst.\nMark&eacute;r noget af den og tryk Kopier...&quot;;
    t1 = new TextArea(s, 5,20);
    add(t1);
    kopierKnap = new Button(&quot;Kopi&eacute;r&gt;&gt;&quot;);
    <emphasis>kopierKnap.addActionListener(this)</emphasis>;
    add(kopierKnap);
    t2 = new TextArea( 5,20);
    t2.setEditable(false);
    add(t2);
  }

  public void actionPerformed(ActionEvent e)   <emphasis>// kræves af ActionListener</emphasis>
  {
    t2.setText(t1.getSelectedText() );
  }
}
</screen>

<para>Læg mærke til, at vi registrerer lytteren (som er applet-objektet selv) hos knappen.</para>

</sect2>
</sect1> 

<sect1 id="java-events-ekstra-eksempler-lyttere-metoder">
<title>Lyttere og deres metoder</title>

<para>Det følgende er en oversigt over lytter-interfaces og deres hændelser.</para>

<sect2 id="java-events-ekstra-eks-lyttere-action">
<title>ActionListener</title>

<para>
  Hændelsen ActionEvent sendes af den pågældende
  komponent, når brugeren klikker på en knap, trykker retur
  i et tekstfelt, vælger noget i et afkrydsningsfelt, radioknap,
  menu eller lignende.
</para>

<screen>
public interface ActionListener {
    public void actionPerformed(ActionEvent e); 
}
</screen>
</sect2>     

<sect2 id="java-events-ekstra-eks-lyttere-comp">
<title>ComponentListener</title>

<para>
  Sendes af alle grafiske komponenter (Button, TextField, Checkbox
  osv., og Frame, Applet, Panel,...), når de hhv. ændrer
  størrelse, position, bliver synlige eller usynlige.
</para>

<screen>
public interface ComponentListener {
    public void componentResized(ComponentEvent e); 
    public void componentMoved(ComponentEvent e); 
    public void componentShown(ComponentEvent e); 
    public void componentHidden(ComponentEvent e);
}
</screen>
</sect2>   

<sect2 id="java-events-ekstra-eks-lyttere-focus">
<title>FocusListener</title>

<para>
  Sendes af komponenter, når de får fokus (dvs. hvis
  brugere trykker på en tast, vil det påvirke netop
  denne komponent). Kun en komponent har fokus ad gangen.
</para>

<screen>
public interface FocusListener {
    public void focusGained(FocusEvent e);
    public void focusLost(FocusEvent e);
}
</screen>
</sect2>   

<sect2 id="java-events-ekstra-eks-lyttere-item">
<title>ItemListener</title>

<para>
  Sendes af afkrydsningsfelter og radioknapper, når en
  mulighed bliver krydset af eller fravalgt.
</para>

<screen>
public interface ItemListener {
    void itemStateChanged(ItemEvent e); 
}
</screen>
</sect2>   

<sect2 id="java-events-ekstra-eks-lyttere-key">
<title>KeyListener</title>

<para>
  Sendes af komponenten, der har fokus. keyPressed() kaldes, når
  en tast bliver trykket ned (bemærk, at der godt kan være
  flere taster trykket ned samtidig, f.eks. Ctrl og C) og
  keyReleased(), når den bliver sluppet. Er man mere
  overordnet interesseret i, hvad brugeren taster ind, bør man
  benytte keyTyped(), der svarer til, at brugeren har trykket en tast
  ned og sluppet den igen.
</para>

<screen>
public interface KeyListener {
    public void keyTyped(KeyEvent e);
    public void keyPressed(KeyEvent e);
    public void keyReleased(KeyEvent e);
}
</screen>
</sect2>   

<sect2 id="java-events-ekstra-eks-lyttere-mouse">
<title>MouseListener</title>

<para>
  Kan sendes af alle grafiske komponenter. mousePressed() kaldes,
  når en museknap bliver trykket ned, og mouseReleased(), når
  den bliver sluppet igen. Er man mere overordnet interesseret i
  at vide, om brugeren har klikket et sted (trykket ned og sluppet på
  det samme sted), bør man benytte mouseClicked().
  mouseEntered() og mouseExited() sendes, når musen går
  ind over hhv. væk fra komponenten.
</para>

<screen>
public interface MouseListener {
    public void mousePressed(MouseEvent e);
    public void mouseReleased(MouseEvent e);
    public void mouseClicked(MouseEvent e);

    public void mouseEntered(MouseEvent e);
    public void mouseExited(MouseEvent e);
}
</screen>
</sect2>   

<sect2 id="java-events-ekstra-eks-lyttere-mouse-motion">
<title>MouseMotionListener</title>

<para>
  Kan sendes af alle grafiske komponenter. mouseDragged() kaldes,
  når en museknap er trykket ned og hives (bevæges, mens
  museknappen forbliver trykket ned). mouseMoved() svarer til, at musen
  flyttes (uden nogle knapper trykket ned).
</para>

<screen>
public interface MouseMotionListener {
    public void mouseDragged(MouseEvent e);
    public void mouseMoved(MouseEvent e);
}
</screen>
</sect2>   

<sect2 id="java-events-ekstra-eks-lyttere--text">
<title>TextListener</title>

<para>Sendes af tekstfelter (TextField og TextArea), når brugeren ændrer teksten.</para>

<screen>
public interface TextListener {
    public void textValueChanged(TextEvent e); 
}
</screen>
</sect2>   

<sect2 id="java-events-ekstra-eks-lyttere-window">
<title>WindowListener</title>

<para>
  Sendes af vinduer (Frame og Dialog), når de åbnes,
  forsøges lukket, lukkes, minimeres, gendannes, får fokus
  og mister fokus.
</para>

<screen>
public interface WindowListener {
    public void windowOpened(WindowEvent e);
    public void windowClosing(WindowEvent e);
    public void windowClosed(WindowEvent e);
    public void windowIconified(WindowEvent e);
    public void windowDeiconified(WindowEvent e);
    public void windowActivated(WindowEvent e);
    public void windowDeactivated(WindowEvent e);
}
</screen>

</sect2>   
</sect1>   
</chapter> 

