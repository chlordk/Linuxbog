<chapter id="filtjek">
<title>Har du haft net-indbrud?</title>

<indexterm><primary>netindbrud</primary></indexterm>

<para>
Selvom du er omhyggelig med, hvordan din Linux-maskine er sat op, og du
håndterer adgangskoder med stor omhu, må du regne med at dit system
aldrig er fuldstændig sikkert. Der kan stadig være en sikkerhedskritisk
fejl i et af de programmer du bruger. En adgangskode kan blive
opsnappet. Eller du kan have overset noget kritisk i opsætningen af din
maskine. Det kan også være, at du af funktionalitetshensyn har valgt at
benytte programmer med kendte fejl til trods for de sikkerhedsproblemer,
det medfører. Derfor er det vigtigt, at du holder øje med, om der har
været fremmede inde på dit system.
</para>

<para>
Lad os nu uden at tænke på hvordan antage, at en dygtig eller heldig
cracker har fået root-adgang til din maskine. Denne cracker
har med andre ord adgang til alt på din maskine, og har måske endda 
installeret nye programmer med hemmelige bagdøre på maskinen, der gør
det nemmere at komme ind næste gang.
</para>

<para>
En person, der trænger ind på andres computere, har ofte et formål 
med det. Det kan være en som vil snuse rundt efter informationer,
eller en som alene skal bruge maskinen til at angribe andres
maskiner. Ofte vil han samtidig forsøge at sløre sit eget spor. 
Der er mange muligheder for adfærd for en cracker, som du skal kunne følge. 
I denne situation er det crackeren, der vælger angrebstidspunkt og metode, 
og du kan i praksis ikke overvåge alt 24 timer i døgnet på maskinen. Men 
ligesom du kan opdage en indbrudstyv i dit hjem, kan du opdage ham på din 
computer ved at lytte efter unormal adfærd og sætte tyverialarmer op, 
som vækker dig ved indbrud. 
</para>

<para>
Det, vi skal se nærmere på i dette kapitel, er den interne overvågning
af din maskine. Vi vil se på, hvordan du som systemadministrator
kan finde ud af, at der har været indbrud, og hvordan du kan se hvad 
crackeren har lavet om på maskinen. Vi vil komme ind på de generelle 
forholdsregler, du som systemadministrator kan tage, samt en række værktøjer, 
som kan hjælpe dig. 
</para>

<para>
En cracker kan finde på at installere skadelige programmer på din
computer. Her en stribe fra <ulink url="http://www.userfriendly.org/">User Friendly</ulink>
</para>

<figure id="uf980915-fig" float="1">
<title>User Friendly</title>
<graphic fileref="uf980915.&magic;"  scale="40"></graphic>
</figure>  



<sect1 id="log-filer">
<title>Log-filer</title>
<indexterm><primary>logfiler</primary></indexterm>


<para>
Pas på med tillid til logfilerne. Husk, at du ikke kan stole på
din maskine, hvis der har været indbrud. Hvis dine logfiler ikke
afslører et indbrud, kan der godt have været et, som er blevet
skjult. Hvis logfilen viser, at der har været indbrud, så kan du
som regel godt stole på den.
</para>

<para>
Det er en god idé at bruge de retningslinier for oprydning, som
CERT/CC har angivet på hjemmesiden 
<ulink url="http://www.cert.org/nav/recovering.html">
http://www.cert.org/nav/recovering.html </ulink>
</para>

<para>
En Linux-maskine gemmer løbende en masse information om, hvad der sker 
på maskinen. Informationen gemmes i log-filer, som kan bl.a. bruges til 
at spore unormal anvendelse.
</para>

<sect2 id="messages">
<title>/var/log/messages</title>
<indexterm><primary>/var/log/messages</primary></indexterm>
<indexterm><primary>logfiler</primary><secondary>/var/log/messages</secondary></indexterm>

<para>
Den vigtigste log-fil er <filename>/var/log/messages</filename>, hvor mange af de
vigtige systeminformationer gemmes, såsom

<itemizedlist mark="bullet">
 <listitem><para>hvem der loggede ind på maskinen hvornår</para></listitem>
 <listitem><para>hvem der skiftede identitet med su</para></listitem> 
 <listitem><para>hvornår maskinen blev genstartet</para></listitem>
 <listitem><para>internetopkoblinger med ppp</para></listitem>
 <listitem><para>start og stop af tjenester, såsom NFS</para></listitem>
 <listitem><para>fejl i kernemoduler</para></listitem>
</itemizedlist>

og meget andet.
</para>

<para>
Lad os se på nogle eksempler som alle er brudstykker fra
<filename>/var/log/messages</filename>. Vi ser, at det kræver lidt
øvelse at overskue alt i messages-filen, men modsat er der mange
nyttige informationer om systemets drift. Lad os først se på <xref
linkend="var-log-messages-systemstart"/> nedenfor, som viser de linjer,
der kommer i messages-filen, når systemet startes.
</para>

<example id="var-log-messages-systemstart">
<title><filename>/var/log/messages</filename> ved systemstart</title>
<programlisting>
Jun 30 20:17:45 hven syslogd 1.3-3: restart.
Jun 30 20:17:45 hven syslog: syslogd startup succeeded
Jun 30 20:17:45 hven syslog: klogd startup succeeded
Jun 30 20:17:45 hven kernel: klogd 1.3-3, log source = /proc/kmsg started.
Jun 30 20:17:45 hven kernel: Inspecting /boot/System.map-2.2.5-15
Jun 30 22:17:16 hven rc.sysinit: Loading default keymap succeeded 
Jun 30 22:17:16 hven rc.sysinit: Setting default font succeeded 
Jun 30 22:17:16 hven swapon: swapon: warning: /dev/hdb1 has insecure permissions 0660, 0600 suggested 
Jun 30 22:17:16 hven rc.sysinit: Activating swap partitions succeeded 
Jun 30 22:17:16 hven rc.sysinit: Setting hostname hven.galaxy.dk succeeded 
Jun 30 22:17:16 hven fsck: /dev/hda3: clean, 56029/311296 files, 748112/1242864 blocks 
Jun 30 22:17:16 hven rc.sysinit: Checking root filesystem succeeded 
Jun 30 22:17:16 hven isapnp: Board 1 has Identity 70 01 00 00 00 01 00 93 05:  ALS0001 Serial No 16777216 [checksum 70] 
Jun 30 22:17:16 hven isapnp: ALS0001/16777216[0]{ALS100 Media Audio Controller}: Ports 0x220 0x330; IRQ5 DMA1 DMA5 --- Enabled OK 
Jun 30 22:17:16 hven isapnp: /etc/isapnp.conf:293 -- Fatal - resource conflict allocating 8 bytes of IO at 388 (see /etc/isapnp.conf) 
Jun 30 20:17:47 hven kernel: Loaded 6721 symbols from /boot/System.map-2.2.5-15.
Jun 30 20:17:47 hven kernel: Symbols match kernel version 2.2.5.
Jun 30 20:17:47 hven kernel: Loaded 146 symbols from 11 modules.
Jun 30 20:17:47 hven kernel: Linux version 2.2.5-15 (root@porky.devel.redhat.com) (gcc version egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)) #1 Mon Apr 19 22:21:09 EDT 1999 
Jun 30 20:17:47 hven kernel: Detected 120003903 Hz processor. 
Jun 30 20:17:47 hven kernel: Console: colour VGA+ 80x25 
Jun 30 20:17:47 hven kernel: Calibrating delay loop... 47.82 BogoMIPS 
Jun 30 20:17:47 hven kernel: Memory: 63140k/65536k available (996k kernel code, 412k reserved, 928k data, 60k init) 
Jun 30 20:17:47 hven kernel: VFS: Diskquotas version dquot_6.4.0 initialized 
Jun 30 20:17:47 hven kernel: CPU: Intel Pentium 75 - 200 stepping 06 
Jun 30 20:17:47 hven kernel: Checking 386/387 coupling... OK, FPU using exception 16 error reporting. 
Jun 30 20:17:47 hven kernel: Checking 'hlt' instruction... OK. 
</programlisting>
</example>

<para>
Ud fra den ottende linje kan vi se, at harddisk partitionen
<filename>/dev/hdb1</filename> ikke har fornuftige læse/skriverettigheder. 
Vi kan også se, et ISA lydkort ALS100 bliver
detekteret af isapnp-pakken, men at det ikke er konfigureret
rigtigt. Derefter en del information om selve maskin-typen,
CPU-hastighed (det er fra en Pentium 120 MHz PC). Du bør lige 
tjekke fra tid til anden, at der ikke
logges fejl, såsom problemet med forkerte læse/skrive rettigheder
eller hardwareproblemer. I øvrigt kan den opmærksomme læser se, at nogle
tidspunkter er kl. 22 og andre 20. Dette skyldes, at nogle dele af
systemet kører med lokaltid og andre med GMT. 
Vi kan også her nævne, at du med kommandoen "dmesg" kan se de
fleste af de systemmeddelelser, som blev vist på skærmen under
systemopstart. Tilsvarende information findes i <filename>/var/log/dmesg</filename>.
</para>

<para>
<xref linkend="var-log-messages-remote-logins"/> viser hvordan telnet,
ftp og SSH logins gemmes i messages-filen.  Den 3. juli kl. 10.06
kommer brugeren robin ind fra IP nummer 192.168.0.10 via secure shell
(SSH). To minutter efter logges der ud igen.  Dagen efter er det en
telnet login, som går igennem PAM-adgangskodetjek (PAM_pwdb).  Kun et
minut er robin inde. Endelig er brugeren tuck kommet ind via ftp
(ftpd) den 4. juli og kun blevet fire sekunder.
</para>

<example id="var-log-messages-remote-logins">
<title><filename>/var/log/messages</filename> ved remote logins</title>
<programlisting>
Jul  3 10:06:51 hven sshd[763]: log: Connection from 192.168.0.10 port 1023
Jul  3 10:06:57 hven sshd[763]: log: RSA authentication for robin accepted.
Jul  3 10:06:57 hven sshd[765]: log: executing remote command as user robin
Jul  3 10:08:58 hven sshd[763]: log: Closing connection to 192.168.0.10
Jul  4 23:07:07 hven PAM_pwdb[24298]: (login) session opened for user robin by (uid=0)
Jul  4 23:08:10 hven PAM_pwdb[24298]: (login) session closed for user robin
Jul  4 23:10:28 hven ftpd[24757]: FTP LOGIN FROM tuck @ vinglad.linus.dk [192.168.0.199], 
Jul  4 23:10:32 hven ftpd[24757]: FTP session closed
</programlisting>
</example>

<para>
Lad os dernæst se på en internetopkobling via modem (ppp). Vi kan i de
følgende linjer fra messages-filen se, at brugeren har koblet op via
"/dev/ppp0". De to linjer med identd skyldes secure
shell. Der er lavet en SSH-login til www.sslug.dk under opkoblingen.
De sidste linjer viser, at der er sendt 55395 bytes til maskinen
og 80884 bytes fra maskinen under opkoblingen.
</para>

<example id="var-log-messages-internet-optkobling">
<title><filename>/var/log/messages</filename> ved internetopkobling</title>
<programlisting>
Aug 18 21:28:35 hven ifup-ppp: pppd started for ppp0 on /dev/modem at 115200
Aug 18 21:28:36 hven pppd[10800]: pppd 2.3.7 started by root, uid 0
Aug 18 21:29:03 hven pppd[10800]: Serial connection established.
Aug 18 21:29:03 hven pppd[10800]: Using interface ppp0
Aug 18 21:29:03 hven pppd[10800]: Connect: ppp0 <--> /dev/modem
Aug 18 21:29:11 hven pppd[10800]: Remote message: Login Succeeded
Aug 18 21:29:12 hven pppd[10800]: local  IP address 212.54.78.125
Aug 18 21:29:12 hven pppd[10800]: remote IP address 212.54.64.66
Aug 18 21:29:16 hven identd[10930]: Connection from www.sslug.dk
Aug 18 21:29:16 hven identd[10930]: from: 192.38.71.98 ( www.sslug.dk ) for: 1132, 25
Aug 18 21:35:14 hven pppd[10800]: Terminating on signal 15.
Aug 18 21:35:14 hven pppd[10800]: Connection terminated.
Aug 18 21:35:14 hven pppd[10800]: Connect time 6.2 minutes.
Aug 18 21:35:14 hven pppd[10800]: Sent 80884 bytes, received 55395 bytes.
Aug 18 21:35:14 hven pppd[10800]: Exit.
</programlisting>
</example>

<para>
Det sidste eksempel fra messages-filen er et sted, hvor man kan se, at
bruger nummer 500 (robin) skifter bruger-ID over til root for at kunne 
stoppe sendmail. Derefter logges det at su-root sessionen afsluttes.
</para>

<example id="var-log-message-su">
<title><filename>/var/log/messages</filename> ved su og nedlukning af 
sendmail</title>
<programlisting>
jul 26 22:15:04 hven PAM_pwdb[4220]: (su) session opened for user root by (uid=500)
jul 26 22:15:25 hven sendmail: sendmail shutdown succeeded
jul 26 22:15:41 hven PAM_pwdb[4220]: (su) session closed for user root
</programlisting>
</example>

<para>
<filename>/var/log/messages</filename> kan blive meget stor. Da alle
systemhændelser bliver logget i mellem hinanden, kan det således være
svært umiddelbart at skelne de interessante beskeder i mængden.
</para>

</sect2>

<sect2 id="log-rotate">
<title>Rotering af log-filer</title>
<indexterm><primary>Rotering af logfiler</primary></indexterm>
<indexterm><primary>logfiler</primary><secondary>rotering af</secondary></indexterm>

<para>
Du kan opleve at finde filer i <filename>/var/log</filename>, der
f.eks. hedder <filename>messages.1</filename> og
<filename>messages.2</filename>, eller
<filename>messages.1.gz</filename>.  Dette skyldes, at man på
Linux-systemer ofte har et cron-job sat op til at rotere logfilerne,
herunder messages-filen. Dette sker f.eks. en gang i døgnet eller en
gang om ugen. I så fald indeholder
<filename>/var/log/messages</filename> kun det nyeste log-information,
som er sket siden sidste rotation.
</para>

<para>
Under Red Hat styres rotering med af logfiler med logrotate-pakken,
som konfigureres i filen <filename>/etc/logrotate.conf</filename>
</para>
</sect2>

<sect2 id="secure">
<title>/var/log/secure</title>
<indexterm><primary>/var/log/secure</primary></indexterm>
<indexterm><primary>logfiler</primary><secondary>/var/log/secure</secondary></indexterm>
<para>
Fordi vigtig information så nemt kan drukne i anden information i
messages-filen, findes filen <filename>/var/log/secure</filename>, som
kun indeholder sikkerhedsrelateret information. <xref
linkend="var-log-secure"/> viser <filename>/var/log/secure</filename>
filen. Brugerne robin og john logget ind via terminal tty1 nogle
gange, og en telnet og en ftp login findes i bunden af
filen. <filename>/var/log/secure</filename> kan være en meget vigtig
fil at se igennem jævnligt.
</para>

<example id="var-log-secure">
<title><filename>/var/log/secure</filename></title>
<programlisting>
Aug 15 14:45:16 hven login: LOGIN ON tty1 BY robin
Aug 16 15:13:53 hven login: LOGIN ON tty1 BY john
Aug 16 21:00:55 hven login: LOGIN ON tty1 BY robin
Aug 17 11:22:41 hven login: LOGIN ON tty1 BY john
Aug 17 17:45:16 hven login: LOGIN ON tty1 BY robin
Aug 18 07:11:29 hven login: LOGIN ON tty5 BY robin
Aug 18 12:49:56 hven login: LOGIN ON tty1 BY john
Aug 18 20:17:07 hven login: LOGIN ON tty1 BY robin
Aug 18 23:07:03 hven in.telnetd[24297]: connect from 192.168.0.1
Aug 18 23:07:07 hven login: LOGIN ON 3 BY robin FROM linus
Aug 18 23:10:24 hven in.ftpd[24757]: connect from 192.168.0.1
</programlisting>
</example>
</sect2>

<sect2 id="maillog">
<title>/var/log/maillog</title>

<indexterm><primary>/var/log/maillog</primary></indexterm>
<indexterm><primary>logfiler</primary><secondary>/var/log/maillog</secondary></indexterm>

<para>
En anden vigtig fil er <filename>/var/log/maillog</filename>, hvor
information om post til og fra maskinen gemmes. Vi kan i 
<xref linkend="var-log-secure"/> se, at robin sender en besked fra
hven.galaxy.dk til &lt;sslug-teknik@sslug.dk&gt;.  Postloggen kan nemt
blive ekstremt stor og svær at overskue.
</para>

<example id="var-log-maillog">
<title><filename>/var/log/maillog</filename></title>
<programlisting>
Jun 18 23:00:42 robin sendmail[1966]: XAA01966: 
from=&lt;robin@hven.dk&gt;, size=496, class=0, pri=30496,
nrcpts=1, 
msgid=&lt;Pine.LNX.4.10.9906182300010.662-100000@hven.dk&gt;, 
proto=ESMTP, relay=robin@localhost
Jun 18 23:00:44 hven sendmail[1968]: XAA01966: 
to=&lt;sslug-teknik@sslug.dk&gt;, delay=00:00:02, xdelay=00:00:02, 
mailer=esmtp, relay=mail.sslug.dk. [192.38.71.98], 
stat=Sent (ok 929739581 qp 27375)
</programlisting>
</example>
</sect2>

<sect2 id="rapportering-log">
<title>Rapporting af log-meddelelser</title>

<indexterm><primary>logfiler</primary><secondary>rapportering</secondary></indexterm>

<para>
I stedet for at læse logfiler direkte kan man installere programmer,
der kan sortere i logfilerne og fremhæve vigtige ting. Vi vil nu se nærmere på
LogWatch, der kan hentes fra 
<ulink url="http://www.kaybee.org/~kirk/html/linux.html">http://www.kaybee.org/~kirk/html/linux.html</ulink>.
</para>

<indexterm><primary>logwatch</primary></indexterm>

<para>
LogWatch sættes normalt op til at køre en gang i døgnet via Linux
maskinens crontab system. LogWatch skanner alle log-filerne og
sender en samlet rapport til systemadministratoren som et e-brev. I
filen <filename>/etc/log.d/logwatch.conf</filename> er det muligt at konfigurere
LogWatch. Det kan f.eks. anbefales at sætte parameteren "Detail" fra
"Low" til "High", så alle login og "su" hændelser rapporteres. 
</para>

<para>
LogWatch kan f.eks. give følgende e-brev tilbage for en dags trafik
for en maskine, der ikke kører telnet, men som tillader folk at hente filer
over FTP og at logge ind med
SSH. Man kan se, at ftp dæmonen har overført 5&nbsp;Mb, og filerne er
vist sammen med navnet på modtagermaskinen. På maskinen har der i
PAM_pwdb (dvs. adgangskodehåndteringen) været en række skift af
bruger-id. Desuden er alle SSH opkoblinger til maskinen vist, 
derefter cron kørsler og endelig de problemer, som navneserveren har
haft igennem dagen. Let og overskueligt at se igennem. Har man pludselig
logins fra uventede domæner, er det noget, der skal kigges nærmere på.
</para>

<example id="logwatch">
<title>logwatch</title>
<programlisting>
 --------------------- ftpd-messages Begin ------------------------ 

Anonymous FTP Logins:
   laptop.etsted.dk (192.168.0.10) : IE40user@ - 4 Time(s)
   dbserver.etandetsted.dk (192.168.0.98) :  mozilla@ - 1 Time(s)
   dbserver.etandetsted.dk (192.168.0.99) :  getright@ - 2 Time(s)

 ---------------------- ftpd-messages End ------------------------- 



 --------------------- ftpd-xferlog Begin ------------------------ 
TOTAL KB OUT: 5339KB (5MB)
TOTAL KB IN: 0KB (0MB)

Outgoing Anonymous FTP Transfers:
   /pub/linuxbog.pdf.gz -> dbserver.etandetsted.dk
   /pub/utils/cvsstat -> 192.168.1.10
   /pub/linuxbog.pdf.gz -> 192.168.10.12
   /pub/videoclips/Linux1601.mpg -> ns.etandetsted.dk
   /pub/utils/cvs2html -> cvs.etandetsted.dk

 ---------------------- ftpd-xferlog End ------------------------- 



 --------------------- Identd Begin ------------------------ 
Identd Lookups:


 ---------------------- Identd End ------------------------- 



 --------------------- PAM_pwdb Begin ------------------------ 

SU Sessions:
      robin(uid=71) -> john - 1 Time(s)
      john(uid=0) -> root - 3 Time(s)
      robin(uid=0) -> root - 5 Time(s)
      sherif(uid=0) -> root - 1 Time(s)
      john(uid=5192) -> charles - 1 Time(s)
      robin(uid=5192) -> charles - 5 Time(s)

Opened Sessions:
   Service: su
      User nobody - 1 Time(s)
      User news - 1 Time(s)

 ---------------------- PAM_pwdb End ------------------------- 



 --------------------- SSHD Begin ------------------------ 

Connections:
   laptop.etsted.dk (192.168.0.10) : 1 Connection(s)
   dbserver.etandetsted.dk (192.168.0.98) : 27 Connection(s)

 ---------------------- SSHD End ------------------------- 



 --------------------- Cron Begin ------------------------ 

Commands Run:
   User root:
      /usr/bin/mrtg /etc/mrtg/mrtg.cfg >/dev/null 2>&1: 288 Time(s)
      /usr/local/bin/daily_backup: 1 Time(s)
      run-parts /etc/cron.daily: 1 Time(s)
      run-parts /etc/cron.hourly: 24 Time(s)


 ---------------------- Cron End ------------------------- 


 --------------------- Named Begin ------------------------ 

**Unmatched Entries**
   Response from unexpected source ([157.151.95.204].53): 1 Time(s)
   bad referral (US !< RESTON.VA.US): 6 Time(s)
   bad referral (US !< SF.CA.US): 6 Time(s)

 ---------------------- Named End ------------------------- 
</programlisting>
</example>

<indexterm><primary>logcheck</primary></indexterm>

<para>
Et alternativ til LogWatch er <command>logcheck</command>, som kan hentes fra 
<ulink url="http://sourceforge.net/projects/sentrytools/">
http://sourceforge.net/projects/sentrytools/</ulink>
Ideen er den samme, og virkemåden er umiddelbart også ens. Blot er
formatteringen af log-rapporter ikke sorteret så elegant som
med LogWatch. Prøv begge programmer, og vælg selv dit foretrukne.
</para>


<para>
Problemet med programmer som LogWatch og <command>logcheck</command> er bl.a., at
programmet normalt køres en gang per døgn (dette kan ændres). Ergo kan
et eventuelt indbrud sløres, f.eks. ved at personen blot sletter
linjer i log-filerne svarende til egen adfærd. Det eneste alternativ
er nok, at væsentlig log-information skrives til en enhed som kun
accepterer tilføjelser - ikke redigering af data. Nogle bruger
f.eks. en almindelig gammel linje-printer, som udskriver
log-meddelelser straks efter hændelsen.
</para>
</sect2>

<sect2 id="alarmer">
<title>Alarmer</title>
<indexterm><primary>alarmer</primary></indexterm>

<para>
Du kan lave dine egne hjemmelavede alarmer på dit Linux-system.
Har du en maskine med meget få logins, kan det være interessant,
at der afsendes et e-brev til en fast ekstern modtager, hver gang der
laves login på din maskine. Brevet kan f.eks. sendes til en
mobiltelefon eller pager, for at du med det samme kan få at vide, når der er
gæster. Der er mange muligheder for, hvordan dette kan gøres. Den enkle
måde er at tilføje følgende til filerne <filename>/etc/csh.login</filename> og 
<filename>/etc/profile</filename>.
</para>

<programlisting>
mail < /dev/null > /dev/null -s "login at `date`" robin@hven.herne.dk
</programlisting>

<para>
Derved får "robin@hven.herne.dk" en besked med tidspunkt for login,
uden at den, der logger ind, kan se det. Personen kan dog bagefter selv
læse <filename>/etc/csh.login</filename> og <filename>/etc/profile</filename> og se, at der er 
lagt en fælde, og evt. vælge at forsvinde. En interessant beskrivelse af 
indbrud, alarmer og fælder kan læses på <ulink url="http://www.ja.net/CERT/Cheswick/berferd.txt">http://www.ja.net/CERT/Cheswick/berferd.txt</ulink>
</para>

<para>
En anden mulighed er at bruge en almindelig brugerkonto på systemet til at 
have et crontab job, der køres hvert minut, og ser hvem der er logget 
ind (via "who") og sender resultatet til din eksterne maskine, 
hvis der er brugere logget ind. Man vælger selv hvordan den type og
niveau af alarm der sættes op, alt efter hvor paranoid man er :-)
</para>

<para>
Man skal dog passe på, at de alarmsystemer, der sættes op, ikke åbner
et nyt sikkerhedshul. Som eksempel kan det være, at du har ændret
kildeteksten til <command>/bin/login</command>, så der logges mere
information til f.eks. <filename>/var/log/messages</filename>, men du kom måske
ved et uheld til at få en buffer overflow fejl, som efterfølgende
udnyttes af en ihærdig cracker. Det er heldigvis sådan, at den person,
som bryder ind på din maskine, ikke i forvejen ved, hvor du lægger
fælder, og forhåbentlig ikke har en chance for at vide, hvordan de
virker, før du har opdaget indbruddet.
</para>

<para>
<indexterm><primary>backup</primary></indexterm>
Husk også de følgende tre ting: Backup, backup og backup. Lav jævnligt
backup af din maskine. Har du haft besøg af en ondsindet cracker, kan
du have mistet alt. Sørg også for at have ældre backups. Hvis dit system 
har været inficeret igennem et stykke tid, er dine nyeste backups også
inficerede. En sund strategi er, at have en system backup, som du laver
før systemet sættes i drift - alle ændringer skrives ned, så de kan
geninstalleres fra din sikre backup.  Derudover skal du lave jævnlige
separate backups af dine brugeres data.
</para>
</sect2>

<sect2 id="aendret-filsystem">
<title>&AElig;ndringer af filsystemet</title>
<indexterm>
 <primary>filsystem</primary>
 <secondary>Følge ændringer</secondary>
</indexterm>

<para>
Du bør holde øje med hvilke filer på dit system, der ændrer sig.
Forestil dig, at en person er kommet ind på din maskine og har
haft held til at erstatte <command>passwd</command> kommandoen med en ny
binær fil, som dels laver det den skal men samtidig sender
login-navn og password til supercracker@passwordcracker.net. 
Det er ikke urealistisk svært at lave sådan et program, idet alle har 
adgang til kildeteksten til Linux-systemet, og dermed kan lave ændringerne 
uden at behøve at skrive hele programmet forfra. Er crackeren først inde 
på dit system, og har han lavet programændringerne på forhånd, skal han blot 
erstatte de rigtige programmer med de nye. 
Det er normalt de binære filer i <filename>/usr/bin</filename>, 
<filename>/bin</filename>, <filename>/usr/sbin/</filename>, <filename>/usr/X11R6/bin</filename> og 
<filename>/sbin</filename>, man skal passe på, samt biblioteker, som normalt findes 
i <filename>/lib</filename>, <filename>/usr/X11R6/lib</filename> og <filename>/usr/lib</filename>.
</para>

<para>
Generelt leder man efter ændringer af filsystemet ved at tjekke
fire ting:
</para>

<itemizedlist mark="bullet">
<listitem><para>Om ejerskab/gruppeejerskab er ændret</para></listitem>
<listitem><para>Om filens rettigheder (permissions) er ændret</para></listitem>
<listitem><para>Om filstørrelse er ændret</para></listitem>
<listitem><para>Om indholdet er ændret</para></listitem> 
</itemizedlist>

<para>
Hvis vi kan stole på output af kommandoen "ls", så er de tre første nemme at
undersøge. Man kan f.eks. sammenligne output fra "ls -l FILNAVN" før og
efter ændringer.
</para>

<para>
Det er dog straks sværere at tjekke, om indholdet af filen er
intakt. For et filsystem med en stor mængde data er det ikke muligt at
have en kopi af hele filsystemet og tjekke byte for byte, om de er ens. Det
tager for meget diskplads og alt for lang tid. Derfor er en del
matematisk forskning gået på at udtænke metoder til at generere en
funktion, som tager f.eks. indholdet af en fil og ud fra dette
genererer et langt tal, som i princippet skal være unikt. Denne
hash-funktion må således kun give det samme tal for to filer, hvis de er 
helt ens. Dermed kan man kontrollere, om en fil er ændret, blot ved at
generere et tal for filen med hash-funktionen og sammenligne med
det tal, filen gav sidste gang. Giver hash-funktionen 
samme output, antager vi, at filen er urørt.
</para>

<para>
<indexterm><primary>hash</primary></indexterm>
<indexterm><primary>CRC</primary></indexterm>
<indexterm><primary>MD5</primary></indexterm>
<indexterm><primary>md5sum</primary></indexterm>

En simpel hashfunktion kunne være summen af alle de tal, som filen
består af. Den er blot alt for nem at forfalske. I litteraturen vil
man ofte støde på CRC-tjek, som er relativt nemme funktioner at
beregne. Mange komprimeringsprogrammer anvender CRC til at
kontrollere, om det, der pakkes ud, er i orden. Til at opdage
ændringer af filer med tanke på sikkerhed, er CRC-tjek ikke gode
nok. Et hyppigt anvendt alternativ er MD5, som genererer en 128 bit
kode ud fra en fil. På de fleste Linux-systemer findes programmet
<command>md5sum</command>, som køres med et filnavn som argument.
</para>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>md5sum /bin/ls</userinput>
dc2ac9d1c1658d5b4381ca2c280425ee  /bin/ls
</screen>

<para>
Et karakteristisk træk ved MD5 algoritmen er at selv små
ændringer i input giver radikale forskelle i checksummen. Det er
en almindelig antagelse, at det er umuligt at ændre filen
<command> /bin/ls </command> uden at det kan afsløres ved hjælp
af MD5-sum af den oprindelige version.  Lad os lave et eksempel
med en lille fil, der får indholdet ændret, men hvor man kan ikke
se udefra, at den er ændret.
</para>

<screen>
<prompt>[robin@hven robin]$</prompt> <userinput>echo "robin og tuck" > testfil</userinput> 
<prompt>[robin@hven robin]$</prompt> <userinput>touch -d 19990719 testfil</userinput>
<prompt>[robin@hven robin]$</prompt> <userinput>ls -al testfil</userinput>
-rw-r--r--   1 robin      robin            14 Jul 19 00:00 testfil  
<prompt>[robin@hven robin]$</prompt> <userinput>md5sum testfil</userinput>
e829f144f6e43d55daa442baf1462544  testfil   

<prompt>[robin@hven robin]$</prompt> <userinput>echo "tuck og robin" &gt; testfil</userinput> 
<prompt>[robin@hven robin]$</prompt> <userinput>touch -d 19990719 testfil</userinput>
<prompt>[robin@hven robin]$</prompt> <userinput>ls -al testfil</userinput>
-rw-r--r--   1 robin      robin            14 Jul 19 00:00 testfil  
<prompt>[robin@hven robin]$</prompt> <userinput>md5sum testfil</userinput> 
18b8426e71e781dc68f8f4ee415963cc  testfil   
</screen>

<para>
Vi ser, at filen i de to tilfælde indeholder de samme bogstaver, har
samme længde (14 tegn), har samme datostempel (efter lidt snyd
med touch-kommandoen) - men MD5-tjeksummen er helt forskellig. Derfor
ved vi, at indholdet ikke det samme. Prøv selv at eksperimentere med dette.
</para>

<para>
Der er andre hash-funktioner end MD5, såsom MD4 og Snefru. 
Det er ikke så vigtigt, hvilken algoritme man anvender (selv om
en inkarneret kryptoanalytiker vil natuligvis protestere her!).
Det vigtige er at kontrollere. Men selvfølgelig er MD5 den
bedste, og nemmeste, da den jo kan kontrollere ud fra en
tidligere genereret filliste.
</para>

<para>
Vi vil nu omtale tre forskellige programmer til at hjælpe dig med at
lave tjek af ændringer i filsystemet; RPM, Tripwire og Aide. 

</para>
</sect2>
</sect1>

<sect1 id="rpm-Va">
<title>rpm -Va</title>
<indexterm><primary>rpm -Va</primary></indexterm>

<para>
Med Linux-distributionerne SuSE, Caldera Open Linux, Mandrake og
Red Hat følger programmet "rpm", som er et pakkestyringsprogram. 
Rpm holder styr på, hvad der er
installeret. Samtidig er der mulighed for at holde styr på 
ændringer af filerne. Du kan tjekke alle RPM-styrede filer med
kommandoen "rpm -Va".  Denne kommando vil tjekke for følgende
ændringer siden installation:
</para>

<itemizedlist mark="bullet">
 <listitem><para>S - &AElig;ndringer af filstørrelse</para></listitem>
 <listitem><para>M - Mode - &AElig;ndringer i permissions og filtype</para></listitem>
 <listitem><para>5 - Tjek af MD5-sum</para></listitem>
 <listitem><para>? - Normalt problemer med at læse filen</para></listitem>
 <listitem><para>L - Symlink</para></listitem>
 <listitem><para>D - Device ændringer</para></listitem>
 <listitem><para>U - User - &AElig;ndringer i ejerskab</para></listitem>
 <listitem><para>G - Group - &AElig;ndringer i gruppeejerskab</para></listitem>
 <listitem><para>T - Mtime - Modifikationstidspunkt</para></listitem>
 <listitem><para>missing - Hvis en fil er forsvundet</para></listitem>
 <listitem><para>c - Opsætningsfil.</para></listitem>
 <listitem><para>. - Testen gik fint.</para></listitem>
</itemizedlist>

<para>
Bogstaverne til venstre er dem, der vises på skærmen, når man kører
<command>rpm -Va</command>. Alle de filer, der er ændret i siden
installationen, bliver vist. Hver af de ændrede filer vises efter
formatet "SM5?LDUGT c filnavn", hvor hver af bogstaverne er forklaret
ovenfor. Hvis den enkelte test gik godt, vises et punktum, ellers
vises det bogstav for testen, der gik galt. Et typisk output kan være
(i forkortet form)
</para>

<example>
<title>rpm -Va</title>
<programlisting>
..?..... c /etc/securetty
S.5....T c /etc/services
....L...   /usr/local
.M......   /usr/local/bin
.M......   /usr/local/lib
..?.....   /usr/share/afterstep/ascp/help/animate.hlp
..?.....   /usr/share/afterstep/ascp/help/audio.hlp
..?.....   /usr/share/afterstep/ascp/help/autoexec.hlp
..?.....   /usr/share/afterstep/ascp/help/pager.hlp
missing    /usr/share/afterstep/ascp/icons/wharf2.xpm
missing    /usr/share/afterstep/ascp/icons/woptions.xpm
....L... c /etc/localtime
......G.   /etc/aliases.db
S.5....T c /etc/rc.d/init.d/sendmail
S.5....T c /etc/sendmail.cf
S.5....T c /etc/sendmail.cw
..5....T c /etc/sysconfig/sendmail
S.5....T   /var/log/sendmail.st
</programlisting>
</example>

<para>
Nu er det op til dig, som systemadministrator, at vurdere hvilke
ændringer, der er i orden, og hvilke, der kan være farlige. Der vil
altid være ændringer, siden pakkerne er installeret, men nogle af
ændringerne må gerne være der.  Du ved forhåbentlig nogenlunde, hvad
du selv har ændret. &AElig;ndringer, du ikke selv kan huske at have
foretaget, kan vurderes ud fra, hvor filerne ligger og hvilken type
filer, det drejer sig om. F.eks. virker filerne i
<filename>/usr/share/afterstep/</filename> ikke særlig farlige. Det er
nok bare noget opsætning af Window manageren Afterstep. Tegnet "?"
tyder på at problemet i skyldes, at brugeren, der har udført
kommandoen, ikke har rettigheder til at læse
<filename>/etc/securetty</filename> og de fire hlp-filer. Vi kan se,
at dette faktisk er tilfældet
</para>

<screen>
<prompt>[robin@hven robin]$</prompt> <userinput>ls -al /etc/securetty</userinput>
-rw-------  1 root  root  40 Sep 4  1995 /etc/securetty
</screen>

<para>
Om filerne faktisk er ændrede, kan vi således først se, hvis vi kører
"rpm -Va" som root. Vi kan også se, at der åbenbart mangler to
xpm-filer (billeder) i "/usr/share/afterstep/ascp/icons". 
</para>

<para>
Næste punkt er at kataloget <filename>/usr/local</filename> efter installation
faktisk blev flyttet til en anden partition, så det er fint, at der er
meldt fejl der. Filen <filename>/etc/localtime</filename> er 
et symbolsk link og en
opsætningsfil ("L" og det lille "c"). Da Linux blev installeret,
skulle man vælge hvilken tidszone man var i - og så ændrede filen sig 
naturligvis.  Kun ved at se hvor linket peger hen, kan man se, at det nok 
_nu_ er i orden. Bemærk, at linket senere kan ændres til at pege på 
noget andet, måske noget "farligt", men vi vil stadig kun se samme 
fejl-meddelelse.
</para>

<programlisting>
lrwxrwxrwx  1 root  root  39 May 15 16:27 /etc/localtime -> ../usr/share/zoneinfo/Europe/Copenhagen
</programlisting>

<para>
Det ses også, at en stribe sendmail-filer er blevet ændret. Det passer 
med, hvad jeg som systemadministrator på maskinen ved, at der er lavet - 
men bemærk dog, at der kan være senere ændringer af de samme filer. 
På denne måde kan vi fortsætte. Viden om systemet er med andre
ord nødvendig, men rpm er er godt sted at starte. 
</para>

<para>
Ovenstående gennemgang med "rpm -Va" afslørede et grimt problem. Efter
systeminstallation og systemtilpasning er der allerede sket en del
ændringer.  Man kan måske ikke overskue, hvad der er
farlige ændringer, og hvilke der er banale. Et andet problem er, at "rpm
-Va" ikke kan kontrollere programmer på systemet, der er installeret 
udenom rpm, såsom WordPerfect og StarOffice. Hvad værre er, så kan man
teoretisk tænke sig, at en cracker afinstallerede en pakke, og
installerede en farlig rpm-pakke i stedet for, hvor alle tjek med
rpm gik glat. Eller installerede en falsk udgave af selve rpm programmet! 
Derfor er det ønskeligt at få et godt supplement til rpm.
</para>

<para>
Desuden er der Linux-distributioner, der ikke bruger rpm, f.eks. Slackware
og Debian.
</para>
</sect1>

<sect1 id="tripwire">
<title>Tripwire</title> 
<indexterm><primary>tripwire</primary></indexterm>

<para>
Tripwire fra 1992, skabt af Eugene Spafford og Gene Kim, og
kildeteksten stod fra begyndelsen til rådighed for brugerne.
Siden dengang har en kvart million brugere downloadet 
<emphasis>Tripwire Academic Source.</emphasis>
Siden da er der kommet en kommerciel version med lidt flere
features og support. (se <ulink
url="http://www.tripwire.com">http://www.tripwire.com</ulink>).
Til Linux findes der stadig en Open Source udgave, som er udgivet
under GNU General Public Licence. Open Source udgaven kan hentes fra
<ulink url="http://www.tripwire.org">http://www.tripwire.org</ulink>.
Der er flere svar på den slags spørgsmål på <ulink
url="http://www.tripwire.org/qanda/index.php"> dette
site.</ulink>
</para>

<para>
Tripwire er et program, der kan tjekke filsystemet for ændringer. Der
genereres en database for alle filer i filtræet. For hver fil gemmes
informationer om sidste ændringsdato, størrelse, indhold, ejer osv. Når
først databasen er genereret, er det nemt at tjekke og opdatere for
ændringer.
</para>

<para>
Den database, der genereres med Tripwire sker ud fra en opsætningsfil
<filename>/etc/tripwire/twpol.txt</filename>, som beskriver hvilke dele
af filsystemet, som er med i overvågningen og den opførsel de enkelte filer
må tillades. Til eksempel må filen <filename>/etc/shadow</filename> godt 
ændre sig - da dette sker hver gang en bruger ændrer password. Modsat 
så ville det være højst underligt hvis filen 
<filename>/bin/ps</filename> har ændret sig over en nat. Det program bruges
til at vise hvilke processer, der kører på systemet.
Ergo skal opsætningen af overvågningen være skræddersyet til det enkelte 
system. I praksis betyder det at den Red Hat-opsætningsfil, der kommer med 
Tripwire skal sandsynligvis modificeres, hvis man vil køre med Debian eller 
lign.
</para>

<para>
Tankegangen med Tripwire er at man sætter programmet op 
<emphasis>før</emphasis> maskinen kommer på netværket og før brugere
kommer på - dvs. før maskinen er i risiko-zonen. På dette tidlige
tidspunkt genereres en "snapshot" af hvordan det oprindelige system
ser ud. For hver af de vigtige filer på systemet gemmes information 
om fil-størrelse, ændringsdatoer og tjeksummer på filerne, så man
kan afgøre om filerne er ændret. 
</para>

<para>
Når maskinen så kommer i drift skal man køre Tripwire hver dag, time
eller hvad der nu passer systemadministratoren bedst. Hver eneste gang
genereres en rapport typisk per e-post til systemadministratoren over
systemets status i forhold til systemets oprindelige "snapshot" - denne
rapport skal der være tid til at læse roligt igennem!
</para>

<para>
Hvis rapporten viser at der er ændringer, så må systemadministratoren 
tage stilling til om det er i orden eller om der er tegn på indbrud -
hvis det sidste er tilfældet, bør maskinen tages af netværket med det samme. 
</para>

<para>
Det kan også ske at der er ændringer på systemet, som er i orden. Hvis 
man f.eks. installerer en ny RPM-pakke (fra en betroet kilde) så vil Tripwire
melde at der er nye programmer typisk i <filename>/usr/bin</filename>. 
I dette tilfælde skal man så opdatere Tripwire-databasen med ens "snapshot".
</para>

<sect2 id="twpol">
<title>Tripwire installation og opsætning</title>
<para>
Tripwire installeres på Red Hat ved at man henter en 
<filename>.tar.gz</filename>-fil, der indeholder en RPM-pakke, som kan 
installeres. Tjek at den fil du henter har den rigtige tjeksum - jfr.
<ulink url="http://www.tripwire.org/downloads/index.php">http://www.tripwire.org/downloads/index.php</ulink>. Kør <command>md5sum</command> på 
<filename>.tar.gz</filename>-filen:

<screen>
<prompt>[root@hven /root]# </prompt><userinput>md5sum tripwire-2.3-47.i386.tar.gz</userinput>
661a54a6429d4ecb0d756de5046da48f  tripwire-2.3-47.i386.tar.gz  
<prompt>[root@hven /root]# </prompt><userinput>tar xzvf tripwire-2.3-47.i386.tar.gz</userinput>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh tripwire-2.3-47.i386.rpm</userinput>
</screen>
</para>

<para>
Derefter kommer der tekst på skærmen om hvad der skal gøres følgende:
Først skal filen <filename>/etc/tripwire/twpol.txt</filename> ses
igennem og rettes til. Det vigtigste at starte med i denne fil er
følgende sektion (som startes med @@). Her er kommentarerne oversat til
dansk.
</para>

<programlisting>
@@section FS
SEC_CRIT      # Kritiske filer, der ikke må ændre sig
SEC_SUID      # Binære SUID eller SGID-filer, der ikke må ændre sig
SEC_BIN       # Binære filer, der ikke må ændre sig
SEC_CONFIG    # Opsætningfiler, der tilgås ofte og ændres sjældent
SEC_LOG       # Filer, der vokser i størrelse - ændrer ikke ejerskab
SEC_INVARIANT # Kataloger, som aldrig ændrer ejerskab eller rettigheder
</programlisting>

<para>
I slutningen af afsnittet er der også inddelinger efter 
risiko-niveau. 
</para>

<programlisting>
SIG_LOW       # Ikke-kritiske filer med lav sikkerheds-risiko
SIG_MED       # Ikke-kritiske filer med væsentlig sikkerheds-risiko
SIG_HI        # Kritiske filer med væsentlig sikkerheds-risiko
</programlisting>

<para>
Ideen er at man kan betegne filer og kataloger med de ovennævnte risiko-niveau.
Til eksempel kan vi fortsætte ned i opsætningsfilen til "OS-Utilities":
</para>

<programlisting>
  ################
 #              ##
################ #
#              # #
# OS Utilities # #
#              ##
################
(
  rulename = "Operating System Utilities",
  severity = $(SIG_HI)
)
{
  /bin/cat                             -> $(SEC_CRIT) ;
  /bin/date                            -> $(SEC_CRIT) ;
  /bin/dd                              -> $(SEC_CRIT) ;
...
}
</programlisting>


<para>
Afsnittet er forkortet her. Forståelsen er at filer såsom
<filename>/bin/cat</filename> er meget kritiske og må aldrig
ændre sig i indhold, ejerskab eller rettigheder. Den lille tekst box
over "rulename" er kun til pynt.
</para>

<para>
Opsætningsfilen <filename>/etc/tripwire/twpol.txt</filename> bør
redigeres svarende til det enkelte system - dette kræver
systemkendskab. Alternativet er at bruge den originale fil og måske
opnå en falsk sikkerhed. Så tag lige tiden til at se filen igennem. Bemærk at
der flere steder står anført linjer med hash-tegn foran, f.eks. 
</para>

<programlisting>
# /dev/printer -> $(SEC_CONFIG) ; # Uncomment if you have a printer device   
</programlisting>

<para>
Ideen er at man bør se disse linjer igennem specifikt for at se om du har
de filer eller ej. Har man filen, så skal linjen typisk med ved at fjerne
udkommenteringen.
</para>

<para>
Filer såsom 
<filename>/proc/rtc</filename>, <filename>/proc/mdstat</filename> og 
<filename>/usr/sbin/fixrmtab</filename> findes ikke på Red Hat 7.1 i
standard installation - det er eksempler på filer, dermed linjer i
opsætningsfilen som skal fjernes.
</para>


<sect3 id="twinstall">
<title>Opstart af Tripwire databasen</title>
<para>
Efter opsætningsfilen er rettet til, så skal Tripwire opsætningen krypteres.
</para>

<screen>
<prompt>[root@hven /root]#</prompt> <userinput>/etc/tripwire/twinstall.sh</userinput>
</screen>

<para>
Det første der nu skal vælges er et løsen
(eng. "passphrase") som anvendes til at kryptere
databasen så andre ikke kan ændre den.
</para>

<para>
Nu skal der vælges fire løsener.  De fire løsener bør
principielt vælges forskellige, men en doven systemadministrator vil
nok vælge dem ens (læs; dette er langt det nemmeste).  
Først for ens <emphasis>site</emphasis>, dvs.  for
hele maskin-parken. Dernæst for den enkelte maskine. Dernæst skal
opsætningsfilen også signeres med et løsen &ndash; ideen er at man
heller ikke skal have lov til at kunne ændre den opsætningfil, som
databasen er laves til <filename>/etc/tripwire/tw.cfg</filename>
(Gemmes også i klar tekst i
<filename>/etc/tripwire/twcfg.txt</filename>). Denne fil gemmer kun på
systemparametre, såsom hvilet program der anvendes når
tripwire-rapportering skal sendes til systemadministratoren.  Til slut
skal der vælges et løsen for resten af opsætningen, dvs.
"policy"-delen, dvs. hvilke filer skal skannes og hvordan.  Filen der
gemmes er <filename> /etc/tripwire/tw.pol</filename> (Gemmes også i
klar tekst under <filename>/etc/tripwire/twpol.txt</filename>).  De to
filer i klar tekst, mens <filename>
/etc/tripwire/tw.pol</filename> og
<filename>/etc/tripwire/tw.cfg</filename> endelig ikke må ændres
manuelt - de er binære og krypterede.
</para>

<para>
For at resultater af skanning af filsystemet kan sendes til
systemadministatoren per e-post så skal man indsætte e-postadressen
for hver af de afsnit, der er defineret i filen. Bemærk at der er 
et komma til at afslutte linjen før <literal>emailto = MODTAGERENS_ADRESSE</literal>. Hvis man har tænkt sig at køre tripwire tjek via crontab, så er
dette ikke nødvendigt, da man får output i et brev alligevel.
</para>


<programlisting>
# Tripwire Binaries
(
  rulename = "Tripwire Binaries",
  severity = $(SIG_HI),
  emailto = sysadm@hven.dk
)
{
  $(TWBIN)/siggen                      -> $(SEC_BIN) ;
  $(TWBIN)/tripwire                    -> $(SEC_BIN) ;
  $(TWBIN)/twadmin                     -> $(SEC_BIN) ;
  $(TWBIN)/twprint                     -> $(SEC_BIN) ;
}
</programlisting>

<para>
Nu skal Tripwire databasen genereres og du skal bruge dit løsen
til den lokale maskine, som blev sat lige før dette. Det kan let tage 
5-10 minutter alt efter maskintype og diskkapacitet.
</para>

<screen>
<prompt>[root@hven /root]#</prompt> <userinput>/usr/sbin/tripwire --init</userinput>
</screen>

<para>
Det mest sandsynlige er at man får ca. 50 fejl af filer, der ikke
findes på systemet. De filer bør man nu udkommentere i
<filename>/etc/tripwire/twpol.txt</filename> og lave en ny database.
Dette kunne man have undgået ved at gennemgå
<filename>/etc/tripwire/twpol.txt</filename> meget forsigtigt.
</para>

<screen>
<prompt>[root@hven /root]#</prompt> <userinput>/usr/sbin/twadmin --create-polfile /etc/tripwire/twpol.txt</userinput>
Please enter your site passphrase:
Wrote policy file: /etc/tripwire/tw.pol
<prompt>[root@hven /root]#</prompt> <userinput>rm -f /var/lib/tripwire/*.twd</userinput>
<prompt>[root@hven /root]#</prompt> <userinput>/usr/sbin/tripwire --init</userinput>
Please enter your local passphrase:
Parsing policy file: /etc/tripwire/tw.pol
Generating the database...
*** Processing Unix File System ***
</screen>
</sect3>

<sect3 id="tripwire-tjek">
<title>Tjek af maskinen med Tripwire</title>
<para>
Nu er man klar til at tjeke maskinen - dette kan køres manuelt (dette
kan man gøre uden brug af løsen - men man skal dog være root).
</para>

<screen>
<prompt>[root@hven /root]#</prompt> <userinput>/usr/sbin/tripwire --check</userinput>
</screen>

<para>
Det er lidt bøvlet at se gamle tripwire rapporter, da disse også er
krypterede. Kommandoen er som følger, hvor XX skal erstattes af det filnavn,
man har på disken. De er navngivet efter maskinnavn og dato.
</para>

<screen>
<prompt>[root@hven /root]#</prompt> <userinput>/usr/sbin/twprint -m r --twrfile /var/lib/tripwire/report/XX.twr</userinput>
</screen>


<para>
Lad os nu prøve at lave om på maskinen. Vi opgraderer procmail RPM-pakken og
se hvad Tripwire finder. Bemærk de 5 modificerede "user binaries", som dernæst
vises nedenfor.
</para>

<programlisting>
Note: Report is not encrypted.
Tripwire(R) 2.3.0 Integrity Check Report

Report generated by:          root
Report created on:            Wed Oct 31 00:29:46 2001
Database last updated on:     Never

===============================================================================
Report Summary:
===============================================================================

Host name:                    k6.sslug
Host IP address:              192.168.1.3
Host ID:                      None
Policy file used:             /etc/tripwire/tw.pol
Configuration file used:      /etc/tripwire/tw.cfg
Database file used:           /var/lib/tripwire/k6.sslug.twd
Command line used:            /usr/sbin/tripwire --check 

===============================================================================
Rule Summary: 
===============================================================================

-------------------------------------------------------------------------------
  Section: Unix File System
-------------------------------------------------------------------------------

  Rule Name                       Severity Level    Added    Removed  Modified 
  ---------                       --------------    -----    -------  -------- 
  Invariant Directories           66                0        0        0        
  Temporary directories           33                0        0        0        
* Tripwire Data Files             100               1        0        0        
  Critical devices                100               0        0        0        
* User binaries                   66                0        0        5        
  Tripwire Binaries               100               0        0        0        
  Libraries                       66                0        0        0        
  File System and Disk Administraton Programs
                                  100               0        0        0        
  Kernel Administration Programs  100               0        0        0        
  Networking Programs             100               0        0        0        
  System Administration Programs  100               0        0        0        
  Hardware and Device Control Programs
                                  100               0        0        0        
  System Information Programs     100               0        0        0        
  Application Information Programs
                                  100               0        0        0        
  Shell Releated Programs         100               0        0        0        
  (/sbin/getkey)
  Critical Utility Sym-Links      100               0        0        0        
  Critical system boot files      100               0        0        0        
  Critical configuration files    100               0        0        0        
  System boot changes             100               0        0        0        
  OS executables and libraries    100               0        0        0        
  Security Control                100               0        0        0        
  Login Scripts                   100               0        0        0        
  Operating System Utilities      100               0        0        0        
  Shell Binaries                  100               0        0        0        
  Root config files               100               0        0        0        

Total objects scanned:  19398
Total violations found:  6

===============================================================================
Object Detail: 
===============================================================================

-------------------------------------------------------------------------------
  Section: Unix File System
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
Rule Name: User binaries (/usr/bin)
Severity Level: 66
-------------------------------------------------------------------------------
  ----------------------------------------
  Modified Objects: 5
  ----------------------------------------

Modified object name:  /usr/bin

  Property:            Expected                    Observed                    
  -------------        -----------                 -----------                 
* Modify Time          Sat Oct 20 17:15:27 2001    Wed Oct 31 00:29:44 2001    


Modified object name:  /usr/bin/formail

  Property:            Expected                    Observed                    
  -------------        -----------                 -----------                 
* Inode Number         443138                      442309                      
* Size                 26736                       26900                       
* Modify Time          Sat Jan  6 23:13:11 2001    Wed Jul  4 00:55:12 2001    
* CRC32                CB/Sfy                      DJdys6                      
* MD5                  A4Lbe9dcQUPMqvFeZQ/qnF      CazhNDHWCoxKh46uXHElej      


Modified object name:  /usr/bin/lockfile

  Property:            Expected                    Observed                    
  -------------        -----------                 -----------                 
* Inode Number         443139                      442310                      
* Size                 11124                       12440                       
* Modify Time          Sat Jan  6 23:13:11 2001    Wed Jul  4 00:55:12 2001    
* Blocks               24                          32                          
* CRC32                CWnVmO                      A6qdab                      
* MD5                  C2Lvt5A+Kx3cjOYgGCdHd9      BQpFs92xGV/D+G+aPGbG8T      


Modified object name:  /usr/bin/mailstat

  Property:            Expected                    Observed                    
  -------------        -----------                 -----------                 
* Inode Number         443140                      442311                      
* Modify Time          Sat Jan  6 23:13:10 2001    Wed Jul  4 00:55:11 2001    


Modified object name:  /usr/bin/procmail

  Property:            Expected                    Observed                    
  -------------        -----------                 -----------                 
* Inode Number         443141                      442312                      
* Size                 63484                       75420                       
* Modify Time          Sat Jan  6 23:13:11 2001    Wed Jul  4 00:55:12 2001    
* Blocks               136                         160                         
* CRC32                A4Xs3q                      D/ZVXm                      
* MD5                  Af2+FBsxRo0LTeWeLim2iB      Bez1qNLwdxqPMYR4GPq8EB      



-------------------------------------------------------------------------------
Rule Name: Tripwire Data Files (/var/lib/tripwire)
Severity Level: 100
-------------------------------------------------------------------------------
  ----------------------------------------
  Added Objects: 1
  ----------------------------------------

Added object name:  /var/lib/tripwire/k6.sslug.twd

===============================================================================
Error Report: 
===============================================================================

No Errors

-------------------------------------------------------------------------------
*** End of report ***

Tripwire 2.3 Portions copyright 2000 Tripwire, Inc. Tripwire is a registered
trademark of Tripwire, Inc. This software comes with ABSOLUTELY NO WARRANTY;
for details use --version. This is free software which may be redistributed
or modified only under certain conditions; see COPYING for details.
All rights reserved.
</programlisting>
</sect3>


<sect3 id="tripwire-update">
<title>Opdatering af Tripwire-databasen</title>

<para>
Nu er der selvfølgelig problemer - er det rimeligt at de filer at
ændret?  I dette tilfælde er det, da filerne kommer fra den nye
RPM-pakke.  Generelt skal man køre Tripwire-skanningen før man
installerer en RPM-pakke for at være sikker på at der ikke er andre
ændringer. Dernæst skal man så opdatere databasen med systemets
snapshot, så man ikke længere ser de opgraderede pakker med i
listen. Igen skal XX erstattes med den seneste .twr-fil for maskinen.
</para>

<screen>
<prompt>[root@hven /root]#</prompt> <userinput>/usr/sbin/tripwire --update --twrfile /var/lib/tripwire/report/XX.twr</userinput>
</screen>

<para>
Op kommer en fil startet i <command>vi</command>-editoren, hvor en bid af den
er som følger:
</para>

<programlisting>
Remove the "x" from the adjacent box to prevent updating the database
with the new values for this object.
 
Modified:
[x] "/usr/bin"
[x] "/usr/bin/formail"
[x] "/usr/bin/lockfile"
[x] "/usr/bin/mailstat"
[x] "/usr/bin/procmail"
</programlisting>

<para>
Tripwire foreslår, at man opdaterer alle de
ændrede filer, så Tripwire ikke brokke sig over dem igen.
Hvis du ikke vil ændre så fjern det kryds (dvs. x) som er i tekst-boksen.
Når du forlader editoren skal man igen angive løsen for at opdatere.
Herefter vil Tripwire ikke brokke sig over den opdaterede procmail pakke.
</para>

<para>
Tripwire bør indsættes i <filename>/etc/cron.daily</filename>,
dvs. det bliver kørt en gang hver dag.  Resultatet bliver sendt til
root på maskinen per e-post.
</para>


<screen>
<prompt>[root@hven /root]#</prompt> <userinput>cat /etc/cron.daily/t</userinput>
#!/bin/sh  

/usr/sbin/tripwire --check
<prompt>[root@hven /root]#</prompt> <userinput>chmod +x /etc/cron.daily/t</userinput>
</screen>

<para>
Bemærk at det her ikke at valgt at kalde filen <filename>tripwire</filename>,
som ville være naturligt. Men det giver jo kun en angriber nemmere ved at se
at tripwire er sat op på maskinen.  Det er vigtigt at holde øje med at brevet
fra tripwire kommer på ca. det tidspunkt som de <emphasis>bør</emphasis> komme
på jfr. <filename>/etc/crontab</filename>.
</para>

<para>
Du kan finde en anden vejledning til at installere og bruge Tripwire på
<ulink url="http://www.net-security.org/text/articles/tripwire.shtml">http://www.net-security.org/text/articles/tripwire.shtml</ulink>.
</para>
</sect3>
</sect2>


</sect1>


<sect1 id="Aide">
<title>Aide</title>
<indexterm><primary>Aide</primary></indexterm>

<para>
Et interessant alternativ til Tripwire var Aide (Advanced Intrusion
Detection Environment), der kan findes på <ulink
url="http://www.cs.tut.fi/~rammer/aide.html">http://www.cs.tut.fi/~rammer/aide.html</ulink>.
Versionen er pr. oktober 2003 aide-0.9, hvilket indikerer, at
Aide ikke er helt færdigt. Det ser ud som om Aide ikke har
udviklet sig meget siden Tripwire blev Open Source, nyeste file i
aide-0.9 er fra Juni 2002.
</para>

<para>
Aide er Open Source (udgivet under GPL), det vil sige, at det kommer med
komplet kildetekst. Aide oversættes med <command>./configure</command> og
<command>make</command>, og installeres som systemadministrator (root) med
<command>make install</command>.
</para>

<para>
Efter oversættelsen og installationen ligger der en
test-opsætningsfil i doc-kataloget under det katalog, hvor du
oversatte aide. Du kan med <command>man aide.conf</command> se lidt om
syntaksen i opsætningsfilen. Selv aide-programmet er installeret
under <filename>/usr/local/bin</filename> (medmindre du har ændret i
opsætningen).  For at generere en database over dine filer, skrives
</para>


<screen>
<prompt>[root@hven /root]#</prompt> <userinput>aide --init</userinput>
</screen>

<para>
Hvor databasen kommer til at ligge, afgøres af opsætningsfilen, ligesom 
den afgør hvilke filer, der skal med i databasen. Ligeledes er de
regler, der afgør hvilke tjek, der skal udføres, defineret i aide.conf. 
Som standard leder aide efter opsætningsfilen i det katalog, hvor
du står, når du kører programmet. Opdatering af databasen sker med

<screen>
<prompt>[root@hven /root]#</prompt> <userinput>aide --update</userinput>
</screen>

og tjek af ændringer med

<screen>
<prompt>[root@hven /root]#</prompt> <userinput>aide --check</userinput>
</screen>
</para>

<para>
Se i øvrigt <command>man aide</command>. 
</para>

<para>
Vi ville gerne anbefale dette lovende program, men det er ikke færdigt
endnu, og hvis du bruger det, er det på eget ansvar. Vi tør imidlertid 
godt spå en lysende fremtid for aide og vil opfordre til, at man følger 
med i udviklingen og evt.  bidrager til projektet.
</para>

</sect1>


<sect1 id="skanning-af-filsystem">
<title>Generelt om skanning af filsystemet</title>

<indexterm><primary>skanne filsystem</primary></indexterm>


<para>
Ofte benyttede programmer til at skanne filsystemet kan findes på:
</para>

<itemizedlist mark="bullet">
<listitem>
<para>
<ulink url="http://biatchux.dmzs.com/">
F.I.R.E http://biatchux.dmzs.com/</ulink>.
</para>
</listitem>

<listitem>
<para>
<ulink url="http://www.mycert.mimos.my/resource/fic.htm">http://www.mycert.mimos.my/resource/fic.htm</ulink>.
</para>
</listitem>

<listitem>
<para>
<ulink url="http://www.knoppix.org/">
http://www.knoppix.org/,
</ulink> som jo kan bruges til at boote fra, så man er sikker på
en kerne, der ikke er kompromitteret.
</para>
</listitem>

<listitem>
<para>
<ulink url="http://www.knoppix-std.org/tools.html">
http://www.knoppix-std.org/tools.html
</ulink>, Knoppix Security Tool Distribution, har mange værktøjer til sikkerhedscheck.
</para>
</listitem>

<listitem>
<para>
Radmind er en anden file-checker.
<ulink url="http://rsug.itd.umich.edu/software/radmind/">http://rsug.itd.umich.edu/software/radmind/</ulink>.
</para>
</listitem>

</itemizedlist>




<para>
Når du skal tjekke filsystemet, bør du boote maskinen via
en "sikker" Linux-kerne. Det kan være fra en diskette eller cd-rom.
Ligeledes bør du bruge en cd-rom eller andet read only medie, til at
gemme program og database over filsystem på. Ellers kan 
du ikke tjekke filtræet mod
tidligere skanninger og være sikker på, at du får de reelle forskelle,
da en cracker så vil kunne ændre i din gemte database, filtjekprogrammet 
eller i selve Linux-kernen.
</para>

</sect1>
</chapter>

