<!-- $Id$ -->
<chapter id="net">
<title>Netværksprogrammer</title>

<para>
En vigtig start-kommentar, som kunne stå mange steder i denne bog er
at der med Linux-kerne 2.4 (f.eks. Red Hat 7.1 og Mandrake 8.0) er
problemer med at få tilgang til alle hjemmesider &ndash; det er et
problem som er forstået nu, se f.eks. <ulink
url="http://eltoday.com/article.php3?ltsn=2001-04-17-001-14-PS">http://eltoday.com/article.php3?ltsn=2001-04-17-001-14-PS</ulink>.
Løsningen er simpel. Tilføj følgende til f.eks. <filename>/etc/rc.d/rc.local</filename> (SuSE <filename>/etc/rc.d/boot.local</filename>):
</para>

<programlisting>
echo "0" &gt; /proc/sys/net/ipv4/tcp_ecn
</programlisting>

<para>
Lad os nu se på de programmer en netværksadministrator bør kende.
</para>
<indexterm>
 <primary>ping</primary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>ping</secondary>
</indexterm>

<sect1 id="ping">
<title>Ping</title>
<indexterm><primary>ping</primary></indexterm>
<para>
<command>ping</command> er et meget simpelt, men utroligt nyttigt
stykke værktøj, som bruges til at finde ud af, om der kan opnås
forbindelse til en IP-adresse. Sagt på en anden måde er
<command>ping</command> det program, du kan bruge til at finde ud af, om
der er "hul igennem".
</para>

<para>
<command>ping</command> bør altid være det første program, du bruger
til at diagnosticere et netværksproblem. Hvis det lykkes at pinge til
en adresse, ved du, at den fysiske forbindelse er i orden, og de basale
dele af netværket fungerer.
</para>

<para>
<command>ping</command> køres sådan her:
</para>

<screen>
<prompt>[tyge@hven ~]$</prompt> <userinput>ping -c 4 www.linux.org</userinput>
</screen>

<para>
Ved at skrive "-c 4" beder vi <command>ping</command> om at nøjes med
at sende fire pakker, ellers bliver den ved, indtil vi stopper den med Ctrl-c.
</para>

<para>
<command>ping</command> svarer tilbage:
</para>

<programlisting>
PING www.linux.org (198.182.196.51): 56 data bytes
64 bytes from 198.182.196.51: icmp_seq=0 ttl=42 time=479.3 ms
64 bytes from 198.182.196.51: icmp_seq=1 ttl=42 time=710.0 ms
64 bytes from 198.182.196.51: icmp_seq=1 ttl=41 time=730.0 ms
64 bytes from 198.182.196.51: icmp_seq=2 ttl=42 time=600.0 ms
64 bytes from 198.182.196.51: icmp_seq=3 ttl=42 time=370.0 ms

--- www.linux.org ping statistics ---
4 packets transmitted, 4 packets received, +1 duplicates, 0% packet loss
round-trip min/avg/max = 370.0/577.8/730.0 ms
</programlisting>

<para>
Vi kan først og fremmest se, at vi kan komme igennem til
www.linux.org, som har adressen 198.182.196.51, og at alt, hvad vi
sendte, kom tilbage igen, ja faktisk kom en af de fire pakker tilbage
to gange! Hele turen frem og tilbage tog i gennemsnit 577,8
millisekunder &ndash; altså lidt over et halvt sekund. Som Alan Cox på et
tidspunkt vittigt skrev: "Afstanden mellem Bombay og New York i den nye
tidsalder er kun 250 millisekunder".
</para>

<para>
Hvis du ikke skulle få nogen pakker tilbage, er dette dog ikke 
ensbetydende med, at der er noget galt med forbindelsen til 
den anden maskine, da den kan være sat op til IKKE at svare 
på <command>ping</command>.
</para>
</sect1>

<sect1 id="telnet">
<title>telnet</title>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>telnet</secondary>
</indexterm>
<indexterm>
 <primary>telnet</primary>
</indexterm>
<indexterm>
 <primary>ftp</primary>
 <secondary>spærring</secondary>
</indexterm>
<para>
Med <command>telnet</command> er det muligt at logge ind på andre
computere på netværket og arbejde tekstbaseret, som om du sad ved
computeren. Dette kan også foregå på tværs af platforme, f.eks. kan du
køre <command>telnet</command> på en Windows 95-maskine og derfra logge ind
på en Linux-maskine.
</para>

<para>
Ved normal brug startes <command>telnet</command> simpelthen med
navnet på den computer, du ønsker en forbindelse til &ndash; i nedenstående eksempel
<filename>gonzo</filename>. Når forbindelsen er oprettet, vil du blive
præsenteret for en <filename>login:</filename>-prompt, og du kan nu arbejde
videre, som om du sad ved den anden maskine.
</para>

<screen>
<prompt>[tyge@hven ~]$  </prompt><userinput>telnet gonzo</userinput>
Trying 192.168.100.5...
Connected to gonzo.codehell.lokal.
Escape character is '^]'.

Red Hat Linux release 6.0 (Hedwig)
Kernel 2.2.5 on an i586
login:
</screen>

<para>
Når du ikke længere har brug for telnet-forbindelsen, afbryder du
den med <command>exit</command>, og du er så tilbage på din egen maskine.
</para>

<para>
Hvis du angiver en port, som er bundet til en anden protokol, kan du også
have glæde af <command>telnet</command> til fejlfinding og testbrug. I
en snæver vending kan du bruge <command>telnet</command> til at hente
post hos din internetudbyder!
</para>

<para>
For at beskytte din installation er standardinstallationen lavet,
så "root" ikke kan logge ind fra en anden maskine med 
<command>telnet</command> og
<command>ftp</command>. Det er gjort for, at man ikke helt så nemt kan få
adgang til "root"s adgangskode. Hvis du har maskinen på et usikkert net &ndash;
f.eks. internettet &ndash; bør du ikke ændre på dette. I stedet kan du bruge
krypteret netkommunikation &ndash; f.eks. med "Secure Shell" eller den frie udgave
"OpenSSH" (sikker shell).
Har du et lukket net og mener, at du ikke gider at gå ind som almindelig
bruger og derefter lave <command>su - root</command>, kan du godt få lov
til at bruge <command>telnet</command> og
<command>ftp</command> som root udefra. Filerne
<filename>/etc/securetty</filename> og <filename>/etc/ftpusers</filename>
kan rettes eller direkte slettes, så kan root
logge ind udefra.
</para>

<para>
Som telnet-klient på en Microsoft Windows-maskine kan 
benyttes PuTTY, som også understøtter SSH. Med PuTTY 
ligner det langt mere det, at sidde direkte på en 
Linux-konsol i forhold til den telnet-klient, som 
følger med Microsoft Windows. Du kan se mere om PuTTY på  
<ulink url="http://www.chiark.greenend.org.uk/~sgtatham/putty/">http://www.chiark.greenend.org.uk/~sgtatham/putty/</ulink>
</para>
</sect1>

<sect1 id="ftp">
<title>ftp</title>

<indexterm>
 <primary>ftp</primary>
 <secondary>bruger, klient</secondary>
</indexterm>

<indexterm>
 <primary>ftp </primary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>ftp </secondary>
</indexterm>

<para>
Til at hente og sende filer over TCP/IP bruges programmet
<command>ftp</command>.
</para>

<para>
Hvis du skal bruge en fil fra <filename>sunsite.dk</filename>,
skriver du sådan her: 
</para>

<screen>
<prompt>[tyge@hven ~]$ </prompt> <userinput>ftp sunsite.dk</userinput>
</screen>

<para>
Når forbindelsen er klar, spørger computeren om brugernavn og
adgangskode. Du kan logge på som 'anonymous' (anonym) og give din
e-post-adresse som adgangskode. Bemærk, at e-postadressen ikke er synlig,
når den tastes ind.
</para>

<programlisting>
Connected to sunsite.dk.
220 sunsite.dk FTP server (NcFTPd 2.2.2) ready.
Name (sunsite.dk:tyge): <userinput>anonymous</userinput>
331 Guest login ok, send your complete e-mail address as password.
Password:
230-You are user #57 of 300 simultaneous users allowed.
230-
230-                 Welcome to SunSITE Denmark
230-                 ==========================
230-
230-SunSITE Denmark is located at Aalborg University, Institute of
230-Electronic Systems, Denmark, and is running on a SPARCserver 1000 with
230-4 CPUs, 416 MB Memory and approximately 110 GB storage.
230-

[lang velkomsthilsen klippet ud]

230-
230 Logged in anonymously.
Remote system type is UNIX.
Using binary mode to transfer files.
</programlisting>

<para>
Så står du ved en <prompt>ftp></prompt>-prompt, hvor du kan bevæge dig
rundt i katalogerne med <command>cd</command> og se indholdet med
<command>ls</command> - ganske som med en almindelig kommandolinje.
</para>

<screen>
<prompt>ftp></prompt> <userinput>ls</userinput>
200 PORT command successful.
150 Opening ASCII mode data connection for /bin/ls.
drwxrwxr-x  60 ftpuser  ftpusers      8192 Oct 10 16:23 disk1
drwxrwxr-x   9 ftpuser  ftpusers      2048 Oct 10 15:45 disk2
drwxr-xr-x   3 ftpuser  ftpusers        96 Jun  2 17:02 disk3
drwxr-xr-x   4 ftpuser  ftpusers        96 Sep  1 09:15 disk4
... [mange kataloger klippet væk]
226 Listing completed.
</screen>

<para>
Hvis du nu ved hjælp af <command>cd</command> navigerer ned i
<filename>/pub/os/linux/Red Hat</filename> og kører
<command>ls</command>, vil du se, at der ligger en fil ved navn
<filename>README</filename>, som du gerne vil hente hjem på din egen
maskine med kommandoen <command>get README</command>.
</para>

<para>
Nu er filen ikke særlig stor, så den er hentet ned på et øjeblik.
Hvis du henter større ting, er det som regel rart at kunne se, om der er
"flow" i overførslen. Med kommandoen <command>hash</command> kan du få
skrevet et #-tegn ("hash mark"), hver gang en blok er blevet overført.
</para>

<screen>
<prompt>ftp></prompt> <userinput>hash</userinput>
Hash mark printing on (1024 bytes/hash mark).
</screen>

<para>
Så henter du filen:
</para>

<screen>
<prompt>ftp></prompt> <userinput>get README</userinput>
local: README remote: README
200 PORT command successful.
150 Opening BINARY mode data connection for README (1155 bytes).
#
226 Transfer completed.
1155 bytes received in 0.227 secs (5 Kbytes/sec)
</screen>

<para>
<filename>README</filename> er en ganske lille fil, så det vil
kun blive til et enkelt #-tegn. Læg i øvrigt mærke til, at den er
overført som binær fil (BINARY) i modsætning til ren tekst (ASCII). Hvis du
bruger ASCII til overførslen, vil <command>ftp</command> konvertere
linjeskift i tekstfiler til det korrekte format for den maskine, der
modtager filen. Det er udmærket til tekstfiler, men kan smadre f.eks.
grafik og komprimerede filer fuldstændigt. Til at skifte mellem binær
og ASCII bruges ftp-kommandoerne <command>bin</command> og
<command>ascii</command>.
</para>

<para>
Nu er du færdig med at hente, hvad du skal bruge, og du logger ud igen
med kommandoen <command>quit</command>. Derefter er du tilbage på
kommandolinjen på din egen maskine.
</para>


<para>
<indexterm><primary>anonym ftp</primary></indexterm>
<indexterm><primary>ftp</primary><secondary>anonym</secondary></indexterm>
Hvis du har brug for at tilbyde anonym ftp på din Linux-maskine, kan du i
Red Hat Linux og nogle andre distributioner 
installere pakken "anonftp". Pakken foretager hele
opsætningen for dig. Filer, der skal kunne hentes via anonym ftp, lægges
så blot i <filename>/var/ftp/pub</filename>.
</para>

<para>
Alt det ovenstående handler om anonymt ftp. Hvis du er oprettet som bruger
på den maskine, du skal i kontakt med, kan du logge på med dit rigtige
brugernavn og adgangskode. På den måde får du så rettigheder til at
hente og sende filer i forhold til, hvad du er blevet tildelt af
administratoren.
</para>

<indexterm><primary>Midnight Commander</primary></indexterm>
<indexterm><primary>mc</primary></indexterm>

<para>
Man kan også bruge Midnight Commander til at hente filer 
fra en FTP-server. Du åbner Midnight Commander med kommandoen 
<command>mc</command>. Med funktionstasten F9 får du fat i 
menuen og trækker ned med pil-ned. Vælg så "FTP link...".
</para>

<para>
Indtast evt. brugernavn og adgangskode adskilt med et kolon (:), så 
et snabel-a (@), hvorefter navnet på selve FTP-serveren angives.
Hvis det drejer sig om en anonym FTP-server kan man udelade alt 
andet end serverens navn. Det kan se sådan ud:
</para>

<programlisting>
<userinput>brugernavn:adgangskode@ftp.server.net</userinput>
</programlisting>

<para>
En hurtig og grafisk metode til at overføre filer via FTP.
</para>
<sidebar>
 <para>
 Opsætning af ftp-tjeneste se afsnit <xref linkend="ftpd"/>.
 </para>
</sidebar>

</sect1>


<sect1 id="admin-wget">
 <title>wget</title>

<indexterm>
 <primary>wget</primary>
</indexterm>

<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>wget</secondary>
</indexterm>

<indexterm>
 <primary>hente hjemmesider</primary>
</indexterm>

<indexterm>
 <primary>afspejling af hjemmesider</primary>
</indexterm>

<indexterm>
 <primary>spejling af hjemmesider</primary>
</indexterm>

 <para>
  Fra tid til anden har du brug for at kunne hente en stribe hjemmesider, som
  du sidenhen vil kunne læse - for eksempel programvejledninger. Med Netscape
  er det besværligt, idet du skal trykke "gem" for hver enkelt side. Meget
  smartere er programmet <command>wget</command>, der kan hente rekursivt fra
  en http- eller ftp-side, såsom SSLUG's adresse.
 </para>

<screen>
<prompt>[tyge@hven ~]$ </prompt> <userinput>wget -r http://www.sslug.dk/</userinput></screen>

<para>
Ovenstående kommando henter hele SSLUG's hjemmeside.  Er det kun de
underliggende kataloger der skal hentes, tilføjes <command>-np</command>
(no parents). Dette kan bruges til at hente denne bog fra
www.sslug.dk.  I nogle HTML-sider er der angivet direkte link. Dette
kan fjernes med <command>-k</command>.
</para>

<screen>
<prompt>[tyge@hven ~]$ </prompt> <userinput>wget -r -k -np &linuxbogurl;/friheden/bog/</userinput></screen>

<para>
Et lille trick er at bruge <command>wget -c
ftp://ftpsted/storfil.tgz</command>, hvor <literal>-c</literal> står for continue og hvis
man husker den hver gang man henter store filer ned, så kan programmet finde ud af at
fortsætte afbrudte nedhentninger. Fed funktionalitet hvis man vil hente noget
stort over en ustabil forbindelse.
</para>

<para>
Se også <xref linkend="ncftp"/> om <command>ncftp</command> som kan
anvendes til at hente filer fra nettet.
</para>

</sect1>

<sect1 id="ncftp">
<title>ncftp</title>
<indexterm>
 <primary>ncftp</primary>
</indexterm>
<indexterm>
 <primary>ftp</primary>
 <secondary>klient</secondary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>ncftp</secondary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>ncftpget</secondary>
</indexterm>
<para>
Programmet <command>ncftp</command> er en ftp-lignende klient,
som er nem at bruge til anonym FTP.
Man skal ikke angive brugernavn og adgangskode.
Prøv f.eks.:

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>ncftp sunsite.dk</userinput>
</screen>
</para>

<para>
<command>ncftp</command> kan en masse ting der
gør det væsentligt nemmere at bruge end det basale ftp-program.
</para>

<sect2 id="ncftpget">
<title>ncftpget</title>
<indexterm><primary>ncftp</primary><secondary>ncftpget</secondary></indexterm>
<indexterm><primary>wget</primary><secondary>ncftpget</secondary></indexterm>

<para>
<command>ncftpget</command> er en videreudvikling af
<command>ncftp</command> som er specielt velegnet til at hente mange
filer fra en anden server, ved blot at angive hvad man vil hente på
kommandolinjen.  Skal du hente filer i
<filename>/home/mig/public_html</filename> fra maskinen
ftp.serv.dk, hvor du har en brugerkonto
<emphasis>mig</emphasis>, kan det gøres med følgende kommando:
</para>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>cd temp</userinput>
<prompt>[tyge@hven temp]$ </prompt><userinput>ncftpget -R -u mig ftp.serv.dk . public_html</userinput>
</screen>

<para>
<option>-R</option> gør at alle filer i underkataloger også
bliver hentet. <option>-u mig</option> angiver brugernavn og
da man ikke bør angive adgangskode på kommandolinjen, bliver
man spurgt om adgangskode. Punktum angiver det katalog du
står i, hvilket giver et godt overblik over hvor filerne havner.
<command>ncftpget</command> har mange flere muligheder
der er velegnede til automatiserede formål.
</para>
</sect2><!-- ncftpget -->

<sect2 id="ncftpput">
<title>ncftpput</title>
<indexterm>
 <primary>ncftpput</primary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>ncftpput</secondary>
</indexterm>
<indexterm>
 <primary>ncftp</primary>
 <secondary>ncftpput</secondary>
</indexterm>
<indexterm>
 <primary>ftp</primary>
 <secondary>ncftpput</secondary>
</indexterm>
<indexterm>
 <primary>Upload filer fra kommandolinjen</primary>
</indexterm>

<para>
<command>ncftpput</command>
er beregnet til at lægge mange filer op på en server.
Skal du lægge filer op fra <emphasis>/home/linus/public_html</emphasis>
til <emphasis>ftp.serv.dk</emphasis> i kataloget
<emphasis>/home/mig/html</emphasis>
hvor du har en brugerkonto <emphasis>mig</emphasis>,
kan det gøres med følgende kommando:
</para>

<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>ncftpput -R -u mig ftp.serv.dk html public_html</userinput>
</screen>

<para>
Se også <xref linkend="ncftpget"/>.
</para>
</sect2><!-- ncftpput -->

</sect1><!-- ncftp -->



<sect1 id="news-server">
<title>Linux som newsserver</title>
<indexterm><primary>News-server</primary></indexterm>
<indexterm><primary>NNTP</primary></indexterm>
<indexterm>
 <primary>Servere</primary>
 <secondary>News-server </secondary>
</indexterm>
<indexterm>
 <primary>NNTP-tjeneste</primary>
</indexterm>

<para>
Et naturligt spørgsmål ville være: "Hvorfor skulle man overhovedet
køre en lokal newsserver?". Det er der faktisk flere gode grunde til:
</para>

<itemizedlist mark="bullet">
<listitem>
 <para>
  Hvis der er flere på lokalnettet, som læser de samme nyhedsgrupper, så
  skal de kun hentes én gang.
 </para>
</listitem>

<listitem> 
 <para>
  Hvis man ikke lige kan overskue hvilken newsreader man ønsker at
  bruge, så står man med Leafnode frit for at teste 1.000 newsreadere og
  skal stadig kun hente serverlister én gang.
 </para>
</listitem>

<listitem> 
 <para>
  Hvis man læser news fra mere end én newsserver
  f.eks. <filename>news.sslug.dk</filename> og
  <filename>news.get2net.dk</filename>, så kan man "slå" disse
  serveres nyhedsgrupper sammen til en lokal server.
 </para>
</listitem>

<listitem> 
 <para>
  Man kan læse news Offline som hvis man var Online. 
 </para>
</listitem>

</itemizedlist>

<para>
Et valg af newsserver er Leafnode.
</para>

  <sect2 id="leafnode">
   <title>Leafnode, en NNTP-server til hobby-brug</title>

   <indexterm>
    <primary>Leafnode</primary>
   </indexterm>

   <indexterm>
    <primary>NNTP-servere</primary>
    <secondary>Leafnode</secondary>
   </indexterm>

   <para>
    Ud over de generelle argumenter for at køre nyhedsserver selv, kan
    vi tilføje følgende som angår newsserveren Leafnode:

    <itemizedlist mark="bullet">
     <listitem>
      <para>
       Rigtig nem opsætning
      </para>
     </listitem>

     <listitem> 
      <para>
       Ingen vedligeholdelse.
      </para>
     </listitem>

     <listitem> 
      <para>
       Leafnode er en dynamisk newsserver. Den henter kun de grupper
       der faktisk bliver læst.
      </para>
     </listitem>
    </itemizedlist>

    Så der er faktisk mange gode grunde til at bruge Leafnode, hvis
    man kun har brug for en simpel NNTP-server og ikke har brug for at
    "feede" til andre NNTP-servere.
   </para>

   <sect3 id="leafnode-installation">
    <title>Installation af Leafnode</title>

    <indexterm>
     <primary>installation af</primary>
     <secondary>Leafnode</secondary>
    </indexterm>

    <para>
     Installationen af Leafnode er nem.  På et Debian-system klares
     det med <command>apt-get install leafnode</command>.  Hvis din
     distribution ikke kommer med Leafnode må du hente kildeteksten
     hentes fra <ulink
     url="http://www.leafnode.org/">http://www.leafnode.org/</ulink>.
     Når man så har hentet tar-pakken, pakker man den ud:

<screen>
<prompt>[root@linus /root]# </prompt><userinput>tar xzvf leafnode-*.tar.gz </userinput>
...
<prompt>[root@linus /root]# </prompt><userinput>cd leafnode-*; less INSTALL</userinput>
</screen>
    </para>

<para>
I denne fil er installationen beskrevet trin for trin, men vi løber
den lige igennem alligevel. Dette er beskrevet fra en Red Hat. Det kan
være at opsætningsfilerne ligger andre steder på andre
distributioner.
</para>

<screen>
<prompt>[root@linus leafnode]# </prompt><userinput>./configure &amp;&amp; make &amp;&amp; echo O.k.</userinput>
...
O.k.
</screen>

<para>
Herefter skal der oprettes en bruger <emphasis>news</emphasis>:
</para>

<indexterm>
 <primary>adduser </primary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>adduser </secondary>
</indexterm>

<screen>
<prompt>[root@linus leafnode]#</prompt> <userinput>adduser news</userinput>
</screen>

<para>
Så må man køre:
</para>

<screen>
<prompt>[root@linus leafnode]#</prompt> <userinput>make install</userinput>
</screen>

<para>
Så skal der rettes i opsætningsfilen til Leafnode, som er
placeret i <filename>/etc/leafnode/config</filename>. Det interessante
er:
</para>

<programlisting>
## Dette er en del af Leafnode opsætningsfilen /etc/leafnode/config
## This is the NNTP server Leafnode fetches its news from.
## You need read and post access to it. Mandatory.
server = news.sslug.dk
</programlisting>

<para>
Her kan man så bare tilføje flere servere hvis man ønsker at læse fra
flere. Skal der bruges brugernavn/adgangskode på en af dem, tilføjes det
bare nedenunder:
</para>

<programlisting>
# username = gulbrandsen
# password = secret
</programlisting>

<para>
Og dette er faktisk alt der skal gøres ved opsætningsfilen. De
andre parametre er rigtig godt beskrevet og omhandler ting som:
</para>

<itemizedlist mark="bullet">
<listitem>
 <para>
  I hvor lang tid indlæg skal gemmes.
 </para>
</listitem>
<listitem> 
 <para>
  I hvor lang tid der skal hentes nye indlæg, hvis gruppen ikke bliver læst.
 </para>
</listitem>
</itemizedlist>

<para>
Disse parametre kan man altid stille på hvis man synes den ikke
fungerer tilfredsstillende, men default er faktisk rimelig gode
indstillinger.
</para>

<para>
Så skal crontab redigeres for brugeren news.
Som standard anvender crontab editoren vi. Du kan evt. starte med at ændre
dette forhold med kommandoen: <command>editor=emacs; export EDITOR
</command>
eller <command>editor=mcedit; export EDITOR</command>.  Samme kommando
kan tilføjes til din <filename>~/.profile</filename>.
</para>

<indexterm>
 <primary>crontab </primary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>crontab </secondary>
</indexterm>

<screen>
<prompt>[root@linus leafnode]#</prompt> <userinput>crontab -u news -e</userinput>
</screen>



<para>
Heri tilføjes linjen:
</para>

<programlisting>
0 0 * * * /usr/local/sbin/texpire
</programlisting>

<para>
Dette får den til at slette gamle indlæg hver midnat. Det er
smart hvis man sørger for at det er et tidspunkt hvor computeren er
tændt. Nå, ja, hvis den er tændt, og man sover i samme rum, så lad være
med at sætte den til at køre mens du sover. Der er rimeligt meget tryk
på disken, når denne køres, da der er mange filer der skal tjekes
igennem, så det kan man godt vågne af :-).
</para>

<para>
Så skal inet-dæmonen sættes op til at starte Leafnode. Først
kontrolleres at inet er startet (Der skal være en stjerne foran i
ntsysv). Så redigeres filen <filename>/etc/inetd.conf</filename>. Det
er følgende linje der skal ses på: 
</para>

<programlisting>
nntp stream tcp nowait root /usr/sbin/tcpd /usr/local/sbin/leafnode 
</programlisting>

<para>
Her er Leafnode sat til at gå igennem tcpwrapperen så der skal også
lige åbnes for denne. I <filename>/etc/hosts.deny</filename> skal der
helst (af sikkerhedsmæssige årsager) stå:
</para>

<programlisting>
ALL: ALL
</programlisting>

<para>
hvorefter man redigerer <filename>/etc/hosts.allow</filename> og
indsætter linjen:
</para>

<programlisting>
leafnode: localhost
</programlisting>

<para>
Her kan så
tilføjes andre maskiner som skal have lov til at læse (se <command>man
hosts.allow</command>). Og så skal netværks-funktionerne genstartes:
</para>

<screen>
<prompt>[root@linus leafnode]#</prompt> <userinput>/etc/rc.d/init.d/inet restart</userinput>
</screen>

<para>
Eller hvis du bruger Red Hat 7.0
</para>

<screen>
<prompt>[root@linus leafnode]#</prompt> <userinput>/etc/rc.d/init.d/xinetd restart</userinput>
</screen>


<para>
Eller hvis du anvender SuSE 6.4
</para>

<screen>
<prompt>[root@linus leafnode]#</prompt> <userinput>/etc/rc.d/init.d/inetd restart</userinput>
</screen>

<para>
Så er det hele ved at være sat op.  Nu køres
<command>/usr/local/sbin/fetchnews</command> for første gang. Første
gang køres den med <filename>-f</filename> som parameter. Dette får
Leafnode til at læse serverlisterne på de angivne servere. Denne skal
køres som "root" eller "news". Man kan igen putte den i "news"s crontab
hvis ens forbindelse er oppe hele tiden, ellers kan den med fordel
puttes i ens opkaldsscripts eller man kan køre den manuelt når man
ønsker at poste/hente news. Det sidste har jeg valgt, og derfor har jeg
redigeret <filename>/root/.bashrc</filename> og indsat denne linje: 
</para>

<programlisting>
alias news='/usr/local/sbin/fetchnews -vvv' 
</programlisting>

<para>
De 3 v'er giver bare meget output fra <command>fetchnews</command>, og
nu kan jeg skrive news som root og køre
<command>fetchnews</command>. Når man poster gennem Leafnode, bliver
postningerne lagt i kø indtil fetchnews bliver kørt igen, og indlægget
bliver postet mens nye indlæg fra de grupper, der abonneres på, bliver hentet.
Nu mangler vi kun at sætte newsreaderen op til at læse fra localhost i
stedet for den gamle newsserver.
</para>

<para>
Ønsker du automatisk hentning af nyheder hvert kvarter, kan du
yderligere tilføje denne linje i <filename>/etc/crontab</filename>
(kun interessant hvis du har en forbindelse med fast pris):
</para>

<programlisting>
*/15 * * * * /usr/sbin/fetchnews
</programlisting>

</sect3>
</sect2>
</sect1>

<sect1 id="ntp">
<title>NTP - tidssynkronisering</title>
<indexterm><primary>NTP</primary></indexterm>
<indexterm><primary>Tid</primary><secondary>NTP tidssynkronisering</secondary></indexterm>

<para>
(x)ntp er et værktøj til synkronisering af tiden på computere. Dette program
sørger for hele tiden at holde systemuret synkroniseret med en anden ntpserver
et sted på internettet, derfor er det mest oplagt at benytte det på maskiner
der konstant er på internettet.
</para>

<para>
På installations-CD'erne til de fleste distributioner ligger der (x)ntp-pakker lige
til at installere ellers kan programmet hentes på <ulink url="http://www.ntp.org">http://www.ntp.org</ulink>.
</para>

<indexterm>
 <primary>ntpdate</primary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>ntpdate</secondary>
</indexterm>

<para>
ntp-pakken består af 2 værktøjer <command>ntpd</command> (ntp-dæmonen)
og <command>ntpdate</command>, den sidste køres manuelt før man
starter <command>ntpd</command> for at få tiden synkroniseret fra
start, da ntpd nægter at starte hvis tidsforskellen
mellem de 2 maskiner er for stor.
</para>

<para>
Denne kan også kaldes fra ens internet-opkaldsscripts, hvis man har en
opkaldsforbindelse og syntaksen er bare: <command>ntpdate -s
ntp-server-navn</command>. NTP-servere er der en hel del af rundt
omkring på nettet og din internetudbyder har højst sandsynligt en:
</para>

<programlisting>
Worldonline/Tiscali: ntp.worldonline.dk
TeleDK/TDC: ntp.inet.tele.dk
</programlisting>

<para>
Har du fast internetforbindelse på din server så kan det være
fordelagtigt at sætte dæmonen op så uret hele tiden holdes
synkroniseret. Denne dæmon kompenserer for hardware-urets drift der er
afhængigt af varme og andre ting.  Det gøres meget nemt ved blot at
tilføje til filen <filename>/etc/ntp.conf</filename>.
</para>

<programlisting>
server NTP-SERVER-NAVN
driftfile /etc/ntp/drift
</programlisting>

<para>
og ntpserverens navn som eneste linje i filen
<filename>/etc/ntp/step-tickers</filename>. Så kører ntpdæmonen en
<command>ntpdate</command> mod serveren inden den starter
synkroniseringen.
</para>

<para>
Og så skal dæmonen blot startes med:
<command>/etc/rc.d/init.d/ntpd start</command>
og hakkes af så den starter automatisk i "ntsysv" så den starter i det runlevel
du normalt starter i. 
</para>

<para>
Dette er beskrevet ud fra en Mandrake 8.0 og filernes placering kan afhænge af
distribution og installationsmetode. 
</para>
</sect1>

<sect1 id="hastighed-og-duplex">
<title>Opsætning af netkortparametre</title>

<indexterm>
 <primary>netkort</primary>
 <secondary>Forhandling af hastighed</secondary>
</indexterm>
<indexterm>
 <primary>mii-tool</primary>
</indexterm>
<indexterm>
 <primary>mii-diag</primary>
</indexterm>
<indexterm>
 <primary>netkort</primary>
 <secondary>styring af hastighed</secondary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>mii-tool</secondary>
</indexterm>
<indexterm>
 <primary>Kommandooversigt</primary>
 <secondary>mii-diag</secondary>
</indexterm>


<para>
Et problem som flere Linux-brugere har angår netkort, hvor
man måske har lyst til at styre mellem 10 MBit og 100 MBit, samt og der
anvendes fuld duplex eller ej. Der er ofte en DOS/Windows driver med
til ens netkort, som kan dette - og under Linux skal man bla. se efter
<command>mii-tool</command> (nyeste version hedder
<command>mii-diag</command>. Desværre er det vist ikke alle netkort
som programmet virker sammen med.
</para>

<para>
Findes <command>mii-diag</command> ikke på din Linux-maskine, så er
det på adressen 
<ulink url="http://www.scyld.com/diag/">http://www.scyld.com/diag/</ulink>
muligt at hente dette sammen med andre Linux programmer for opsætning
af de mest gængse netkort. Programmerne hentes som C-kildetekst og skal
derfor oversættes. Nederst i programmerne står der hvordan man
gør. Programmerne giver normalt hjælp, hvis de startes uden parametre,
eller man kan finde en tekst beskrivelse i sourcekoden.
</para>
</sect1>

<sect1 id="rsync">
<title>Synkronisering af data mellem to steder med rsync</title>

<indexterm>
 <primary>Synkronisering af data</primary>
 <secondary>rsync</secondary>
</indexterm>

<indexterm>
 <primary>rsync</primary>
</indexterm>

<para>
At synkronisere data mellem to kataloger eller to maskiner er meget
nyttigt. Tanken er at man har ca. samme data to steder - det kan enten
være to kataloger på samme maskine eller to forskellige maskiner
(f.eks. en laptop og en stationær maskine). Man ønsker så elegant at
kunne overføre <emphasis>de ændrede filer</emphasis> fra den ene
maskine til den anden - i forhold til sidste gang de to maskiner blev
synkroniseret mod hinanden.
</para> 

<para>
Det første man skal gøre er at installere
<filename>rsync</filename>-pakken på ens maskine (tjek dette med
<command>rpm -q rsync</command>) samt rsync på den anden maskine sammen med OpenSSH (Secure
Shell) hvis man vil synkronisere mellem to maskiner. Opsætning og
installation af OpenSSH er forklaret i "Linux - Friheden til sikkerhed på Internettet", der kan findes på <ulink url="http://&linuxbogurl;/">&linuxbogurl;</ulink>. Man skal også sætte miljø-variablen <filename>RSYNC_rsh=ssh</filename> i brugerens opstartsfil (<filename>~/.bashrc</filename> "export RSYNC_rsh=ssh" eller <filename>~/.tcshrc</filename> "setenv RSYNC_RSH ssh").
</para>

<para>
Programmet <command>rsync</command> er genialt - det sammenligner
filer i de to ender via tjeksummer og opdaterer filen i den ene ende
kun med ændringerne mellem de to filer. Ofte har man få ændringer - og
dermed kan <command>rsync</command> spare rigtig meget tid og båndbredde.
</para>

<para>
Antag at brugerens email-katalog <filename>~/mail</filename> evt. med
en række under-kataloger findes på egen maskine (den vi kører
kommandoer fra) samt maskinen
<filename>asterix</filename>. 
</para>

<para>
 Antager vi først at <filename>asterix</filename> har de nyeste filer som skal
 synkroniseres over til vores egen maskine, da skriver vi:
<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>rsync -azv asterix:mail ~</userinput>
</screen>
 Bemærk at hvis der også er ændrede filer på egen maskine siden sidste
 synkronisering så overskrives disse.
</para>

<para>
Antager vi modsat at vores egen maskine har de nyeste filer som skal
synkroniseres over til <filename>asterix</filename>, og vi vil slette
eventuelle andre filer på asterix, da skriver vi
</para>

<screen>
<prompt>[tyge@hven ~]$</prompt> <userinput>rsync -azv --delete ~ asterix:mail</userinput>

</screen>

<para>
Derefter vil
asterix have eksakt de samme filer som vores maskine i
<filename>~/mail</filename>. Med parameteren
<filename>--delete</filename> sørger vi også for at slette eventuelle
filer på <filename>asterix</filename> under
<filename>~/mail</filename> som ikke findes på vores egen maskine.
</para>

<para>
Med de to ovennævnte eksempler vil filer blive overskrevet fra den ene
maskine til den anden uanset hvilke filer der er de nyeste. Lad os nu
antage at vi gerne vil synkronisere mail-katalogerne så det altid er
de nyeste filer som findes <emphasis>begge</emphasis> steder. 
</para>

<programlisting>
Egen maskine:
mail/fil1   April 2
mail/fil2   April 3
mail/fil3   April 1

asterix:
mail/fil1   April 5
mail/fil2   April 1


Bagefter har begge maskiner:
mail/fil1   April 5
mail/fil2   April 3
mail/fil3   April 1
</programlisting>

<para>
Dette gøres ved

<screen>
<prompt>[tyge@hven ~]$</prompt> <userinput>rsync -auvz mail/ asterix:mail/</userinput>
<prompt>[tyge@hven ~]$</prompt> <userinput>rsync -auvz asterix:mail/ mail/</userinput>
</screen>
</para>

  <para>
   <emphasis>Bemærk:</emphasis> At <command>rsync</command> fungerer
   forskeligt alt efter om der kommer <filename>/</filename> efter
   katalog-navnet. Pas på med dette.
  </para>
 </sect1> 
</chapter>
