<!-- $Id$ -->
<chapter id="webserver">
<title>Webserver</title>
<indexterm><primary>Webserver</primary>
  <secondary>Apache</secondary></indexterm>
<indexterm><primary>Apache</primary></indexterm>
<para>
I dette afsnit skal vi se nærmere på webservere - i praksis Apache,
som i dag anvendes af ca. 60% af alle webservere på Internet.
</para>

<para>
Når du har fået din Linux-server op at køre, er en af de muligheder du
kan gå i gang med, at installere en webserver. Du kender sikkert allerede
webservere, idet de anvendes til websteder, intranet, ekstranet og meget 
andet.
</para>

<para>
Her kan du læse hvordan du selv kommer i gang med at være webmester på din
egen webserver.
</para>


<sect1 id="Hvad-er-en-webserver">
<title>Hvad er en webserver?</title>
<para>
En webserver var oprindelig en rimelig simpel server, hvis eneste funktion
i livet var at sende filer fra sin harddisk til den klient, der bad om dem.
</para>

<para>
 Der er sidenhen kommet et væld af ekstra funktionaliteter og faciliteter i
 webservere, så det i dag også er det en del af webserverens job at indsætte
 kode i sider når en bruger beder om den, f.eks. sidste gang filen blev rettet
 (Server Side Includes). Webserveren kan udføre programmer og returnere uddata
 i form af tekst, billed, lyd og animationer til browseren. Når man udfylder
 og indsender data i formularer på nettet, så er det også webserverens job at
 modtage data og filer, og at sende disse data videre til programmer, der
 bearbejder dem (CGI-programmer). Webserveren kan også udføre programmer
 indlejret i websiderne, så man f.eks. kan indsætte data fra en database
 direkte i sider (Perl/PHP/Python).
</para>

<sect2 id="apache-historie">
<title>Lidt historie bag Apache</title>
<indexterm><primary>Webserver</primary><secondary>Apache historie</secondary></indexterm>
<para>
Apache serveren startede sit liv som et "patch-kit" (et sæt ændringer)
til NCSA-serveren, og det er da også der navnet oprindeligt kommer - A
PAtCHy Server.
</para>

<para>
Da udviklingen af NCSA's webserver stoppede, fortsatte udviklingen af
Apache, og således er Apache-serveren nu blevet den markedsledende
webserver.
</para>

<para>
Apache ejes og styres af Apache Software Foundation og er frit og gratis.
</para>

<para>
 Apache er i skrivende stund nået til version 1.3.17, og er en af de mest
 stabile webservere. Dens markedsandel på ca. 60% af Internettet er vist det
 mest sigende bevis på hvor god den er. Der arbejdes på version 2.0, som
 bliver den næste større release. Den nye udgave vil blandt andet blive endnu
 mere modulær end den eksisterende.
</para>

<para>
Har du brug for en meget hurtig webserver (Apache er hurtig), så
findes Tux-1.0, som er tunet meget kraftigt til en performance, der
oftest ligger langt over en tilsvarende MS IIS.
</para>

</sect2>
</sect1>

<sect1 id="apache-installation">
<title>Apache-installation</title>
<indexterm><primary>Webserver</primary><secondary>Apache installation</secondary></indexterm>

<para>
Når du skal installere en Apache webserver, skal du sikre dig, at du
har seneste udgave.  Du kan enten vælge at installere den fra nogle
RPM-pakker eller oversætte den selv fra kildeteksten. Som udgangspunkt
anbefales det, at du installerer fra kildeteksten, da det ikke er svært
og det giver dig mulighed for selv at bestemme hvilke moduler, der
oversættes ind i Apache.
</para>

<sect2 id="apache-installation-fra-pakker">
<title>Apache installation fra pakker</title>
<para>
Du kan normalt finde pakker til Red Hat, Debian og andre
Linux-distributioner med Apache.  At anvende pakker kræver normalt at du
har systemoperatørrettigheder på maskinen, du vil installere serveren på.
Hvis du vælger at benytte en sådan, vil du normalt blot få en "standard
Apache" (alt efter pakken), som installeres i f.eks.
<filename>/usr/local/apache</filename> og som kører på port 80.
</para>

<para>
I Debian mv. installeres de binære filer under <filename>/usr/sbin/</filename>
og opsætningsfiler findes i <filename>/etc/apache/</filename>.
I Debian startes og stoppes Apache bedst hvis man anvender
programmet i /etc/init.d/debian, der også kan anvendes til at
genindlæse en opdateret opsætningsfil.
</para>

<para>
I Red Hat 7.0 installeres Apache via <filename>apache*.rpm</filename>,
som følger med distributionen. Skal du have PHP4 med så skal du
dernæst installere <filename>mod_php-4.0*.rpm</filename>.
Webserveren sættes op til at din dokument-root (der hvor filer
gemmes) i <filename>/var/www/html/</filename>. 
</para>

<para>
Dette kan være en løsning, hvis du blot har brug for at se hvorledes
dine dokumenter ser ud når de kommer fra en browser, men hvis du for
alvor vil lære Apache at kende, og vil være sikker på hvad der faktisk
er oversat ind i serveren, er det ofte en god ide at installere den
direkte fra kildeteksten.
</para>
</sect2>

<sect2 id="apache-installation-fra-kildeteksten">
<title>Apache installation fra tar-pakker</title>
<para>
For at installere (og anvende) Apache, behøver du ikke
systemoperatørrettigheder på
maskinen. Der vil blot være nogle begrænsninger af hvor du kan
installere den og hvilke porte den kan køre på.  Hvis du ikke vil
installere den som systemoperatør, skal serveren køre på et portnummer over
1024 (ofte anvendes 8000, 8080 eller 8088).
</para>

<para>
Du kan hente seneste udgave af Apache serveren fra <ulink
url="http://www.apache.org/dist/">http://www.apache.org/dist/</ulink>
(eller en nærmere spejling). Filen du skal bruge hedder
<filename>apache_&lt;versionsnummer&gt;.tar.gz</filename>.
</para>

<para>
Filen pakkes ud med kommandoen <command>tar -zvxf
apache_&lt;versionsnummer&gt;.tar.gz</command>.  Nu har du hele
kildeteksten liggende i et katalog der hedder
<command>apache_&lt;versionsnummer&gt;</command>.  Gå ind i
biblioteket (<command>cd apache_&lt;versionsnummer&gt;</command>).
</para>

<para>
At få installeret og startet en Apache webserver kræver normalt kun
følgende trin:
</para>

<screen>
01: $ ./configure --prefix=PREFIX
02: $ make
03: $ make install
04: $ PREFIX/bin/apachectl start
</screen>

<para>
I linje 01 defineres opsætningen af Apache. Her er det kun hvor den
installeres, der ændres.  I stedet for PREFIX skal du skrive stien til
det bibliotek hvor du vil have den installeret
(f.eks. <filename>/home/myuser/apache</filename>). 
Apache har også nogle foruddefinerede præfikser såsom Red Hat-layout.
I stedet skrives så <command>--with-layout=RedHat</command>.
Se <filename>config.layout</filename> for andre layouts.
Du kan til <command>configure</command>-kommandoen også angive en
lang række andre parametre, som
ændre på hvilke moduler der installeres, hvilken bruger den vil køre
som osv. Du kan ændre på en stor del af de samme parametre efter
Apache er blevet oversat og installeret.
</para>

<para>
Linje 02 bygger selve webserveren. På en standard Linux-maskine vil
der normalt ikke ske andet end at hele byggeprocessen skrives ud på
skærmen.
</para>

<para>
Linje 03 installerer serveren. Hvis du har valgt standard
installationen skal du skifte til brugeren "root" for at installere
den. Det samme gælder hvis du har valgt at installere Apache et sted
hvor din bruger ikke har skrive adgang (trin 01 og 02 kan sagtens
udføres som din normale bruger).
</para>

<para>
Linje 04 starter webserveren. Inden du gør dette vil du dog normalt
skulle ændre i opsætningsfilerne, hvilket er beskrevet nærmere i
næste afsnit. Hvis du starter den uden yderligere ændringer, kan du
normalt finde din nye webserver på adressen: <ulink
url="http://localhost:8080/">http://localhost:8080/</ulink>.  Husk
igen at erstatte PREFIX med stien til installations-biblioteket.
</para>

</sect2>
</sect1>

<sect1 id="apache-opsaetning">
<title>Opsætning af Apache</title>
<indexterm><primary>Apache</primary>
<secondary>opsætning</secondary></indexterm>

<para>
 Apaches opsætningsfiler kan du finde i <filename>PREFIX/conf</filename>. Den
 fil du skal have fat i er <filename>httpd.conf</filename>. På
 Red Hat-systemer finder du filen i <filename>/etc/httpd/conf/</filename>.
 Denne fil indeholder et hav af valgmuligheder, så vi vil kun lige berøre de
 mest basale her.
</para>

<sect2>
<title>Port</title>
<para>
Denne parameter angiver hvilken port Apache skal lytte på. Normalt
kører en webserver på port 80, hvilket den dog kun kan hvis du har
installeret den som "root". Hvis du har installeret Apache som standard
bør du nok vælge port 80.
</para>
</sect2>

<sect2 id="apache-logfiler">
<title>Logfiler</title>
<indexterm><primary>Apache</primary>
<secondary>logfiler</secondary></indexterm>
<para>
Apache laver to logfiler som udgangspunkt - en tilgangslog, som
fortæller hvem der har besøgt din server, og en fejllog, som
fortæller dig om alle fejl der opstår mens serveren kører. Hvilke
oplysninger, der står i din tilgangslog afhænger af dels hvilke du
sætter serveren til at skrive og dels hvilke oplysninger klienten
vil aflevere. Det første du op i et LogFormat-direktiv.  I standard
<filename>httpd.conf</filename>-filen er der lavet fire skabeloner (combined,
common, referer og agent), men du kan naturligvis også lave dit eget format.
</para>

<para>
For fejlloggen kan du også bestemme hvor alvorlige begivenheder skal
være førend de skrives ned - dette defineres på 8 forskellige niveauer
(fra debug til emergency).
</para>

<para>
En tredie type logfil som kan være meget nyttig hvis du vil afvikle
CGI-programmer på din webserver, er ScriptLog. Denne logfil vil føre
en log over de fejlbeskeder dine CGI-programmer afgiver.  Det er dog
vigtigt at der sættes en maksimum på størrelsen af denne logfil, da
den ellers hurtigt kan blive for stor. Dette kan gøres med parameteren
ScriptLogLength.  Eksempel på anvendelse:
</para>

<screen>
ScriptLog	PREFIX/log/scriptlog
ScriptLogLength 5192880
</screen>

<para>
Dette fortæller Apache at den skal lave en logfil der hedder
scriptlog, og at denne fil må maksimalt være 5MB.
</para>
</sect2>

<sect2 id="apache-options">
<title>Options</title>
<para>
Options er en af de vigtige direktiver at kende, idet den sætte nogle
overordende regler for det område den gælder for (Ved Files-, Directory-
og Location-direktiverne kan man have forskellige options, der gælder
for forskellige dele af serveren).
</para>

<para>
De vigtigste parametre til Options er: 
</para>

<itemizedlist mark="bullet">

<listitem> 
  <para> 
    Indexes - som bestemmer hvorvidt man må se indhold af kataloger uden en indeks-fil.
  </para>
</listitem>
<listitem> 
  <para> 
    ExecCGI - som bestemmer om det er muligt at køre CGI-programmer.
  </para>
</listitem>
<listitem> 
  <para> 
     FollowSymLinks - som bestemmer om symbolske links i området skal
  følges 
  </para>
</listitem>
</itemizedlist>
</sect2>

<sect2 id="apache-files-etc">
<title>Files, Directory og Location</title>
<para>
Gennem Files- og Location-direktiverne kan du påføre specielle regler
for dele af din webserver.  Dette kunne f.eks. være at et givet
område kun kunne ses, hvis man sad på serveren selv eller ligende.
</para>

<para>
Location anvendes til at implementere regler relativt i forhold
til deres URL. Alt i området <filename>/spoing/</filename> må kun ses
fra .dk domæner eller ligende.
</para>

<para>
Directory anvendes til at implementere regler, men tager udgangspunkt
i filsystemet. Således ville man f.eks. kunne implementere en regel
der beskyttede alt der ligger i
<filename>/home/web/htdocs/spoing/</filename>, så det kun kan ses fra
.dk domæner.
</para>

<para>
Files kan anlægge filtre der gælder på fil-niveau. Typiske anvendelser
af Files, kunne f.eks. være at sikre at dine
<filename>.htaccess</filename>-filer og opsætningsfiler ikke kan hentes af
almindelige brugere. Hvis du bruger emacs vil den ofte efterlade
sikkerhedskopier der hedder <filename>FILNAVN~</filename>. Disse kan man også
sikre ikke kan ses gennem webserveren.
</para>

<para>
Det er muligt at kombinere Files med enten Directory eller Location, således
vil en given regel 
kun gælde for nogle filer i et givet område. Et eksempel kunne være:
</para>

<screen>
&lt;Directory /&gt;
      Options +ExecCGI +FollowSymLinks
      &lt;Files ~ "\.cgi$"&gt;
      SetHandler cgi-script
      &lt;/Files&gt;
&lt;/Directory&gt;
</screen>

<para>
Her tillades at der køres CGI-programmer, hvis de har endelsen .cgi,
overalt på maskinen, mens alle filer med en anden endelse vil blive
leveret som normalt.
</para>
</sect2>

<SECT2 ID="htaccess">
<TITLE>Adgangskode til websider</TITLE>
<INDEXTERM><PRIMARY>Apache</PRIMARY><SECONDARY>Adgangskode til websider</SECONDARY></INDEXTERM>
<INDEXTERM><PRIMARY>.htaccess</PRIMARY></INDEXTERM>
<INDEXTERM><PRIMARY>htaccess</PRIMARY></INDEXTERM>
<INDEXTERM><PRIMARY>Adgangskode</PRIMARY><SECONDARY>htaccess</SECONDARY</INDEXTERM>
<INDEXTERM><PRIMARY>Kodeord</PRIMARY><SECONDARY>htaccess</SECONDARY</INDEXTERM>
<INDEXTERM><PRIMARY>Password</PRIMARY><SECONDARY>htaccess</SECONDARY</INDEXTERM>
<INDEXTERM><PRIMARY>Adgangskontrol</PRIMARY><SECONDARY>websider</SECONDARY</INDEXTERM>

<PARA>
Med Apache er det muligt at sætte adgangskode på udvalgte dele af et websted
hvis modulet <filename>mod_access</filename> er installeret.
Dette kan bruges til at sikre at kun familie, venner og kollegaer får adgang
til nogle bestemt sider på dit websted.
Første gang adgangskode skal sættes op er det lidt besværligt at få overblikket.
Derfor har vi sat en realistisk side op og taget filerne direkte der fra.
Følgende filer indgår i opsætningen af adgangskode.
</PARA>

<ITEMIZEDLIST MARK="BULLET">
<LISTITEM><PARA><FILENAME>.htaccess</FILENAME> - denne fil ligger i det sub-dir der skal beskyttes</PARA></LISTITEM>
<LISTITEM><PARA><FILENAME>/home/chlor/htuser</FILENAME> - filen med brugernavne</PARA></LISTITEM>
<LISTITEM><PARA><FILENAME>/home/chlor/htgroup</FILENAME> - eventuelt en fil med grupper</PARA></LISTITEM>
</ITEMIZEDLIST>

<PARA>
Først skal der oprettes en fil med få brugere.
For nemheds skyld kaldes den ene bruger for 'demo' med adgangskoden 'demo'.
Man kan selv vælge hvad filen skal hedde og hvor den skal ligge.
Her hedder bruger-filen <filename>/home/chlor/htuser</filename>.
Ved første bruger skal filen oprettes med <COMMAND>-c</COMMAND>.
Herunder oprettes brugeren 'demo' og 'john'.
</PARA>

<SCREEN>
<PROMPT>[chlor@sslug]$</PROMPT> <USERINPUT>htpasswd -c /home/chlor/htuser demo</USERINPUT>
<PROMPT>[chlor@sslug]$</PROMPT> <USERINPUT>htpasswd /home/chlor/htuser john</USERINPUT>
</SCREEN>

<PARA>
Pas på ikke at bruge kommandoen <COMMAND>-c</COMMAND> anden gang, for
så slettes filen.
Filen med de to brugere ser nu således ud:
</PARA>

<SCREEN>
demo:2iYw72d6bnpxg
john:..HEJdavUser2
</SCREEN>

<PARA>
 Begge adgangskoder er krypteret med 'crypt', så de kan ikke læses. Brugeren
 'john's adgangskoder er ikke det du ser, men noget meget kryptisk. Med
 brugerfilen oprettet, kan den første <filename>.htaccess</filename> oprettes.
 I dette eksempel ligger filen i
 <filename>/home/chlor/public_html/htaccess/</filename> og ser således ud:
</PARA>

<SCREEN>
AuthType Basic
AuthName "Beskyttet webside"
AuthUserFile /home/chlor/htuser
Require valid-user
</SCREEN>

<PARA>
 <COMMAND>AuthType</COMMAND> er sat til <COMMAND>Basic</COMMAND> da det er det
 enkleste. <COMMAND>AuthName</COMMAND> er den tekst, der vises når man skal
 logge ind på siden. Det nemmeste er at se på eksempel her:
<ULINK URL="http://www.sslug.dk/~chlor/htaccess/">http://www.sslug.dk/~chlor/htaccess/</ULINK>
hvor du samtidigt kan prøve at logge ind.
Alle brugere der er nævnt i <FILENAME>/home/chlor/htuser</FILENAME> har adgang
ved at bruge kommandoen <COMMAND>Require valid-user</COMMAND>.
</PARA>

<PARA>
Dernæst ønsker vi et andet subdir hvor kun 'demo' og 'john' har adgang.
Dette kan gøres enten ved at skrive alle de brugere der har adgang,
eller ved at oprette en gruppe fil.
Det nemmeste er at skrive navnene, og så ser filen
<FILENAME>/home/chlor/public_html/htaccess/demojohn/.htaccess</FILENAME>
således ud:
</PARA>

<SCREEN>
AuthType Basic
AuthName "Beskyttet demojohn"
AuthUserFile /home/chlor/htuser
Require user john demo
</SCREEN>

<PARA>
Har man mange forskellige sub-dir der nemmest administreres gruppevis,
oprettes en gruppefil med navnet
<FILENAME>/home/chlor/htgroup</FILENAME> 
hvor gruppen hedder <COMMAND>fortrolig</COMMAND>
med følgende indhold:
</PARA>

<SCREEN>
fortrolig: john demo
</SCREEN>

<PARA>
Et nyt sub-dir oprettes hvor kun denne gruppe har adgang, i dette
eksempel <FILENAME>/hemmelig/</FILENAME>.
En ny <FILENAME>.htaccess</FILENAME> oprettes i
<FILENAME>/home/chlor/public_html/htaccess/hemmelig/</FILENAME>
med følgende indhold:
</PARA>

<SCREEN>
AuthType Basic
AuthName "Beskyttet gruppe"
AuthUserFile /home/chlor/htuser
AuthGroupFile /home/chlor/htgroup
Require group fortrolig
</SCREEN>

<PARA>
Ovenstående kan afprøves her: 
<ULINK URL="http://www.sslug.dk/~chlor/htaccess/hemmelig/">http://www.sslug.dk/~chlor/htaccess/hemmelig/</ULINK>.
Er du allerede logget ind på siden med 'demo', må du enten prøve med programmet
<COMMAND>lynx</COMMAND> eller lukke din browser ned og starte den igen for at blive
spurgt om adgangskode igen, samt se teksten "Beskyttet gruppe".
</PARA>

<PARA>
I det sidste eksempel på en <FILENAME>.htaccess</FILENAME> fil, er det kun
brugeren 'john' der kan udføre en <COMMAND>POST</COMMAND> kommando,
hvor alle andre brugere
kun kan udføre en <COMMAND>GET</COMMAND>.
Dette kan bruges i et sub-dir hvor det kun er 'john' der må bruge en html-side
med en submit-knap der udfører en <COMMAND>POST</COMMAND>.
</PARA>

<SCREEN>
AuthType Basic
AuthName "Beskyttet, kun john må skrive"
AuthUserFile /home/chlor/htuser
AuthGroupFile /home/chlor/htgroup

&lt;LIMIT GET&gt;
Require valid-user
&lt;/LIMIT&gt;

&lt;LIMIT GET POST&gt;
Require user john
&lt;/LIMIT&gt;
</SCREEN>

<PARA>
Læs mere om adgangskontrol her:
</PARA>

<ITEMIZEDLIST MARK="BULLET">
<LISTITEM><PARA>
AuthUserFile <ULINK URL="http://sunsite.dk/apache/docs/mod/mod_auth.html#authuserfile">http://sunsite.dk/apache/docs/mod/mod_auth.html#authuserfile</ULINK>
</PARA></LISTITEM>
<LISTITEM><PARA>
Require <ULINK URL="http://sunsite.dk/apache/docs/mod/core.html#require">http://sunsite.dk/apache/docs/mod/core.html#require</ULINK>
</PARA></LISTITEM>
<LISTITEM><PARA>
Limit <ULINK URL="http://sunsite.dk/apache/docs/mod/core.html#limit">http://sunsite.dk/apache/docs/mod/core.html#limit</ULINK>
</PARA></LISTITEM>
<LISTITEM><PARA>
Apache Week artikel <ULINK URL="http://www.apacheweek.com/features/userauth">http://www.apacheweek.com/features/userauth</ULINK>
</PARA></LISTITEM>
<LISTITEM><PARA>
Mere på dansk <ULINK URL="http://www.php.dk/artikler/htaccess.php">http://www.php.dk/artikler/htaccess.php</ULINK>
</PARA></LISTITEM>
</ITEMIZEDLIST>

</SECT2>

<sect2 id="apache-virtuelle-hosts">
 <title>Virtuelle værter med Apache</title>

 <indexterm>
  <primary>Apache</primary>
  <secondary>virtuelle webservere</secondary>
 </indexterm>
 <indexterm>
  <primary>virtuelle webservere</primary>
 </indexterm>

 <para>
  En Linux-maskine med Apache kan nemt være webserver for mange domæner på en
  gang. Man opretter såkaldte virtuelle værter på maskinen. Har du en
  DNS-tjener skal du sørge for at alle dine virtuelle webservere er oprettet
  med samme IP-adresse. Har du ikke DNS, så sørg for at dine
  <filename>/etc/hosts</filename>-filer har linier med samme IP-nummer og hver
  sit webserver maskinnavn. Eksempel for et hjemmenetværk:
 </para>

<screen>
192.168.1.1     www.hjemmenet www
192.168.1.1     test.hjemmenet test 
</screen>

<para>
Dernæst skal webserveren sættes op, så de to virtuelle webservere
tager fat i hver deres kataloger på harddisken. Lad os i eksemplet
anvende <filename>/home/www/www.hjemmenet</filename> og
<filename>/home/www/test.hjemmenet</filename>. Man kan tænke på at de
to steder er til den egentlige webserver, og
<filename>/home/www/test.hjemmenet</filename> er et test-område til
nye hjemmesider.
</para>

<para>
Man skal redigere <filename>httpd.conf</filename> (Red Hat
<filename>/etc/httpd/conf/httpd.conf</filename>). Led efter følgende tekst
</para>

<screen>
### Section 3: Virtual Hosts
#
# VirtualHost: If you want to maintain multiple domains/hostnames on your
# machine you can setup VirtualHost containers for them.
# Please see the documentation at &lt;URL:http://www.apache.org/docs/vhosts/&gt;
# for further details before you try to setup virtual hosts.
# You may use the command line option '-S' to verify your virtual host
# configuration.
</screen>

<para>
Efter dette indsætter du først IP-adressen på webserveren under
<filename>NameVirtualHost</filename>
</para>


<screen>
NameVirtualHost 192.168.1.1

&lt;VirtualHost 192.168.1.1&gt;
  ServerName www.hjemmenet
  DocumentRoot /home/www/www.hjemmenet
  &lt;Directory "/home/www/www.hjemmenet/"&gt;
    Options Indexes FollowSymLinks Includes
    AllowOverride None
    Order allow,deny
    Allow from all
    XBitHack full
  &lt;/Directory&gt;
  DirectoryIndex index.shtml index.html index.htm index.php

  ServerAdmin root@localhost
  ErrorLog logs/www-error_log
  CustomLog logs/www-access_log common
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.1.1&gt;
  ServerName test.hjemmenet
  DocumentRoot /home/www/test.hjemmenet
  &lt;Directory "/home/www/test.hjemmenet/"&gt;
    Options Indexes FollowSymLinks Includes
    AllowOverride None
    Order allow,deny
    Allow from all
    XBitHack full
  &lt;/Directory&gt;
  DirectoryIndex index.shtml index.html index.htm index.php

  ServerAdmin root@localhost
  ErrorLog logs/test-error_log
  CustomLog logs/test-access_log common
&lt;/VirtualHost&gt;
</screen>

<para>
Som det kan ses har vi tilladt at man følger links "FollowSymLinks"
(pas på hvis disse peger udenfor
<command>DocumentRoot</command>-området). Vi har også sat at man leder
efter indeks-filer med navne <filename>index.shtml</filename>,
<filename>index.html</filename>,
<filename>index.htm</filename> eller 
<filename>index.php</filename>. Vi har med "Includes" valgt, at
webserveren skal fortolke hjemmesider, så du kan opdele siderne i
forskellige filer, der så indlæses af serveren via linier, såsom
</para>

<screen>
&lt;!--#include virtual="venstremenu.incl" --&gt;
</screen>
</sect2>

</sect1>

<sect1 id="cgi-intro">
<title>CGI-programmer</title>
<indexterm><primary>CGI</primary></indexterm>
<para>
CGI står for Common Gateway Interface og tillader dig at kører programmer på
din server, hvis indhold præsenteres af browseren (forudsat programmerne
generer nogle data, browseren kan forstå). Det mest normale er at køre
Perl-programmer gennem CGI, men det er også muligt at skrive programmer i
Ada, C, C++, Python og mange andre sprog, som kan afvikles via CGI. I
<XREF LINKEND="db-pgsql-shell"> er der et eksempel på et CGI-program.
</para>

<para>
Som udgangspunkt vil Apache helst kun køre CGI-programmer fra
<filename>/cgi-bin/</filename>-området (som placeres i
<filename>cgi-bin</filename>-biblioteket under Apache-serverens
installations bibliotek). Hvis du vil kunne køre CGI-programmer
overalt, skal du fjerne udkommenteringen fra den linje der hedder
"AddHandler cgi-script .cgi" og sikre at dine "Options" for det område
CGI-programmerne skal kunne afvikles har parameteren ExecCGI.  Også
selv om du kun vil køre CGI-programmer fra
<filename>/cgi-bin/</filename>-biblioteket, skal du fjerne
udkommenteringen for linien "AddHandler cgi-script .cgi".
</para>

<para>
 Bemærk at CGI-programmer kan åbne for en række sikkerhedsrisici, som du skal
 overveje nøje. Prøv for eksempel at kigge nærmere på:
</para>

<itemizedlist mark="bullet">

<listitem> 
  <para> 
    <ulink url="http://www.w3.org/Security/Faq/wwwsf4.html">http://www.w3.org/Security/Faq/wwwsf4.html</ulink>
  </para>
</listitem>
<listitem> 
  <para> 
    <ulink url="http://www.go2net.com/people/paulp/cgi-security/">http://www.go2net.com/people/paulp/cgi-security/</ulink>
  </para>
</listitem>
</itemizedlist>

</sect1>

<sect1 id="apache-udvidelser">
<title>Apache-udvidelser</title>
<para>
Der findes en række udvidelser i form af moduler til
Apache. Disse kan integrere yderligere funktionalitet direkte
ind i Apache. For at tilføje moduler skal du normalt
genoversætte Apache.
</para>

<para>
Det kan dog lade sig gøre at oversætte moduler, som kan indlæses af
Apache, så man ikke behøver at oversætte helt forfra. Om og hvordan et
modul kan oversættes som et selvstændigt modul, kan du læse mere om i
dokumentationen for de enkelte moduler.
</para>

<para>
I det følgende kan du finde en kort introduktion til nogle af de mest
udbredte og anvendte moduler. Udover de her nævnte findes der en række
andre. Den komplette liste findes i Apache Module Registry på
<ulink url="http://modules.apache.org/">http://modules.apache.org/</ulink>.
</para>


<sect2 id="mod-perl">
<title>mod_perl</title>
<indexterm><primary>mod_perl</primary></indexterm>

<para>
mod_perl-projektet fusionerer webserveren Apache med Perl-oversætteren.
Hvis man har lavet sine CGI-programmer i Perl, er det virkeligt et modul
der tramper speederen i bund.
</para>

<para>
Udover fartforøgelsen, som mod_perl tilfører dine programmer, giver
det tillige et komplet interface til selve Apache-serveren, og dermed
mulighed for at lave nogle utroligt avancerede ting. Eksempler på
dette kunne f.eks. været at køre adgangskontrol direkte op imod en
database, eller bruge en database som adgangs- og fejllog for din
webserver.
</para>

<para>
Du kan finde mere om mod_perl på 
<ulink url="http://perl.apache.org/">http://perl.apache.org/</ulink>
</para>

<para>
Hvis du ikke er interesseret i mod_perl eller synes det virker
for kompliceret, kan du eventuelt også kigge nærmere på Fast_CGI.
</para>
</sect2>

<sect2 id="mod-php">
<title>mod_php</title>
<indexterm><primary>mod_php</primary></indexterm>

<para>
PHP er et programmeringssprog der er indlejret i HTML-koden. En del synes
PHP er lettere at gå til end Perl. PHP har blandt andet en række funktioner i 
selve programmeringssproget, der giver adgang til databaser, post med mere.
</para>
</sect2>

<sect2 id="mod-proxy">
<title>mod_proxy</title>
<indexterm><primary>mod_proxy</primary></indexterm>

<para>
mod_proxy giver Apache-serveren mulighed for at agere proxy. Det
betyder at du kan omdirigere forespørgsler fra en adresse til en
anden (helt usynligt hvis du ønsker det).
</para>

<para>
Dette kunne f.eks. være, hvis du ville sprede belastningen mellem to
servere eller ligende.
</para>
</sect2>

<sect2 id="mod-ssl">
<title>mod_ssl</title>
<indexterm><primary>mod_ssl</primary></indexterm>

<para>
mod_ssl giver mulighed for at Apache kan kommunikere med
klienterne over en SSL-krypteret forbindelse. SSL bruges som
krypteringsalgoritme på de fleste websteder som gerne vil beskytte
informationen der sendes mellem server og klient.
</para>

<para>
Husk at SSL højest giver dig mulighed for at øge sikkerheden, men du
skal dog selv forstå at implementere den gennem opsætning og
fornuftig drift af serveren.
</para>

</sect2>
</sect1>

<sect1 id="wap-apache">
<title>Apache som WAP-server</title>
<indexterm><primary>WAP</primary></indexterm>
<indexterm><primary>WML</primary></indexterm>
<indexterm><primary>Server</primary><secondary>WAP</secondary></indexterm>
<indexterm><primary>Webserver</primary><secondary>WAP</secondary></indexterm>

<para>
Det seneste år er WAP-telefoner ved at blive en udbredt standard for
at hente mobile Internet-sider. Siderne er ikke formatteret i HTML,
men i WML (<emphasis>Wireless Markup Language</emphasis>), som er en
XML-variant. 
</para>

<para>
I al sin enkelthed er WAP set fra serverens side blot et nyt filformat; WML.
Det der skal tilføjes på din hjemmeside for at understøtte WAP, er så kun 
de samme data i WML, og så formateret i et format så de kan ses på en meget
lille skærm.
</para>

<para>
Det er snyde nemt af få en Apache webserver til at fungere som en
WAP-server. Det kræver basalt set kun at webserveren kan fortolke at
filer der ender på <filename>.wml</filename> sendes som
<literal>Content-type: test/vnd.wap.wml</literal>.  Samtidig skal du
måske også have <filename>.wbmp</filename>-billeder med over, så
derfor skal du tilføje disse to linier til
<filename>/etc/http/conf/httpd.conf</filename>:
</para>

<screen>
# For de almindelige WML-sider
AddType text/vnd.wap.wml     .wml
# For WML indlejret grafik
AddType image/vnd.wap.wbmp   .wbmp    
</screen>

<para>
Nu skal du bare genstarte Apache, og du har en WAP-server. Lad os lige
tage to eksempler.
</para>

<example id="wap-1">
<title>Det første WAP-eksempel</title>

<para>
Det enkleste eksempel på en WAP-side er nok denne
</para>

<screen>
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN"
   "http://www.wapforum.org/DTD/wml_1.1.xml"&gt;
&lt;wml&gt;
 &lt;card id='home'&gt;
  &lt;p&gt;
Her kommer teksten på min f&amp;oslash;rste WAP-side
  &lt;/p&gt;
 &lt;/card&gt;
&lt;/wml&gt;
</screen>

<para>
Det vigtigste, der skal bemærkes sammenlignet med HTML, er at næsten alle
tags skal afsluttes, dvs. &lt;p&gt; <emphasis>skal</emphasis> 
efterfølges af &lt;/p&gt;. Dog skal et billede ikke afsluttet, som det
kan ses i næste eksempel
</para>

</example>

<example id="wap-2">
<title>Et WAP-eksempel med et billede</title>

<para>
&lt;img&gt; skal anvendes med / til sidst og alt-tag skal med.
</para>


<screen>
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN"
   "http://www.wapforum.org/DTD/wml_1.1.xml"&gt;
 
&lt;wml&gt;
  &lt;card id="demo" title="Peters s&amp;oslash;n"&gt;
    &lt;p&gt;
    Her er min s&amp;oslash;de s&amp;oslash;n Frederik
    &lt;img src="F2.wbmp" alt="Frederik"/&gt;
    &lt;/p&gt;
  &lt;/card&gt;
&lt;/wml&gt;
</screen>
</example>

<para>
WML er en ret stor standard, som man kan læse mere på på 
<ulink url="http://www.wap.com">http://www.wap.com</ulink> eller 
<ulink url="http://www.wapforum.com">http://www.wapforum.com</ulink>.  Du kan
på 
<ulink url="http://www.anywhereyougo.com/ayg/ayg/Content.po?name=wap/Wmlidx">http://www.anywhereyougo.com/ayg/ayg/Content.po?name=wap/Wmlidx</ulink>
få mere hjælp om de enkelte tags.
Har du ingen WAP-telefon kan du med fordel bruge
<ulink url="http://gelon.net/">http://gelon.net</ulink>
som har en Java-baseret WAP-simulator der er velegnet til test.
</para>

<para>
Er du interesseret i en kom-i-gang-guide, så prøv at læse
<ulink
url="http://www.zend.com/zend/tut/wap.php">http://www.zend.com/zend/tut/wap.php</ulink>
eller 
<ulink url="http://www.wapdesign.org.uk/tutorial.html">http://www.wapdesign.org.uk/tutorial.html</ulink>
</para>

<para>
I det følgende går vi dog lidt længere, idet vi viser hvordan man også
får PHP-understøttelse til WAP. Vi antager at du har installeret
Apache og PHP4.
</para>

<para>
Når et PHP-program starter med at sende data tilbage til modtageren,
sender PHP først noget et <emphasis>HTTP-hoved</emphasis>.
Hovedet indeholder dato, serverudgave og meget andet, men især
hvilken type data der vil blive sendt.
Hvis intet er anført i hovedet sendes <EMPHASIS>Content-type: text/html</EMPHASIS>,
og dette kan ændres med en enkelt kommando: 
<EMPHASIS>Content-type: text/vnd.wap.wml</EMPHASIS>.
Herunder er eksemplet fra før hvor filen hedder <FILENAME>test.php</FILENAME> i stedet
for <FILENAME>test.wml</FILENAME>, hvorefter Apache vil overgive kontrollen med
filen til PHP.
</para>

<screen>
<COMMAND>&lt;?php
   // Filnavn: test.php
   header("Content-type: text/vnd.wap.wml");
?&gt;</COMMAND>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.1//EN"
   "http://www.wapforum.org/DTD/wml_1.1.xml"&gt;
&lt;wml&gt;
 &lt;card id='home'&gt;
  &lt;p&gt;
  Dato idag er <COMMAND>&lt;?php echo date("Y-m-d"); ?&gt;</COMMAND>
  &lt;/p&gt;
 &lt;/card&gt;
&lt;/wml&gt;
</screen>

<para>
I Perl skrives HTTP-hovedet i starten og efterfølges af to '\n'.
Dette eksempel skal placeres i <filename>/cgi-bin/</filename>-kataloget.
</para>

<screen>
#!/usr/bin/perl -w
# Filnavn: test.pl
 
# Bemærk to gange '\n' som afslutter HTTP-hovedet
<COMMAND>print "Content-type: text/vnd.wap.wml\n\n";</COMMAND>
 
print "&lt;?xml version=\"1.0\"?&gt;\n";
print "&lt;!DOCTYPE wml PUBLIC \"-//WAPFORUM//DTD WML 1.1//EN\"\n";
print "  \"http://www.wapforum.org/DTD/wml_1.1.xml\"&gt;\n";
print "&lt;wml&gt;\n";
print "  &lt;card id='home'&gt;\n";
print "  &lt;p&gt;\n";
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)
    = localtime(time);
my $today=sprintf("%04d-%02d-%02d",$year+1900,$mon+1,$mday);
<COMMAND>print "  Dato idag er $today\n";</COMMAND>
print "  &lt;/p&gt;\n";
print "  &lt;/card&gt;\n";
print "&lt;/wml&gt;\n";
</screen>

<para>
SSLUG har eksempelvis siden november 1999 vist sin kalender i WAP/PHP-format.
Kildeteksten findes på
<ulink url="http://www.sslug.dk/adict/wap.phps">http://www.sslug.dk/adict/wap.phps</ulink>
og kan ses med en almindelig browser.
Resultatet af programmet findes på
<ulink url="http://www.sslug.dk/adict/wap.php">http://www.sslug.dk/adict/wap.php</ulink>,
hvor du så skal bede browseren om at gemme indholdet på din disk hvis du prøver med din
browser.
Alternativt kan <ulink url="http://gelon.net/">http://gelon.net</ulink> bruges til
at se WAP-kalenderen.
</para>

<para>
Du kan læse mere om WAP til Linux på 
<ulink url="http://www.linux.com/develop/newsitem.phtml?sid=1&amp;aid=12502">http://www.linux.com/develop/newsitem.phtml?sid=1&amp;aid=12502</ulink>.
</para>


</sect1>

<sect1 id="laes-mere-om-apache">
<title>Læs mere om Apache</title>
<para>
Ben Laurie &amp; Peter Laurie: 
<emphasis>Apache: The Definitive Guide</emphasis>, 
O'Reilly &amp; Associates, Inc., ISBN: 1-56592-250-6, 246 sider + CDROM 
</para>
</sect1>

<sect1 id="Alternative-webservere">
<title>Alternative webservere</title>
<para>
Udover Apache serveren er der et par andre, man også kan vælge
mellem. De to mest interessante er beskrevet herunder. Ved at søge på
<ulink url="http://www.linuxberg.org/">
http://www.linuxberg.org/</ulink> kan du finde mange andre.
</para>

<sect2 id="Roxen">
<title>Roxen</title>
<indexterm><primary>Roxen</primary></indexterm>

<para>
Et godt alternativ til Apache er Roxen, som er lavet i Sverige. Roxen
har et veludviklet makrosprog, hvilket gør det let at understøtte flere sprog
på sine websider. Roxen udmærker sig også ved at kunne
sættes op direkte via Internettet. Roxen kan hentes fra
<ulink url="http://www.roxen.com">http://www.roxen.com</ulink>.
</para>
</sect2>

<sect2 id="Netscape-Webservere">
<title>Netscape Webservere</title>
<para>
En ting som ofte afskrækker nye webmestre er at Apache sættes op
via tekstfiler.  Dette er ikke tilfældet for Netscapes webservere,
som har et komplet browser-baseret interface til opsætning,
administration og anden vedligeholdelse af serverne.
</para>

<para>
I lighed med Apache, findes der en række moduler til Netscape
Serverne, som f.eks.  giver mulighed for at afvikle Java på serveren,
et modul der svarer til mod_perl og ligende.
</para>

<para>
Netscapes webservere hedder i dag iPlanet, og kan kun erhverves på
kommercielle vilkår.
</para>
</sect2>
</sect1>
</chapter>
