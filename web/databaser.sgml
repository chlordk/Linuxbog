<CHAPTER id="databaser">
<!--
Databaser
	SQL
	PostgreSQL
		Shell-script
		PHP
		Perl
		Python
  MySQL
    PHP
	(Andre databaser)

CHANGELOG
2000-04-09
 Shell-script rettet småting, flere stikord til shell
 Symbion ændret til DKUUG

2000-04-05:
 Shell-script tilføjet
 Startet på Python

2000-04-01:
 Første release af databaser.sgml
-->

<TITLE>Databaser</TITLE>
<INDEXTERM><PRIMARY>Databaser</PRIMARY></INDEXTERM>
<PARA>
Linux er på grund af sin stabilitet, et godt valg som databaseserver.
Inden for databaser er
de facto standarden sproget SQL, hvor data kan tilgås fra tekst-,
grafisk-, og web-baserede løsninger samtidigt.
</PARA>

<PARA>
De to absolut mest brugte SQL-databaser på Linux er PostgreSQL og MySQL.
Til kommercielt brug koster MySQL en smule, men til privat brug er
både PostgreSQL og MySQL gratis. For begge databaser gælder at du frit
kan vælge de programmeringssprog og omgivelser du kender fra Linux.
Perl, PHP, Python, C, Tcl/Tk, Java og foretrækker du shell-scripts, er
det også en mulighed.
</PARA>

<PARA>
Da MySQL kun fås i Open Source i en ældre version, har vi valgt at
bruge PostgreSQL i de senere eksempler. Til læsning og skrivning af
data er MySQL en lille smule hurtigere end PostgreSQL, men 'prisen'
er så at MySQL mangler transactions (roll-back).
</PARA>

<PARA>
De helt store kommercielle SQL-database producenter, Oracle, Sybase, 
Informix, IBM med DB2 og Inprise med InterBase er også kommet med en
Linux-version af deres SQL-databaser. Programmeringsmulighederne er de
samme, så det er nemt
at flytte sin applikation den ene eller den anden vej, eller have et
blandet miljø. Disse databaser på Linux anvendes i høj grad i
produktionsmiljø, og i særdeleshed i udviklingsmiljø.
</PARA>

<SECT1 id="db-sql">
<TITLE>SQL</TITLE>
<INDEXTERM><PRIMARY>SQL</PRIMARY></INDEXTERM>
<INDEXTERM><PRIMARY>Databaser</PRIMARY><SECONDARY>SQL</SECONDARY></INDEXTERM>

<PARA>
<ACRONYM>SQL</ACRONYM> er en forkortelse for Structured Query Language og er et generelt
sprog til at tilgå data i en SQL-database.  De basale kommandoer i SQL
er nemme at lære, så man kommer hurtigt igang med sin opgave.  Har man
kun een tabel at arbejde med, er SQL lige så nemt at bruge som andre
konventionelle databaser, men når man ønsker at hente data fra flere tabeller
samtidigt, så er der rigtigt mange fordele ved SQL.  Har du prøvet at
arbejde med <ACRONYM>ASCII</ACRONYM> filer der opdateres af flere personer
samtidigt, så kender du til problemer som SQL-databaser løser for dig.
</PARA>

<PARA>
Et nemt forståeligt eksempel med to tabeller, eller 'relationelle
tabeller' som det retteligt hedder, er en tabel med firmaer og en
tabel med postnumre.  For at sikre os at alle bynavne er stavet på
samme måde, er postnummer og bynavn i en tabel for sig.  I tabellen
med firmaer er til gengæld kun angivet postnummeret og ikke bynavnet.
</PARA>

<PARA>
Skematisk kunne tabellerne se således ud
</PARA>

<TABLE ID="db-firma">
<TITLE>Firma-tabel</TITLE>
<TGROUP cols=3 align="char">
<THEAD><ROW>
 <ENTRY>FirmaNavn</ENTRY>
 <ENTRY>Vej</ENTRY>
 <ENTRY>PostNr</ENTRY>
</ROW></THEAD>
<TBODY>
<ROW>
 <ENTRY>Vagabondos</ENTRY>
 <ENTRY>Tagensvej 100</ENTRY>
 <ENTRY>2200</ENTRY>
</ROW>
<ROW>
 <ENTRY>DKUUG</ENTRY>
 <ENTRY>Fruebjergvej 3</ENTRY>
 <ENTRY>2100</ENTRY>
</ROW>
<ROW>
 <ENTRY>Niels Bohr Institutet</ENTRY>
 <ENTRY>Blegdamsvej 17-21</ENTRY>
 <ENTRY>2100</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>

<TABLE ID="db-postnumre">
<TITLE>Postnumre-tabel</TITLE>
<TGROUP cols=2 align="char">
<THEAD><ROW>
 <ENTRY>PostNr</ENTRY>
 <ENTRY>ByNavn</ENTRY>
</ROW></THEAD>
<TBODY>
<ROW>
 <ENTRY>2100</ENTRY>
 <ENTRY>København Ø</ENTRY>
</ROW>
<ROW>
 <ENTRY>2200</ENTRY>
 <ENTRY>København N</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>

<PARA>
Opgaven er nu at få en liste af alle firmaer med fuld adresse.
Der er en relation i mellem de to tabeller ved feltet
<DATABASE>PostNr</DATABASE> og SQL-kommandoen er så:
<COMMAND>SELECT FirmaNavn,Vej,PostNr,Bynavn FROM Firma,Postnumre WHERE Firma.PostNr=Postnumre.PostNr</COMMAND>
Resultatet af ovenstående ser således ud:
</PARA>

<TABLE ID="db-resultat">
<TITLE>Søgeresultat: Firma+Postnumre</TITLE>
<TGROUP cols=4 align="char">
<THEAD><ROW>
 <ENTRY>FirmaNavn</ENTRY>
 <ENTRY>Vej</ENTRY>
 <ENTRY>PostNr</ENTRY>
 <ENTRY>ByNavn</ENTRY>
</ROW></THEAD>
<TBODY>
<ROW>
 <ENTRY>Vagabondos</ENTRY> 
 <ENTRY>Tagensvej 100</ENTRY>
 <ENTRY>2200</ENTRY> 
 <ENTRY>København N</ENTRY>
</ROW>
<ROW>
 <ENTRY>DKUUG</ENTRY> 
 <ENTRY>Fruebjergvej 3</ENTRY>
 <ENTRY>2100</ENTRY> 
 <ENTRY>København Ø</ENTRY>
</ROW>
<ROW>
 <ENTRY>Niels Bohr Institutet</ENTRY> 
 <ENTRY>Blegdamsvej 17-21</ENTRY>
 <ENTRY>2100</ENTRY> 
 <ENTRY>København Ø</ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>

<PARA>
Det der skete med SQL-kommandoen, var at der blev udført en 'join'
imellem de to tabeller, således at postnumrene blev parret fra hver
tabel.
</PARA>

<PARA>
Dette eksempel er selvfølgelig nemt at lave med
<ACRONYM>ASCII</ACRONYM> tekst-filer,
men prøv at forestil dig at der var tre eller flere tabeller.
</PARA>

<PARA>
Det vil være for vidt at komme ind på alle de SQL-kommandoer man kan
lave i denne bog, da der findes mange gode bøger om emnet på dansk, og
ikke mindst på engelsk. Er bøger uden for rækkevidde, er der god hjælp
at hente på nettet.  Se MySQL og PostgreSQL's hjælpesider.
</PARA>

<PARA>
Læsning af data er nok den mest brugte SQL-kommando, så den bliver
lige beskrevet i korte træk.  I sin simpleste form kan man skrive
<COMMAND>SELECT * FROM Firma</COMMAND>, der giver alle felter fra
tabellen 'Firma' i tilfældig rækkefølge.  Er det kun 'FirmaNavn' og
'PostNr' man ønsker udskrevet, skrives <COMMAND>SELECT
FirmaNavn,PostNr FROM Firma</COMMAND>.  Data kommer i tilfældig
rækkefølge, så der må lige sortering på <COMMAND>SELECT
FirmaNavn,PostNr FROM Firma ORDER BY PostNr</COMMAND>.
</PARA>

<PARA>
Senere i bogen er nogle eksempler på hvordan man praktisk bruger SQL
til noget der har med rigtige brugere at gøre.  Til disse eksempler
anvendes følgende liste af SQL-kommandoer som basis, og listen giver
samtidigt de mest brugte SQL-kommandoer.  Kommandoerne gør følgende:
</PARA>

<ITEMIZEDLIST MARK="bullet" SPACING="compact">
<LISTITEM><PARA>Opretter en tabel med to felter</PARA></LISTITEM>
<LISTITEM><PARA>Tilføjer en post til tabellen</PARA></LISTITEM>
<LISTITEM><PARA>Retter en post i tabellen</PARA></LISTITEM>
<LISTITEM><PARA>Udskriver alle poster</PARA></LISTITEM>
<LISTITEM><PARA>Sletter en post</PARA></LISTITEM>
<LISTITEM><PARA>Sletter tabellen</PARA></LISTITEM>
</ITEMIZEDLIST>

<SCREEN>
CREATE TABLE linuxbog(kapitel INT, titel VARCHAR(40));
INSERT INTO linuxbog(kapitel, titel) VALUES(0, 'Indledning');
UPDATE linuxbog SET kapitel=1 WHERE kapitel=0;
SELECT * FROM linuxbog ORDER BY kapitel;
DELETE FROM linuxbog WHERE kapitel=1;
DROP TABLE linuxbog;
</SCREEN>

<PARA>
De viste SQL-kommandoer er helt basale og virker med alle SQL-databaser.
</PARA>

<PARA>
Læs mere om SQL-kommandoer på
<ULINK URL="http://w3.one.net/~jhoffman/sqltut.htm">http://w3.one.net/~jhoffman/sqltut.htm</ULINK>.
</PARA>

</SECT1><!-- db-sql -->

<SECT1 id="db-pgsql">
<TITLE>PostgreSQL</TITLE>
<INDEXTERM><PRIMARY>PostgreSQL</PRIMARY></INDEXTERM>
<INDEXTERM><PRIMARY>Databaser</PRIMARY><SECONDARY>PostgreSQL</SECONDARY></INDEXTERM>
<INDEXTERM><PRIMARY>SQL</PRIMARY><SECONDARY>PostgreSQL</SECONDARY></INDEXTERM>

<PARA>
PostgreSQL er den mest avancerede Open Source SQL-database der findes
til Linux.  PostgreSQL startede som et studieprojekt, og har udviklet
sig til fuldt professionel database med alle de avancerede teknologier
som kræves idag: views, triggers, stored-procedures, transactions
sub-select etc.
</PARA>

<PARA>
Installation af PostgreSQL fra en RPM-fil er den nemmeste måde at installere på.
Efter installationen startes PostgreSQL.
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>rpm -ivh postgresql-7.*.rpm</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>rpm -ivh postgresql-server*.rpm</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>/etc/rc.d/init.d/postgresql start</USERINPUT> 
</SCREEN>

<PARA>
En nem måde at bruge PostgreSQL fra en web-server er ved at
oprette en bruger med navnet <FILENAME>nobody</FILENAME>.
Apache starter webserverne som brugeren <FILENAME>nobody</FILENAME>
og så behøver
man ikke angive password i sine web-scripts, idet PostgreSQL
ser at man er <FILENAME>nobody</FILENAME> når man åbner en database.
</PARA>

<PARA>
Før <FILENAME>nobody</FILENAME> kan få adgang skal <FILENAME>nobody</FILENAME>
oprettes som PostgreSQL bruger.
Login som brugeren <FILENAME>postgres</FILENAME> og opret brugeren
<FILENAME>nobody</FILENAME>.
Kender du ikke <FILENAME>postgres</FILENAME> passwordet, kan det gøres således:
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>su - postgres</USERINPUT>
<PROMPT>[postgres@linus /pgsql]$ </PROMPT><USERINPUT>createuser nobody</USERINPUT>
</SCREEN>

<PARA>
<FILENAME>nobody</FILENAME> skal også have en database.
Login som <FILENAME>nobody</FILENAME>.
Ved ikke at angive databasenavnet <DATABASE>nobody</DATABASE> er det
default navn når <COMMAND>createdb</COMMAND> køres.
Kender du ikke <FILENAME>nobody</FILENAME> passwordet, kan det gøres således:
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>su - nobody</USERINPUT>
<PROMPT>[nobody@linus /]$ </PROMPT><USERINPUT>createdb</USERINPUT>
</SCREEN>

<PARA>
Databasen kan nu anvendes med de ganske få kommandoer SQL har.  Der er
få forskelle i de forskellige SQL-databaser der findes, men du lærer
hurtigt de få forskelle der er, hvis du skifter over til en anden
database.  Her er brugt SQL-kommandoer som virker med alle de
SQL-databaser som du vil komme i nærheden af.  Følgende liste af
kommandoer opretter en tabel, indsætter en post, retter den samme post,
udlæser indholdet af tabellen, sletter en post og sletter tabellen.
</PARA>

<SCREEN>
-- fil: create.sql
-- PostgreSQL/LinuxBog
-- Kør dette script:
--  psql nobody &lt; create.sql
CREATE TABLE linuxbog(kapitel INT, titel VARCHAR(40));
INSERT INTO linuxbog(kapitel, titel) VALUES(0, 'Indledning');
UPDATE linuxbog SET kapitel=1 WHERE kapitel=0;
SELECT * FROM linuxbog ORDER BY kapitel;
DELETE FROM linuxbog WHERE kapitel=1;
DROP TABLE linuxbog;
</SCREEN>

<PARA>
SQL-kommandoerne kan nemt indlæses fra en fil med kommandoen
</PARA>

<SCREEN>
<PROMPT>[nobody@linus /]$ </PROMPT><USERINPUT>psql nobody &lt; create.sql</USERINPUT>
</SCREEN>

<PARA>
Hvis du lige undlader at slette posterne (DELETE) og tabellen (DROP), 
kan eksemplet bruges sammen med de efterfølgende scripts i Shell, PHP, Perl og Python.
Bemærk at hver linie er afsluttet med semi-kolon ';'.
Semi-kolon bruges kun med programmet <FILENAME>psql</FILENAME> og ikke i script og programmeringssprogene.
</PARA>

<PARA>
Kommandolinie programmet <COMMAND>psql</COMMAND> kan anvendes til meget,
men skal man
have en rigtig applikation, skal man bruge et script-sprog eller
programmeringssprog.  Linux har et bredt udvalg af forskellige sprog
der kan anvende de SQL-databaser der findes til Linux.  Næsten alle
sprog kan bruges sammen med alle databaserne.  Vi har her valgt at
bruge PostgreSQL som basis, og vise eksempler på hvordan man anvender
disse sammen med:
</PARA>

<ITEMIZEDLIST MARK="bullet" SPACING="compact">
<LISTITEM><PARA>Shell-programmering <XREF LINKEND="db-pgsql-shell"></PARA></LISTITEM>
<LISTITEM><PARA><APPLICATION><ACRONYM>PHP</ACRONYM></APPLICATION> <XREF LINKEND="db-pgsql-php"></PARA></LISTITEM>
<LISTITEM><PARA><APPLICATION><ACRONYM>Perl</ACRONYM></APPLICATION> <XREF LINKEND="db-pgsql-perl"></PARA></LISTITEM>
<LISTITEM><PARA><APPLICATION>Python</APPLICATION> <XREF LINKEND="db-pgsql-python"></PARA></LISTITEM>
</ITEMIZEDLIST>

<PARA>
I <FILENAME>/usr/doc/</FILENAME> har du hele PostgreSQL-manualen
<ULINK URL="file:/usr/doc/postgresql-6.5.2/postgres/">file:/usr/doc/postgresql-6.5.2/postgres/</ULINK>.
Har du en anden version af PostgreSQL, så start her 
<ULINK URL="file:/usr/doc/">file:/usr/doc/</ULINK>.
Ellers ligger manualen også på nettet 
<ULINK URL="http://www.postgresql.org/docs/user/index.html">http://www.postgresql.org/docs/user/index.html</ULINK>.
</PARA>

<PARA>
PostgreSQL har sin hjemmeside på
<ULINK URL="http://www.postgresql.org/">http://www.postgresql.org/</ULINK>.
</PARA>

<SECT2 id="db-pgsql-shell">
<TITLE>Shell programmering</TITLE>
<INDEXTERM>
 <PRIMARY>Shell programmering</PRIMARY>
 <SECONDARY>PostgreSQL</SECONDARY>
</INDEXTERM>
<INDEXTERM>
 <PRIMARY>CGI-script</PRIMARY>
 <SECONDARY>PostgreSQL</SECONDARY>
</INDEXTERM>
<INDEXTERM> 
 <PRIMARY>PostgreSQL</PRIMARY>
 <SECONDARY>Shell programmering</SECONDARY>
</INDEXTERM>
<INDEXTERM> 
 <PRIMARY>Apache</PRIMARY>
 <SECONDARY>CGI-script</SECONDARY>
</INDEXTERM>

<PARA>
Shell-programmer er ikke det mest avancerede script-sprog, men man kan hurtigt
få lavet lidt database alligevel.
<!--Læs også XREF LINKEND="shell" om Shell-programmering.-->
For at køre de følgende eksempler, kræves kun at PostgreSQL er installeret.
<COMMAND>psql</COMMAND> har en option så man kan skrive
<ACRONYM>SQL</ACRONYM>-kommandoer som parameter direkte fra kommandolinien.
</PARA>

<SCREEN>
<PROMPT>[nobody@linus /]# </PROMPT><USERINPUT>psql nobody -c "SELECT * FROM linuxbog"</USERINPUT>
</SCREEN>

<PARA>
En anden option giver output som HTML.
Har du Apache installeret kan der nu laves et simpelt udtræk til web, ved at
lægge et lille shell-script i <FILENAME>cgi-bin</FILENAME>.
Apache kan have dette sub-dir forskellige steder, så den nemmeste måde at
finde det er med kommandoen <COMMAND>locate cgi-bin</COMMAND>.
Placer scriptet <FILENAME>pgsql.sh</FILENAME> i <FILENAME>cgi-bin</FILENAME>
og gør det eksekverbart med kommandoen <COMMAND>chmod +x pgsql.sh</COMMAND>.
</PARA>

<SCREEN>
#!/bin/sh
echo Content-type: text/html
echo
echo "&lt;HTML&gt;&lt;TITLE&gt;PostgreSQL CGI&lt;/TITLE&gt;"
echo "&lt;H1&gt;PostgreSQL CGI&lt;/H1&gt;"
psql nobody -H -c "SELECT * FROM linuxbog"
echo "&lt;/HTML&gt;"
</SCREEN>

<PARA>
CGI-scriptet kan nu startes fra din browser med URL'en
<ULINK URL="http://localhost/cgi-bin/pgsql.sh">http://localhost/cgi-bin/pgsql.sh</ULINK>.
Til test kan scriptet også køres fra kommandolinien:
<COMMAND>./pgsql.sh</COMMAND> hvorved output kommer ud på skærmen.
</PARA>

<PARA>
Ovenstående SQL-kommando er nok ikke lige det du vil,
men nok mere noget i retning af:
</PARA>

<SCREEN>
psql nobody -H -T "cellspacing='0'" -c "SELECT kapitel AS \"Bog kapitel\", titel FROM linuxbog ORDER BY kapitel DESC LIMIT 10 OFFSET 0"
</SCREEN>

<PARA>
I ovenstående kommer der en pænere ramme uden om med option 
<OPTION>-T "cellspacing='0'"</OPTION>.
Så er hver kolonne angivet, f.eks. <OPTION>kapitel</OPTION>.
Typisk har hver kolonne et forkortet navn, hvilket ikke ser godt ud i en tabel.
Ved at skrive <OPTION>AS \"Bog kapitel\"</OPTION> får kolonnen et andet navn.
<OPTION>ORDER BY kapitel DESC</OPTION> sortere på 'kapitel' og DESC gør det i modsat orden.
<OPTION>LIMIT 10</OPTION> gør at der kun kommer 10 rækker,
og <OPTION>OFFSET 0</OPTION> fortæller at der skal startes med række 0.
</PARA>

<PARA>
Shell-scripts er gode til små simple test, men man skal nok holde sig fra at
lave større programmer.
Muligheden er der, og det virker!
I de næste afsnit vises det samme eksempel i PHP, Perl og Python, som er bedre til
at håndtere de større programmer.
</PARA>
</SECT2><!-- db-pgsql-shell -->

<SECT2 id="db-pgsql-php">
<TITLE>PHP - PostgreSQL</TITLE>
<INDEXTERM><PRIMARY>PHP</PRIMARY><SECONDARY>PostgreSQL</SECONDARY></INDEXTERM>
<INDEXTERM><PRIMARY>PostgreSQL</PRIMARY><SECONDARY>PHP</SECONDARY></INDEXTERM>

<PARA>
PHP er rigtigt godt sprog til fremstilling af web-applikationer.
Har du lidt erfaring med programmering i andre sprog, kommer du hurtigt igang med PHP og PostgreSQL.
</PARA>

<PARA>
<APPLICATION>PHP</APPLICATION> med <APPLICATION>PostgreSQL</APPLICATION> interface installeres nemmest fra RPM-filer.
Mandrake 7.0 har modulerne færdigpakket, som kan hentes på
<ULINK URL="http://rpmfind.net/linux/RPM/mandrake/7.0/Mandrake/RPMS/System_Environment_Daemons.html">http://rpmfind.net/linux/RPM/mandrake/7.0/Mandrake/RPMS/System_Environment_Daemons.html</ULINK>.
PHP i en nyere version kan oftest findes hos Troels Arvin
<ULINK URL="http://www.fsr.ku.dk/people/troels/rpms/php/">http://www.fsr.ku.dk/people/troels/rpms/php/</ULINK>.
<APPLICATION>PostgreSQL</APPLICATION> har du installeret, så du skal kun hente følgende:
</PARA>

<ITEMIZEDLIST MARK="bullet" SPACING="compact">
<LISTITEM><PARA>apache-1.3.9-17mdk.rpm 2.6MB</PARA></LISTITEM>
<LISTITEM><PARA>mod_php3-3.0.13-6mdk.rpm 850KB</PARA></LISTITEM>
<LISTITEM><PARA>mod_php3-pgsql-3.0.13-6mdk.rpm 30KB</PARA></LISTITEM>
</ITEMIZEDLIST>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>rpm -ivh apache-1.3.9-17mdk.i586.rpm</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>rpm -ivh mod_php3-3.0.13-6mdk.i586.rpm</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>rpm -ivh mod_php3-pgsql-3.0.13-6mdk.i586.rpm</USERINPUT>
</SCREEN>

<PARA>
Hvis ikke <APPLICATION>Apache</APPLICATION> er startet nu, så gør det.
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>/etc/rc.d/init.d/httpd start</USERINPUT>
</SCREEN>

<PARA>
Eksemplet <FILENAME>pgsql.php3</FILENAME> bruger den tabel der blev beskrevet i <XREF LINKEND="db-sql"> om SQL.
</PARA>

<SCREEN>
&lt;html&gt;&lt;head&gt;&lt;TITLE&gt;LinuxBog PostgreSQL PHP&lt;/TITLE&gt;&lt;/head&gt;
&lt;?  // Her skiftes der fra HTML til PHP-kode med tegnet '&lt;?'
  // Åben en forbindelse til PostgreSQL
  // Ved ikke at angive brugernavn, er det 'nobody' der er brugeren
  $conn = pg_connect("");
  // Udfør en læsning fra tabellen 'linuxbog'
  $res = pg_exec($conn, "SELECT * FROM linuxbog ORDER BY kapitel");
  // For alle poster (linier), udskriv indholdet
  for ($n = 0; $n &lt; pg_numrows($res); $n++ ) {
    $post = pg_fetch_array($res, $n);
    print( $post["kapitel"]." ".$post["titel"]."&lt;br&gt;\n" );
  }
  // Frigiv hukommelse
  pg_freeresult($res);
  // Luk forbindelsen
  pg_close($conn);
?&gt;&lt;/html&gt;
</SCREEN>

<PARA>
Resultatet af ovenstående ser således ud i en browser
</PARA>

<SCREEN>
1 Indledning
</SCREEN>

<PARA>
PHP er Open Source og kan hentes på
<ULINK URL="http://dk.php.net/">http://dk.php.net/</ULINK>.
</PARA>
</SECT2><!-- db-pgsql-php -->

<SECT2 id="db-pgsql-perl">
<TITLE>Perl</TITLE>
<INDEXTERM><PRIMARY>Perl</PRIMARY><SECONDARY>PostgreSQL</SECONDARY></INDEXTERM>
<INDEXTERM><PRIMARY>PostgreSQL</PRIMARY><SECONDARY>Perl</SECONDARY></INDEXTERM>
<PARA>
Perl er effektivt programmeringssprog til mange ting.  Perl anvendtes
i starten ofte til behandling af ASCII tekst-filer, men efter de mange
år Perl har været fremme, kan man arbejde direkte med databaser.  Om
det drejer sig om et kommandolinie-program eller en web-applikation,
så kan Perl klare den opgave.  
<!--Læs også XREF LINKEND="perl-SECT1" om Perl.-->
</PARA>

<PARA>
Ved en normal Linux-installation får du automatisk installeret Perl.
Der findes mange moduler til Perl, så du får ikke dem alle installeret.
For at bruge PostgreSQL fra Perl, kræves at du installere <ACRONYM>DBI</ACRONYM> og <ACRONYM>DBD-Pg</ACRONYM>.
Det forudsættes at PostgreSQL er installeret.
Modulerne kan hentes fra 
<ULINK URL="http://sunsite.auc.dk/CPAN/modules/by-category/07_Database_Interfaces">http://sunsite.auc.dk/CPAN/modules/by-category/07_Database_Interfaces</ULINK>. Dernæst finder du de to pakker her:
<INDEXTERM><PRIMARY>Perl</PRIMARY><SECONDARY>DBI</SECONDARY></INDEXTERM>
<ITEMIZEDLIST MARK="bullet" SPACING="compact">
<LISTITEM><PARA>/DBI/DBI-1.13.tar.gz 160KB</PARA></LISTITEM>
<LISTITEM><PARA>/DBD/DBD-Pg-0.93.tar.gz 40KB</PARA></LISTITEM>
</ITEMIZEDLIST>

Installationen er meget nem og står beskrevet i begge pakker, men lad
os lige tage den med her for en sikkerheds skyld.
</PARA>
<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>tar xzvf DBI-1.13.tar.gz</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>cd DBI-1.13</USERINPUT>
<PROMPT>[root@linus DBI-1.13]# </PROMPT><USERINPUT>perl Makefile.PL</USERINPUT>
<PROMPT>[root@linus DBI-1.13]# </PROMPT><USERINPUT>make</USERINPUT>
<PROMPT>[root@linus DBI-1.13]# </PROMPT><USERINPUT>make test</USERINPUT>
<PROMPT>[root@linus DBI-1.13]# </PROMPT><USERINPUT>make install</USERINPUT>
</SCREEN>

<PARA>
Fremgangsmåden er næsten den samme for DBD-Pg-0.93.tar.gz.
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>tar xzvf DBD-Pg-0.93.tar.gz</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>cd DBD-Pg-0.93</USERINPUT>
<PROMPT>[root@linus DBD-Pg-0.93]# </PROMPT><USERINPUT>export POSTGRES_INCLUDE=/usr/include/pgsql</USERINPUT>
<PROMPT>[root@linus DBD-Pg-0.93]# </PROMPT><USERINPUT>export POSTGRES_LIB=/usr/lib/pgsql</USERINPUT>
<PROMPT>[root@linus DBD-Pg-0.93]# </PROMPT><USERINPUT>perl Makefile.PL</USERINPUT>
<PROMPT>[root@linus DBD-Pg-0.93]# </PROMPT><USERINPUT>make</USERINPUT>
<PROMPT>[root@linus DBD-Pg-0.93]# </PROMPT><USERINPUT>make test</USERINPUT>
<PROMPT>[root@linus DBD-Pg-0.93]# </PROMPT><USERINPUT>make install</USERINPUT>
</SCREEN>

<PARA>
Her er et lille eksempel i Perl der læser fra PostgreSQL.  Eksemplet
bruger den tabel der blev oprettet i 
<XREF LINKEND="db-pgsql"> om PostgreSQL.
Tabellen <DATABASE>linuxbog</DATABASE> åbnes og alle poster udskrives.
</PARA>
<SCREEN>
#!/usr/bin/perl
# Inkluder DBI-modulet
use DBI;
# Åben en DatabaseHandle til PostgreSQL
$dbh = DBI-&gt;connect("DBI:Pg:dbname=nobody");
# Forbered en en SQL-kommando for læsning af een tabel
$sth = $dbh-&gt;prepare("SELECT * FROM linuxbog ORDER BY kapitel");
# Udfør SQL-kommandoen
$sth-&gt;execute;
# For alle poster (linier), udskriv indholdet
while (($kapitel,$titel) = $sth-&gt;fetchrow) {
  print "$kapitel $titel\n";
}
# Nedlæg StatementHandle
$sth-&gt;finish;
# Luk forbindelsen til PostgreSQL
$dbh-&gt;disconnect;
</SCREEN>

<PARA>
DBI og DBD har mange flere kommandoer som kan findes i online-manualen
</PARA>
<SCREEN>
<PROMPT>[daisy@linus daisy]$ </PROMPT><USERINPUT>perldoc DBI</USERINPUT>
<PROMPT>[daisy@linus daisy]$ </PROMPT><USERINPUT>perldoc DBI::FAQ</USERINPUT>
<PROMPT>[daisy@linus daisy]$ </PROMPT><USERINPUT>perldoc DBD::Pg</USERINPUT>
</SCREEN>

<PARA>
Perl har hjemmesiden
<ULINK URL="http://www.perl.com/">http://www.perl.com/</ULINK>
og
<ULINK URL="http://www.perl.org/">http://www.perl.org/</ULINK>
</PARA>

</SECT2><!-- db-pgsql-perl -->

<SECT2 ID="db-pgsql-python">
<TITLE>Python</TITLE>
<INDEXTERM><PRIMARY>Python</PRIMARY><SECONDARY>PostgreSQL</SECONDARY></INDEXTERM>
<INDEXTERM><PRIMARY>PostgreSQL</PRIMARY><SECONDARY>Python</SECONDARY></INDEXTERM>

<PARA>
Python er et af de nyere fortolkede sprog der vinder kraftigt frem.
<!--I XREF LINKEND="python-sect1" står mere om Python, så --> 
Dette afsnit vil kun berøre Python's forbindelse til PostgreSQL.
</PARA>

<PARA>
For at bruge Python sammen med PostgreSQL skal du først have
installeret selve Python, og dernæst et PostgreSQL-modul
til Python.
Python kommer med de fleste distributioner og måske allerede
installeret på din maskine. PostgreSQL-modulet findes sammen
med PostgreSQL, f.eks. her: 
<ULINK URL="ftp://ftp.sunsite.auc.dk/disk1/www.postgresql.org/pub/binary/v7.0/redhat-RPM/RPMS/redhat-6.x/">ftp://ftp.sunsite.auc.dk/disk1/www.postgresql.org/pub/binary/v7.0/redhat-RPM/RPMS/redhat-6.x/</ULINK>.
Installationen er følgende:
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>rpm -ivh python-1.5.1*.rpm</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>rpm -ivh postgresql-python-7*.rpm</USERINPUT>
</SCREEN>

<PARA>
Her er et lille eksempel i Python der læser fra PostgreSQL.  Eksemplet
bruger den tabel der blev oprettet i
<XREF LINKEND="db-pgsql"> om PostgreSQL.
Tabellen <DATABASE>linuxbog</DATABASE> åbnes og alle poster udskrives.
</PARA>

<SCREEN>
#!/usr/bin/python
# Inkluder fra postgresql (pg) modulet
from pg import DB
# Åbne en forbindelse til databasen "nobody"
dbc = DB("nobody")
# Udfør SQL kommando
dbqo = dbc.query("SELECT * FROM linuxbog ORDER BY kapitel")
# For alle poster (linier), udskriv kapitel og titel
for data in dbqo.dictresult():
    print str(data["kapitel"]) + " : " + data["titel"]
# Luk forbindelsen til databasen
dbc.close()
</SCREEN>

<PARA>
Gem filen som <FILENAME>pgsql.py</FILENAME> og gør den eksekverbar
med kommandoen <COMMAND>chmod + pgsql.py</COMMAND>.
Og prøv så programmet.
</PARA>

<SCREEN>
<PROMPT>[daisy@linus daisy]$ </PROMPT><USERINPUT>./pgsql.py</USERINPUT>
</SCREEN>

<PARA>
Læs mere om Python <!--i XREF LINKEND="python-sect1" og på--> hjemmesiden
<ULINK URL="http://www.python.org/">http://www.python.org/</ULINK>.
</PARA>

</SECT2><!-- db-pgsql-python -->
</SECT1><!-- db-pgsql -->

<SECT1 id="db-mysql">
<TITLE>MySQL</TITLE>
<INDEXTERM><PRIMARY>MySQL</PRIMARY></INDEXTERM>
<INDEXTERM><PRIMARY>Databaser</PRIMARY><SECONDARY>MySQL</SECONDARY></INDEXTERM>
<INDEXTERM><PRIMARY>SQL</PRIMARY><SECONDARY>MySQL</SECONDARY></INDEXTERM>

<!-- af Frank M.G. Jørgensen <gajda@iname.com> -->

<PARA>
MySQL er et stærk SQL-database program, som folkene bag ikke tøver
med at udråbe som "en af de hurtigste databaser, overhovedet"
</PARA>

<PARA>
Tidligere var det sådan, at MySQL var gratis for langt de fleste, men under særlige forhold skulle
der betales for en licens. I juli måned 2000 besluttede TcX - der står bag MySQL - imidlertid, at
alle fremtidige versioner af MySQL udgives under GPL-betingelser. Det har dog hele tiden været
muligt at hente en GPL-udgave af MySQL, men der er tale om en ældre udgave, som - i sagens natur -
ikke inkluderer de seneste forbedringer.
</PARA>

<!-- RPM-INSTALLATION -->
<PARA>
TcX anbefaler, at Linux-brugere installerer MySQL ved hjælp af rpm-pakker, og det er da
også den nemmeste måde at installere programmet på. Disse pakker kan hentes fra MySQL's website på
adressen: http://www.mysql.com, eller fra sunsites danske mirror-site, http://sunsite.auc.dk/mysql/
Den nyeste version af MySQL er en  udviklingsversion, og bør derfor undgås. Den version, der er
benævnt "last stable", eller "recommended" (i skrivende stund version 3.22.32) er den du ønsker at
hente. På MySQL website angives, hvilket versionsnummer der er det anbefalede. For at installere
MySQL skal du som minimum hente følgende pakker
</PARA>

<ITEMIZEDLIST MARK="bullet" SPACING="compact">
<LISTITEM><PARA>MySQL-X.XX.XX.i386.rpm</PARA></LISTITEM>
<LISTITEM><PARA>MySQL-client-X.XX.XX.i386.rpm</PARA></LISTITEM>
</ITEMIZEDLIST>

<PARA>
Pakkerne installeres på følgende måde
</PARA>

<SCREEN>
<PROMPT>[root@linus /downloads]# </PROMPT><USERINPUT>rpm -ivh MySQL-X.XX.XX.i386.rpm</USERINPUT>
<PROMPT>[root@linus /downloads]# </PROMPT><USERINPUT>rpm -ivh MySQL-client-X.XX.XX.i386.rpm</USERINPUT>
</SCREEN>

<PARA>
Hvor X.XX.XX erstattes med versionsnummeret.
</PARA>

<PARA>
Nu er MySQL installeret, og der er blevet skabt de relevante opstartsfiler således, at MySQL
startes automatisk under opstart af maskinen. For at checke om programmet allerede kører kan du
prøve at indtaste
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>mysqladmin version</USERINPUT>
</SCREEN>

<PARA>
Hvis du får vist versionsnummer uptime mm., kører MySQL. Hvis MySQL ikke kører kan du starte den
med:
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>/etc/rc.d/init.d/mysql start</USERINPUT>
</SCREEN>

<PARA>
Nu er du parat til at gå i gang. Der er allerede under installationen
 oprettet en bruger, "root"
(denne "root" har ikke noget med maskinens "root" at
 gøre - der er tale om MySQL's "superbruger")
som har adgang til at foretage ændringer i databaserne. 
Denne bruger skal nu have et password:
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>mysqladmin -u root password 'hemmeligt'</USERINPUT>
</SCREEN>

<PARA>
Lad os nu prøve at oprette en database som vi kalder "bog". Først starter vi klientprogrammet:
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>mysql -u root --password=hemmeligt</USERINPUT>
</SCREEN>

<PARA>
Nu er vi i forbindelse med MySQL og prompten skifter til en MySQL-prompt.
</PARA>

<PARA>
Her følger så lidt (My)SQL-gymnastik. Først skal vi oprette en database
</PARA>

<SCREEN>
<PROMPT>mysql&gt; </PROMPT><USERINPUT>CREATE DATABASE bog;</USERINPUT>
</SCREEN>

<PARA>
Dernæst vælger vi den nye base
</PARA>

<SCREEN>
<PROMPT>mysql&gt; </PROMPT><USERINPUT>USE bog</USERINPUT>
</SCREEN>

<PARA>
Hvorpå vi opretter en simpel tabel i basen
</PARA>

<SCREEN>
<PROMPT>mysql&gt; </PROMPT><USERINPUT>CREATE TABLE linuxbog(kapitel INT, titel varchar(40));</USERINPUT>
</SCREEN>

<PARA>
En database uden indhold er der ikke meget sjov ved, 
så vi fylder lidt data på tabellen
</PARA>

<SCREEN>
<PROMPT>mysql&gt; </PROMPT><USERINPUT>INSERT INTO linuxbog (kapitel,titel) VALUES (0,'Forord');</USERINPUT>
<PROMPT>mysql&gt; </PROMPT><USERINPUT>INSERT INTO linuxbog (kapitel,titel) VALUES (2,'Introduktion');</USERINPUT>
</SCREEN>

<PARA>
Der er ikke noget kapitel 0, så vi retter vores indtastning til "kapitel 1"
</PARA>

<SCREEN>
<PROMPT>mysql&gt; </PROMPT><USERINPUT>UPDATE linuxbog SET kapitel=1 WHERE kapitel=0;</USERINPUT>
</SCREEN>

<PARA>
Nu vil vi gerne se, hvilke data, der rent faktisk er i vores tabel
</PARA>

<SCREEN>
<PROMPT>mysql&gt; </PROMPT><USERINPUT>SELECT * FROM linuxbog ORDER BY kapitel;</USERINPUT>
</SCREEN>

<PARA>
Og så sletter vi kapitel 1 (hvis du undlader at udføre de to sidste
trin, kan databasen bruges
sammen med PHP-eksemplet i <XREF LINKEND="db-mysql-php">.
</PARA>

<SCREEN>
<PROMPT>mysql&gt; </PROMPT><USERINPUT>DELETE FROM linuxbog WHERE kapitel=1;</USERINPUT>
</SCREEN>

<PARA>
Og her sletter vi tabellen
</PARA>

<SCREEN>
<PROMPT>mysql&gt; </PROMPT><USERINPUT>DROP TABLE linuxbog;</USERINPUT>
</SCREEN>

<PARA>
Hvis du synes, at kommandolinie-klienten er lidt tung at danse med fra tid til anden, findes der
alternativer. Du kan lave din egen web-applikation f.eks ved hjælp af PHP, hente en af de
eksisterende web-applikationer fra nettet, eller du kan hente et af de grafiske værktøjer, der
findes. MySQL er selv i gang med udviklingen af et sådant, MySQLGUI, men der er andre at
vælge imellem f.eks KmySQL, der er en KDE front-end til MySQL (og via plug-ins til mange andre
databaser, men indtil videre er MySQL bedst understøttet). Programmet fås som let installerbare
rpm-pakker (to styk; program og plug-in). MySQL-GUI kan hentes fra MySQL's egne websider, og
KMySQL kan hentes fra ksql.sourceforge.net
</PARA>

<!-- pto: Skal vi have source-inst med? Jeg synes ikke, hva mæ dej? /chlor -->
<!--
SOURCE-INSTALLATION:
Hvis du hører til de mere eventyrlystne, har behov for kontrol over, hvor MySQL skal installeres,
eller er du bare gør-det-selv-typen som ikke er bange for at få jord under neglene, kan du downloade
source-koden (som "tarball"). Den finder du også på MySQL's website (eller sunsites mirror). Her
gælder det også, at du bør undgå den nyeste udgave og i stedet hente den anbefalede. Der er nogle
værktøjer, som skal være tilstede på din maskine, for at kompileringen kan finde sted:

tar
gcc
make

Du kan checke om de er til stede med

[root@linus /root]# rpm -q tar gcc make

Hvis du får positivt svar på forespørgslen (pakkenavn med versionsnummer for alle tre pakker), er du
klar til at fortsætte. Hvis ikke må du først installere de manglende rpm-pakker (de findes på
din distributions cd-rom).

Filen med source-koden skal først pakkes ud. En hurtig måde at gøre det på er som følger:

[root@linus /root]# cd /sti/til/download
[root@linus /download]# tar xvfz mysql-X.XX.XX.tar.gz

Herved skabes en mappe, der hedder mysql-X.XX.XX, hvor alle source-filerne er placeret. skift til
denne mappe og kør configure-scriptet.


[root@linus /root]# cd mysql-X.XX.XX
[root@linus /mysql-X.XX.XX]# ./configure

Configure-scriptet checker dit system og prøver at sikre, at du har installeret, hvad der er
nødvendigt, for at programmet kan kompileres. Hvis du ikke får fejlmeddelelser fra
configure-scriptet, kan du gå videre med

[root@linus /mysql-X.XX.XX]# make

Selve kompileringen tager lidt tid, så læn dig tilbage, tag en kop kaffe og nyd forestillingen.
Når kompileringen er færdig, og du ikke har fået fejlmeddelelser, taster du:

[root@linus /mysql-X.XX.XX]# make install

Dette installerer alt på sin rette plads, og du er nu tæt på målet.

Hvis din maskine er på internet, bør du nu gøre et par sikkerhedsmæssige sidespring.
Først og fremmest skal du sørge for, at MySQL ikke køres af root. Opret derfor den bruger på dit
system, som skal køre MySQL (for en nemheds skyld kan vi jo kalde brugeren "mysql")

[root@linus /mysql-X.XX.XX]# adduser mysql
[root@linus /mysql-X.XX.XX]# passwd mysql

indtast nu et password for bruger "mysql".

Herpå åbner du din favorit-editor, og du skriver

[mysqld]
user=mysql

og gemmer filen som /etc/my.cnf.

Nu skal de nødvendige brugere og rettigheder oprettes. Dette gøres nemt ved at køre det medfølgende
script, "mysql_install_db". Hvis du har valgt at oprette en bruger "mysql" og en "my.cnf"-fil, som
vist ovenfor, så "su" til denne bruger før du kører scriptet. Hvis ikke, kan du blot køre det som
root.

[root@linus /mysql-X.XX.XX]# su mysql
[mysql@linus /mysql-X.XX.XX]# scripts/mysql_install_db
[mysql@linus /mysql-X.XX.XX]# exit

Nu skal MySQL startes, men først skal det script, der starter MySQL gøres eksekverbart

[root@linus /mysql-X.XX.XX]# chmod 744 /support-files/mysql.server
[root@linus /mysql-X.XX.XX]# /support-files/mysql.server start &

Nu kører MySQL, og du bør som nævnt i "rpm-afsnittet" vælge et password for brugeren root

Hvis du ønsker at MySQL skal starte automatisk ved opstart, kan du kopiere scriptet
"mysql.server" i mappen "support-files" til mappen, hvor dine opstarts-scripts er placeret
(RedHat: /etc/rc.d/init.d SuSE: /etc/rd.d) og skabe de relevante links til rcX.d mapperne (hvor X
er det runlevel du starter din maskine i - som oftest 3 eller 5).

[root@linus /mysql-X.XX.XX]# cp /support-files/mysql.server /etc/rc.d/init.d/mysql.server
[root@linus /mysql-X.XX.XX]# chmod 744 /etc/rc.d/init.d/mysql.server
[root@linus /mysql-X.XX.XX]# ln -s /etc/rc.d/init.d/mysql.server /etc/rc.d/rcX.d/S55mysql

Hermed har du en spritny hjemmebagt MySQL og er parat til at arbejde videre herfra. Du kan jo starte
med (My)SQL gymnastikken beskrevet i "rpm-afsnittet"

 -->


<!-- YDERLIGERE OPLYSNING -->
<PARA>
MySQL er mere end blot et database program; det er en database-server. 
Det betyder, at man - hvis
man er oprettet som bruger og er blevet tildelt de passende rettigheder
 - ved hjælp af et
klient-program kan koble sig på serveren via internet, lave opslag, 
intaste data, ændre data etc.
Disse muligheder falder udenfor dette kapitels rammer, men der findes 
et par tutorials på bl.a 
<ULINK URL="http://www.devshed.com">http://www.devshed.com</ULINK>,
 der er værd at læse desangående.
</PARA>

<SECT2 id="db-mysql-php">
<TITLE>PHP - MySQL</TITLE>
<INDEXTERM><PRIMARY>PHP</PRIMARY><SECONDARY>MySQL</SECONDARY></INDEXTERM>
<INDEXTERM><PRIMARY>MySQL</PRIMARY><SECONDARY>PHP</SECONDARY></INDEXTERM>

<PARA>
PHP er et script-sprog, der kan bruges til at skabe dynamiske websider. En af de helt store fordele
ved PHP er evnen til at kommunikere med forskellige databaseprogrammer, og PHPi
"taler" usædvanlig godt med MySQL.
</PARA>

<PARA>
Før du kan bruge PHP, skal din webserver understøtte sproget.
Dette opnås nemmest ved at
installere følgende rpm-pakker. De to "mod_php.."-filer kan findes på
<ULINK URL="ftp://ftp.redhat.com/pub/contrib/libc6/i386/">ftp://ftp.redhat.com/pub/contrib/libc6/i386/</ULINK>
</PARA>

<ITEMIZEDLIST MARK="bullet" SPACING="compact">
<LISTITEM><PARA>apache (fra din distributions cd-rom)</PARA></LISTITEM>
<LISTITEM><PARA>mod_php3-3.0.12-1.i386.rpm</PARA></LISTITEM>
<LISTITEM><PARA>mod_php-mysql-3.0.12-1.i386.rpm</PARA></LISTITEM>
</ITEMIZEDLIST>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>rpm -ivh apache_1.2.XX.i386.rpm</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>rpm -ivh mod_php3-3.0.12-1.i386.rpm</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>rpm -ivh mod_php3-mysql-3.0.12-1.i386.rpm</USERINPUT>
</SCREEN>

<PARA>
Start Apache med kommandoen
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>/etc/rc.d/init.d/httpd start</USERINPUT>
</SCREEN>

<!-- PHP-EKSEMPEL -->
<PARA>
Her er et lille eksempel på, hvorledes PHP og MySQL kan arbejde
 sammen om at hente data fra en
database i MySQL og præsentere dem på en webside. 
Databasen der bruges, er basen "bog", som blev
oprettet i <XREF LINKEND="db-mysql">.
</PARA>

<SCREEN>
&lt;HTML&gt;&lt;HEAD&gt;
&lt;TITLE&gt;LinuxBog MySQL PHP&lt;/TITLE&gt;
&lt;/HEAD&gt;&lt;BODY&gt;
&lt;? // Her skiftes der fra HTML til PHP-kode
// Åben en forbindelse til MySQL
$conn = mysql_connect("localhost","root","hemmeligt");
// Udfør en læsning fra tabellen linuxbog
$sql="SELECT * FROM linuxbog ORDER BY kapitel";
$res = mysql_db_query("bog",$sql);
// For alle poster (linier), udskriv indholdet
// i en lille tabel
echo "&lt;TABLE BORDER=1&gt;&lt;TR&gt;&lt;TD COLSPAN=2 BGCOLOR=#CCCCCC&gt;&lt;CENTER&gt;Linuxbog&lt;/CENTER&gt;&lt;/TD&gt;&lt;/TR&gt;";
  for ($n = 0; $n < mysql_numrows($res); $n++ ) {
    $post = mysql_fetch_array($res);
    echo "&lt;TR&gt;&lt;TD&gt;$post[kapitel]&lt;/TD&gt;&lt;TD&gt; $post[titel]&lt;/TD&gt;&lt;/TR&gt;\n";
  }
echo "&lt;/TABLE>";
// Frigiv hukommelse
mysql_freeresult($res);
// Luk forbindelsen
mysql_close($conn);
// Her skifter vi tilbage til HTML igen
?&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</SCREEN>

<PARA>
Kopier eventuelt dette eksempel, og indsæt det i et tomt dokument, som du gemmer som "test.php" i
Apaches dokumentrod. Kald filen igennem en web-browser, og se hvad der sker.
</PARA>

<PARA>
Nu kan det ske, at du får en fejl som ligner denne:
</PARA>

<SCREEN>
Warning: MySQL Connection Failed: Can't connect to local MySQL server through socket
'/var/lib/mysql/mysql.sock' (111)...
</SCREEN>

<PARA>
Denne fejl er mest sandsynlig, hvis du selv har kompileret MySQL. 
Den opstår, hvis PHP ikke finder
"mysql.sock" på den forventede placering. 
Først skal du sikre dig at MySQL kører. 
Er
det ikke tilfældet, så start programmet og se om fejlmeddelelsen forsvinder. 
Gør den ikke det,
eller har MySQL kørt hele tiden, kan du oprette en lille konfigurations-fil, 
der sikrer, at MySQL
placerer "mysql.sock", så PHP kan finde den. 
Samtidig guider filen klientprogrammer til den nye
placering. 
Åbn din favorit-editor og skriv følgende (har du allerede oprettet en "my.cnf"-fil,
tilføjer du blot disse linier under de relevante [overskrifter] i filen)
</PARA>

<SCREEN>
[mysqld]
socket=/sti/til/mysql.sock  (i eksemplet ovenfor ville det blive /var/lib/mysql/mysql.sock)

[client]
socket=/sti/til/mysql.sock
</SCREEN>

<PARA>
Gem filen som /etc/my.cnf
</PARA>

<PARA>
Herefter skal du oprette mappen til "mysql.sock", skifte ejerskab og genstarte MySQL
</PARA>

<SCREEN>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>mkdir /sti/til</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>chown mysql.mysql /sti/til</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>/etc/rc.d/init.d/mysql.server stop</USERINPUT>
<PROMPT>[root@linus /root]# </PROMPT><USERINPUT>/etc/rc.d/init.d/mysql.server start &amp;</USERINPUT>
</SCREEN>

<PARA>
Og så skulle du være kørende igen.
</PARA>

<PARA>
Du kan læse meget mere om PHP på www.php.net, og du kan finde 
tutorials og scripts på
<ULINK URL="http://www.devshed.com">www.devshed.com</ULINK>, 
<ULINK URL="http://www.hotwired.com">www.hotwired.com</ULINK>
og mange, mange andre steder på nettet.
</PARA>

</SECT2><!-- db-mysql-php -->
<!-- andre sprog skydes ind her -->
</SECT1><!-- db-mysql -->

</CHAPTER><!-- databaser -->

