<!-- $Id$ -->
<chapter id="databaser">
<!--
Databaser
	SQL
	PostgreSQL
		Kommandofortolkerprogrammer
		PHP
		Perl
		Python
  MySQL
    PHP
	(Andre databaser)

-->

<title>Databaser</title>
<indexterm><primary>Databaser</primary></indexterm>
<para>
Linux er på grund af sin stabilitet et godt valg som databaseserver.
Inden for databaser er
de facto standarden sproget SQL, hvor data kan tilgås fra tekst-,
grafisk-, og webbaserede løsninger samtidigt.
</para>

<para>
De to absolut mest brugte SQL-databaser på Linux er PostgreSQL og MySQL.
Begge databaser udgives under en fri licens og er af høj teknisk kvalitet.
For begge databaser gælder at du frit
kan vælge de programmeringssprog og omgivelser du kender fra Linux.
Perl, PHP, Python, C, Tcl/Tk, Java og foretrækker du shell-programmer, er
det også en mulighed.
</para>

<para>
PostgreSQL er med her fordi den er meget avanceret
og meget udbredt. PostgreSQL har SQL-funktionerne sub-select,
stored procedures, transactions og ikke mindst brugerdefinerede
objekter i databasen.
MySQL er lidt hurtigere end PostgreSQL i mange situationer
og er den mest udbredte af de to databaser.
</para>

<para>
De helt store kommercielle SQL-database producenter, Oracle, Sybase, 
Informix, IBM med DB2 og Inprise med InterBase er også kommet med en
Linux-version af deres SQL-databaser. Programmeringsmulighederne er de
samme, så det er nemt
at flytte sit program den ene eller den anden vej, eller have et
blandet miljø. Disse databaser på Linux anvendes i høj grad i
produktionsmiljø, og i særdeleshed i udviklingsmiljø.
</para>

<indexterm><primary>Tuning</primary><secondary>Linux som databaseserver</secondary></indexterm>
<indexterm><primary>Databaseserver</primary><secondary>Tuning af Linux</secondary></indexterm>
<para>
Anvender man Oracle og Linux sammen kan følgende artikler være meget interessante
<ulink url="http://www.linuxjournal.com/article/5840">http://www.linuxjournal.com/article/5840</ulink> og
<ulink url="http://www.linuxjournal.com/article/5841">http://www.linuxjournal.com/article/5841</ulink>,
idet de beskriver tuning af Linux
så ydelsen nogle gange kan komme voldsomt i vejret.
</para>

<indexterm><primary>Access database</primary><secondary>Konvertering til MySQL</secondary></indexterm>
<indexterm><primary>Microsoft Access database</primary><secondary>Konvertering til MySQL</secondary></indexterm>

<para>
Anvender du Microsoft Access databaser og overvejer at flytte dem til
Linux, så er følgende artikel af interesse.
<ulink url="http://www.nusphere.com/products/access2mysql.pdf">http://www.nusphere.com/products/access2mysql.pdf</ulink>.
 </para>


<sect1 id="db-sql">
<title>SQL</title> <indexterm><primary>SQL</primary></indexterm>
<indexterm><primary>Databaser</primary><secondary>SQL</secondary></indexterm>

<para>
<acronym>SQL</acronym> er en forkortelse for Structured Query Language og er et generelt
sprog til at tilgå data i en SQL-database.  De basale kommandoer i SQL
er nemme at lære, så man kommer hurtigt igang med sin opgave.  Har man
kun een tabel at arbejde med, er SQL lige så nemt at bruge som andre
konventionelle databaser, men når man ønsker at hente data fra flere tabeller
samtidigt, så er der rigtigt mange fordele ved SQL.  Har du prøvet at
arbejde med <acronym>ASCII</acronym> filer der opdateres af flere personer
samtidigt, så kender du til problemer som SQL-databaser løser for dig.
</para>

<para>
Et nemt forståeligt eksempel med to tabeller, eller 'relationelle
tabeller' som det retteligt hedder, er en tabel med firmaer og en
tabel med postnumre.  For at sikre os at alle bynavne er stavet på
samme måde, er postnummer og bynavn i en tabel for sig.  I tabellen
med firmaer er til gengæld kun angivet postnummeret og ikke bynavnet.
</para>

<para>
Skematisk kunne tabellerne se således ud
</para>

<table id="db-firma">
<title>Firma-tabel</title>
<tgroup cols="3" align="char">
<thead><row>
 <entry>FirmaNavn</entry>
 <entry>Vej</entry>
 <entry>PostNr</entry>
</row></thead>
<tbody>
<row>
 <entry>Vagabondos</entry>
 <entry>Tagensvej 100</entry>
 <entry>2200</entry>
</row>
<row>
 <entry>DKUUG</entry>
 <entry>Fruebjergvej 3</entry>
 <entry>2100</entry>
</row>
<row>
 <entry>Niels Bohr Institutet</entry>
 <entry>Blegdamsvej 17-21</entry>
 <entry>2100</entry>
</row>
</tbody>
</tgroup>
</table>

<table id="db-postnumre">
<title>Postnumre-tabel</title>
<tgroup cols="2" align="char">
<thead><row>
 <entry>PostNr</entry>
 <entry>ByNavn</entry>
</row></thead>
<tbody>
<row>
 <entry>2100</entry>
 <entry>København &Oslash;</entry>
</row>
<row>
 <entry>2200</entry>
 <entry>København N</entry>
</row>
</tbody>
</tgroup>
</table>

<para>
Opgaven er nu at få en liste af alle firmaer med fuld adresse.
Der er en relation i mellem de to tabeller ved feltet
<database>PostNr</database> og SQL-kommandoen er så:
<command>SELECT FirmaNavn, Vej, Firma.PostNr, Bynavn FROM Firma, Postnumre WHERE Firma.postnr=Postnumre.PostNr</command>
Resultatet af ovenstående ser således ud:
</para>

<table id="db-resultat">
<title>Søgeresultat: Firma+Postnumre</title>
<tgroup cols="4" align="char">
<thead><row>
 <entry>FirmaNavn</entry>
 <entry>Vej</entry>
 <entry>PostNr</entry>
 <entry>ByNavn</entry>
</row></thead>
<tbody>
<row>
 <entry>Vagabondos</entry> 
 <entry>Tagensvej 100</entry>
 <entry>2200</entry> 
 <entry>København N</entry>
</row>
<row>
 <entry>DKUUG</entry> 
 <entry>Fruebjergvej 3</entry>
 <entry>2100</entry> 
 <entry>København &Oslash;</entry>
</row>
<row>
 <entry>Niels Bohr Institutet</entry> 
 <entry>Blegdamsvej 17-21</entry>
 <entry>2100</entry> 
 <entry>København &Oslash;</entry>
</row>
</tbody>
</tgroup>
</table>

<para>
Det der skete med SQL-kommandoen, var at der blev udført en 'join'
imellem de to tabeller, således at postnumrene blev parret fra hver
tabel.
</para>

<para>
Dette eksempel er selvfølgelig nemt at lave med
<acronym>ASCII</acronym> tekst-filer,
men prøv at forestil dig at der var tre eller flere tabeller.
</para>

<para>
Det vil være for vidt at komme ind på alle de SQL-kommandoer man kan
lave i denne bog, da der findes mange gode bøger om emnet på dansk, og
ikke mindst på engelsk. Er bøger uden for rækkevidde, er der god hjælp
at hente på nettet.  Se MySQL og PostgreSQL's hjælpesider.
</para>

<para>
Læsning af data er nok den mest brugte SQL-kommando, så den bliver
lige beskrevet i korte træk.  I sin simpleste form kan man skrive
<command>SELECT * FROM Firma</command>, der giver alle felter fra
tabellen 'Firma' i tilfældig rækkefølge.  Er det kun 'FirmaNavn' og
'PostNr' man ønsker udskrevet, skrives <command>SELECT
FirmaNavn,PostNr FROM Firma</command>.  Data kommer i tilfældig
rækkefølge, så der må lige sortering på <command>SELECT
FirmaNavn,PostNr FROM Firma ORDER BY PostNr</command>.
</para>

<para>
Senere i bogen er nogle eksempler på hvordan man praktisk bruger SQL
til noget der har med rigtige brugere at gøre.  Til disse eksempler
anvendes følgende liste af SQL-kommandoer som basis, og listen giver
samtidigt de mest brugte SQL-kommandoer.  Kommandoerne gør følgende:
</para>

<itemizedlist mark="bullet" spacing="compact">
<listitem><para>Opretter en tabel med to felter</para></listitem>
<listitem><para>Tilføjer en post til tabellen</para></listitem>
<listitem><para>Retter en post i tabellen</para></listitem>
<listitem><para>Udskriver alle poster</para></listitem>
<listitem><para>Sletter en post</para></listitem>
<listitem><para>Sletter tabellen</para></listitem>
</itemizedlist>

<programlisting>
CREATE TABLE linuxbog(kapitel INT, titel VARCHAR(40));
INSERT INTO linuxbog(kapitel, titel) VALUES(0, 'Indledning');
UPDATE linuxbog SET kapitel=1 WHERE kapitel=0;
SELECT * FROM linuxbog ORDER BY kapitel;
DELETE FROM linuxbog WHERE kapitel=1;
DROP TABLE linuxbog;
</programlisting>

<para>
De viste SQL-kommandoer er helt basale og virker med alle SQL-databaser.
</para>

<para>
Læs mere om SQL-kommandoer på
<ulink url="http://www.thomasheinen.de/courses/sql/A_SQL_Primer.htm">http://www.thomasheinen.de/courses/sql/A_SQL_Primer.htm</ulink>,
<ulink url="http://www.sqlcourse.com/">http://www.sqlcourse.com/</ulink>
og
<ulink url="http://riki-lb1.vet.ohio-state.edu/mqlin/computec/tutorials/SQLTutorial.htm">http://riki-lb1.vet.ohio-state.edu/mqlin/computec/tutorials/SQLTutorial.htm</ulink>.
</para>

</sect1><!-- db-sql -->

<sect1 id="db-pgsql">
<title>PostgreSQL</title>
<indexterm><primary>PostgreSQL</primary></indexterm>
<indexterm><primary>Databaser</primary><secondary>PostgreSQL</secondary></indexterm>
<indexterm><primary>SQL</primary><secondary>PostgreSQL</secondary></indexterm>

<para>
PostgreSQL er den mest avancerede frie SQL-database der findes
til Linux.  PostgreSQL startede som et studieprojekt, og har udviklet
sig til fuldt professionel database med alle de avancerede teknologier
som kræves idag: views, triggers, stored-procedures, transactions
sub-select etc.
</para>

<para>
Installation af PostgreSQL fra en RPM-fil er den nemmeste måde at installere på.
Efter installationen startes PostgreSQL.
</para>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh postgresql-7.*.rpm</userinput>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh postgresql-server*.rpm</userinput>
<prompt>[root@hven /root]# </prompt><userinput>/etc/rc.d/init.d/postgresql start</userinput> 
</screen>

<para>
En nem måde at bruge PostgreSQL fra en webserver er ved at
oprette en bruger med navnet <filename>nobody</filename>.
Apache starter webserverne som brugeren <filename>nobody</filename>
og så behøver
man ikke angive adgangskoder i sine webprogrammer, idet PostgreSQL
ser at man er <filename>nobody</filename> når man åbner en database.
</para>

<para>
Før <filename>nobody</filename> kan få adgang skal <filename>nobody</filename>
oprettes som PostgreSQL bruger.
Login som brugeren <filename>postgres</filename> og opret brugeren
<filename>nobody</filename>.
Kender du ikke <filename>postgres</filename> passwordet, kan det gøres således:
</para>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>su - postgres</userinput>
<prompt>[postgres@hven /pgsql]$ </prompt><userinput>createuser nobody</userinput>
</screen>

<para>
<filename>nobody</filename> skal også have en database.
Login som <filename>nobody</filename>.
Ved ikke at angive databasenavnet <database>nobody</database> er det
default navn når <command>createdb</command> køres.
Kender du ikke <filename>nobody</filename> passwordet, kan det gøres således:
</para>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>su - nobody</userinput>
<prompt>[nobody@hven /]$ </prompt><userinput>createdb</userinput>
</screen>

<para>
Databasen kan nu anvendes med de ganske få kommandoer SQL har.  Der er
få forskelle i de forskellige SQL-databaser der findes, men du lærer
hurtigt de få forskelle der er, hvis du skifter over til en anden
database.  Her er brugt SQL-kommandoer som virker med alle de
SQL-databaser som du vil komme i nærheden af.  Følgende liste af
kommandoer opretter en tabel, indsætter en post, retter den samme post,
udlæser indholdet af tabellen, sletter en post og sletter tabellen.
</para>

<programlisting>
-- fil: create.sql
-- PostgreSQL/LinuxBog
-- Kør dette program:
--  psql nobody &lt; create.sql
CREATE TABLE linuxbog(kapitel INT, titel VARCHAR(40));
INSERT INTO linuxbog(kapitel, titel) VALUES(0, 'Indledning');
UPDATE linuxbog SET kapitel=1 WHERE kapitel=0;
SELECT * FROM linuxbog ORDER BY kapitel;
DELETE FROM linuxbog WHERE kapitel=1;
DROP TABLE linuxbog;
</programlisting>

<para>
SQL-kommandoerne kan nemt indlæses fra en fil med kommandoen
</para>

<screen>
<prompt>[nobody@hven /]$ </prompt><userinput>psql nobody &lt; create.sql</userinput>
</screen>

<para>
Hvis du lige undlader at slette posterne (DELETE) og tabellen (DROP),
kan eksemplet bruges sammen med de efterfølgende programmer i Shell, PHP,
Perl og Python.  Bemærk at hver linje er afsluttet med semi-kolon ';'.
Semi-kolon bruges kun med programmet <filename>psql</filename> og ikke
i andre fortolkede eller oversatte sprog.
</para>

<para>
 Den interaktive SQL-fortolker, <command>psql</command>, kan anvendes til
 meget, men skal man have et rigtigt program, bør man bruge et mere generelt
 programmeringssprog end SQL og så snakke med databasen gennem et bibliotek.
 Linux har et bredt udvalg af sprog der kan kommunikere med de SQL-databaser
 der findes til Linux.  Næsten alle
sprog kan bruges sammen med alle databaserne.  Vi har her valgt at
bruge PostgreSQL som basis, og vise eksempler på hvordan man anvender
disse sammen med:
</para>

<itemizedlist mark="bullet" spacing="compact">
<listitem><para>Kommandofortolkerprogrammering <xref linkend="db-pgsql-shell"/></para></listitem>
<listitem><para><application><acronym>PHP</acronym></application> <xref linkend="db-pgsql-php"/></para></listitem>
<listitem><para><application><acronym>Perl</acronym></application> <xref linkend="db-pgsql-perl"/></para></listitem>
<listitem><para><application>Python</application> <xref linkend="db-pgsql-python"/></para></listitem>
</itemizedlist>

<para>
I <filename>/usr/doc/</filename> har du hele PostgreSQL-manualen,
typisk her:
<ulink url="file:/usr/share/doc/postgresql-7.4.2/html/">file:/usr/share/doc/postgresql-7.4.2/html/</ulink>.
Har du en anden version af PostgreSQL, så start her 
<ulink url="file:/usr/share/doc/">file:/usr/share/doc/</ulink>
eller
<ulink url="file:/usr/doc/">file:/usr/doc/</ulink>. Du kan også
bruge kommandoen <command> locate app-postgres.html </command>
til at lokalisere stedet, hvor html-manualen er installeret.
Desuden ligger manualen også på nettet 
<ulink url="http://www.postgresql.org/docs/7.4/static/index.html">http://www.postgresql.org/docs/7.4/static/index.html</ulink>.

</para>

<para>
PostgreSQL har sin hjemmeside på
<ulink url="http://www.postgresql.org/">http://www.postgresql.org/</ulink>.
</para>

<para>
PostgreSQL-HOWTO giver et godt overblik
<ulink url="http://www.linuxdoc.org/HOWTO/PostgreSQL-HOWTO.html">http://www.linuxdoc.org/HOWTO/PostgreSQL-HOWTO.html</ulink>.
</para>

<sect2 id="db-pgsql-shell">
<title>Kommandofortolkerprogrammering + PostgreSQL</title>
<indexterm>
 <primary>Kommandofortolkerprogrammering</primary>
 <secondary>PostgreSQL</secondary>
</indexterm>
<indexterm>
 <primary>CGI</primary>
 <secondary>PostgreSQL</secondary>
</indexterm>
<indexterm> 
 <primary>PostgreSQL</primary>
 <secondary>Kommandofortolkerprogrammering</secondary>
</indexterm>
<indexterm> 
 <primary>Apache</primary>
 <secondary>CGI-programmer</secondary>
</indexterm>

<para>
Kommandofortolkerprogrammer er ikke det mest avancerede, man kan lave, men er
alligevel særdeles anvendeligt til at man hurtigt kan
få lavet lidt database-tilgang alligevel.
For at køre de følgende eksempler, kræves kun at PostgreSQL er installeret.
<command>psql</command> har en option så man kan skrive
<acronym>SQL</acronym>-kommandoer som parameter direkte fra kommandolinjen.
</para>

<screen>
<prompt>[nobody@hven /]# </prompt><userinput>psql nobody -c "SELECT * FROM linuxbog"</userinput>
</screen>

<para>
En anden option giver output som HTML.
Har du Apache installeret kan der nu laves et simpelt udtræk til web, ved at
lægge et lille kommandofortolkerprogram i <filename>cgi-bin</filename>.
Apache kan have dette sub-dir forskellige steder, så den nemmeste måde at
finde det er med kommandoen <command>locate cgi-bin</command>.
Placér programmet <filename>pgsql.sh</filename> i <filename>cgi-bin</filename>
og gør det kørbart med kommandoen <command>chmod +x pgsql.sh</command>.
</para>

<programlisting>
#!/bin/sh
echo Content-type: text/html
echo
echo "&lt;HTML&gt;&lt;TITLE&gt;PostgreSQL CGI&lt;/TITLE&gt;"
echo "&lt;H1&gt;PostgreSQL CGI&lt;/H1&gt;"
psql nobody -H -c "SELECT * FROM linuxbog"
echo "&lt;/HTML&gt;"
</programlisting>

<para>
CGI-programmet kan nu startes fra din browser med URL'en
<ulink url="http://localhost/cgi-bin/pgsql.sh">http://localhost/cgi-bin/pgsql.sh</ulink>.
Til test kan programmet også køres fra kommandolinjen:
<command>./pgsql.sh</command> hvorved output kommer ud på skærmen.
</para>

<para>
Ovenstående SQL-kommando er nok ikke lige det du vil,
men nok mere noget i retning af:
</para>

<programlisting>
psql nobody -H -T "cellspacing='0'" -c "SELECT kapitel AS \"Bog kapitel\", titel FROM linuxbog ORDER BY kapitel DESC LIMIT 10 OFFSET 0"
</programlisting>

<para>
I ovenstående kommer der en pænere ramme uden om med option 
<option>-T "cellspacing='0'"</option>.
Så er hver kolonne angivet, f.eks. <option>kapitel</option>.
Typisk har hver kolonne et forkortet navn, hvilket ikke ser godt ud i en tabel.
Ved at skrive <option>AS \"Bog kapitel\"</option> får kolonnen et andet navn.
<option>ORDER BY kapitel DESC</option> sortere på 'kapitel' og DESC gør det i modsat orden.
<option>LIMIT 10</option> gør at der kun kommer 10 rækker,
og <option>OFFSET 0</option> fortæller at der skal startes med række 0.
</para>

<para>
Kommandofortolkerprogrammer er gode til små simple test, men man skal nok holde sig
fra at lave større programmer.  Muligheden er der, og det virker!  I
de næste afsnit vises det samme eksempel i PHP, Perl og Python, som er
bedre til at håndtere de større programmer.
</para>
</sect2><!-- db-pgsql-shell -->

<sect2 id="db-pgsql-php">
<title>PHP + PostgreSQL</title>
<indexterm><primary>PHP</primary><secondary>PostgreSQL</secondary></indexterm>
<indexterm><primary>modPHP</primary></indexterm>
<indexterm><primary>PostgreSQL</primary><secondary>PHP</secondary></indexterm>

<para>
PHP er rigtigt godt sprog til fremstilling af webprogramme.
Har du lidt erfaring med programmering i andre sprog, kommer du hurtigt igang med PHP og PostgreSQL.
</para>

<para>
<application>PHP</application> med <application>PostgreSQL</application> interface installeres nemmest fra RPM-filer.
Mandrake 7.0 har modulerne færdigpakket, som kan hentes på
<ulink url="http://rpmfind.net/linux/RPM/mandrake/7.0/Mandrake/RPMS/System_Environment_Daemons.html">http://rpmfind.net/linux/RPM/mandrake/7.0/Mandrake/RPMS/System_Environment_Daemons.html</ulink>.
PHP i en nyere version kan oftest findes hos Troels Arvin
<ulink url="http://www.fsr.ku.dk/people/troels/rpms/php/">http://www.fsr.ku.dk/people/troels/rpms/php/</ulink>.
<application>PostgreSQL</application> har du installeret, så du skal kun hente følgende:
</para>

<itemizedlist mark="bullet" spacing="compact">
<listitem><para>apache-1.3.9-17mdk.rpm 2.6MB</para></listitem>
<listitem><para>mod_php3-3.0.13-6mdk.rpm 850KB</para></listitem>
<listitem><para>mod_php3-pgsql-3.0.13-6mdk.rpm 30KB</para></listitem>
</itemizedlist>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh apache-1.3.9-17mdk.i586.rpm</userinput>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh mod_php3-3.0.13-6mdk.i586.rpm</userinput>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh mod_php3-pgsql-3.0.13-6mdk.i586.rpm</userinput>
</screen>

<para>
Hvis ikke <application>Apache</application> er startet nu, så gør det.
</para>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>/etc/rc.d/init.d/httpd start</userinput>
</screen>

<para>
Eksemplet <filename>pgsql.php3</filename> bruger den tabel der blev beskrevet i <xref linkend="db-sql"/> om SQL.
</para>

<programlisting>
&lt;html&gt;&lt;head&gt;&lt;TITLE&gt;LinuxBog PostgreSQL PHP&lt;/TITLE&gt;&lt;/head&gt;
&lt;?  // Her skiftes der fra HTML til PHP-kode med tegnet '&lt;?'
  // &Aring;ben en forbindelse til PostgreSQL
  // Ved ikke at angive brugernavn, er det 'nobody' der er brugeren
  $conn = pg_connect("");
  // Udfør en læsning fra tabellen 'linuxbog'
  $res = pg_exec($conn, "SELECT * FROM linuxbog ORDER BY kapitel");
  // For alle poster (linjer), udskriv indholdet
  for ($n = 0; $n &lt; pg_numrows($res); $n++ ) {
    $post = pg_fetch_array($res, $n);
    print( $post["kapitel"]." ".$post["titel"]."&lt;br&gt;\n" );
  }
  // Frigiv hukommelse
  pg_freeresult($res);
  // Luk forbindelsen
  pg_close($conn);
?&gt;&lt;/html&gt;
</programlisting>

<para>
Resultatet af ovenstående ser således ud i en browser
</para>

<programlisting>
1 Indledning
</programlisting>

<para>
PHP er frit programmel og kan hentes på
<ulink url="http://dk.php.net/">http://dk.php.net/</ulink>.
</para>
</sect2><!-- db-pgsql-php -->

<sect2 id="db-pgsql-perl">
<title>Perl + PostgreSQL</title>
<indexterm><primary>Perl</primary><secondary>PostgreSQL</secondary></indexterm>
<indexterm><primary>PostgreSQL</primary><secondary>Perl</secondary></indexterm>
<para>
Perl er effektivt programmeringssprog til mange ting.  Perl anvendtes
i starten ofte til behandling af tekstfiler, men efter de mange
år Perl har været fremme, kan man arbejde direkte med databaser.  Om
det drejer sig om et kommandolinje-program eller et webprogram,
så kan Perl klare den opgave.  
</para>

<para>
Ved en normal Linux-installation får du automatisk installeret Perl.
Der findes mange moduler til Perl, så du får ikke dem alle installeret.
For at bruge PostgreSQL fra Perl, kræves at du installere <acronym>DBI</acronym> og <acronym>DBD-Pg</acronym>.
Det forudsættes at PostgreSQL er installeret.
Modulerne kan hentes fra 
<ulink url="http://sunsite.dk/CPAN/modules/by-category/07_Database_Interfaces">http://sunsite.dk/CPAN/modules/by-category/07_Database_Interfaces</ulink>. Dernæst finder du de to pakker her:
<indexterm><primary>Perl</primary><secondary>DBI</secondary></indexterm>
<itemizedlist mark="bullet" spacing="compact">
<listitem><para>/DBI/DBI-1.13.tar.gz 160KB</para></listitem>
<listitem><para>/DBD/DBD-Pg-0.93.tar.gz 40KB</para></listitem>
</itemizedlist>

Installationen er meget nem og står beskrevet i begge pakker, men lad
os lige tage den med her for en sikkerheds skyld.
</para>
<screen>
<prompt>[root@hven /root]# </prompt><userinput>tar xzvf DBI-1.13.tar.gz</userinput>
<prompt>[root@hven /root]# </prompt><userinput>cd DBI-1.13</userinput>
<prompt>[root@hven DBI-1.13]# </prompt><userinput>perl Makefile.PL</userinput>
<prompt>[root@hven DBI-1.13]# </prompt><userinput>make</userinput>
<prompt>[root@hven DBI-1.13]# </prompt><userinput>make test</userinput>
<prompt>[root@hven DBI-1.13]# </prompt><userinput>make install</userinput>
</screen>

<para>
Fremgangsmåden er næsten den samme for DBD-Pg-0.93.tar.gz.
</para>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>tar xzvf DBD-Pg-0.93.tar.gz</userinput>
<prompt>[root@hven /root]# </prompt><userinput>cd DBD-Pg-0.93</userinput>
<prompt>[root@hven DBD-Pg-0.93]# </prompt><userinput>export POSTGRES_include=/usr/include/pgsql</userinput>
<prompt>[root@hven DBD-Pg-0.93]# </prompt><userinput>export POSTGRES_lib=/usr/lib/pgsql</userinput>
<prompt>[root@hven DBD-Pg-0.93]# </prompt><userinput>perl Makefile.PL</userinput>
<prompt>[root@hven DBD-Pg-0.93]# </prompt><userinput>make</userinput>
<prompt>[root@hven DBD-Pg-0.93]# </prompt><userinput>make test</userinput>
<prompt>[root@hven DBD-Pg-0.93]# </prompt><userinput>make install</userinput>
</screen>

<para>
Her er et lille eksempel i Perl der læser fra PostgreSQL.  Eksemplet
bruger den tabel der blev oprettet i 
<xref linkend="db-pgsql"/> om PostgreSQL.
Tabellen <database>linuxbog</database> åbnes og alle poster udskrives.
</para>

<programlisting>
#!/usr/bin/perl
# Inkluder DBI-modulet
use DBI;
# &Aring;ben en DatabaseHandle til PostgreSQL
$dbh = DBI-&gt;connect("DBI:Pg:dbname=nobody");
# Forbered en SQL-kommando for læsning af een tabel
$sth = $dbh-&gt;prepare("SELECT * FROM linuxbog ORDER BY kapitel");
# Udfør SQL-kommandoen
$sth-&gt;execute;
# For alle poster (linjer), udskriv indholdet
while (($kapitel,$titel) = $sth-&gt;fetchrow) {
  print "$kapitel $titel\n";
}
# Nedlæg StatementHandle
$sth-&gt;finish;
# Luk forbindelsen til PostgreSQL
$dbh-&gt;disconnect;
</programlisting>

<para>
DBI og DBD har mange flere kommandoer som kan findes i online-manualen
</para>
<screen>
<prompt>[tyge@hven tyge]$ </prompt><userinput>perldoc DBI</userinput>
<prompt>[tyge@hven tyge]$ </prompt><userinput>perldoc DBI::FAQ</userinput>
<prompt>[tyge@hven tyge]$ </prompt><userinput>perldoc DBD::Pg</userinput>
</screen>

<para>
Perl har hjemmesiden
<ulink url="http://www.perl.com/">http://www.perl.com/</ulink>
og
<ulink url="http://www.perl.org/">http://www.perl.org/</ulink>
</para>

</sect2><!-- db-pgsql-perl -->

<sect2 id="db-pgsql-python">
<title>Python + PostgreSQL</title>
<indexterm><primary>Python</primary><secondary>PostgreSQL</secondary></indexterm>
<indexterm><primary>PostgreSQL</primary><secondary>Python</secondary></indexterm>

<para>
Python er et af de nyere fortolkede sprog der vinder kraftigt frem.
Dette afsnit vil kun berøre Python's forbindelse til PostgreSQL.  Du
kan læse mere om Python i bogen <emphasis>"Linux - friheden til at
programmere"</emphasis>.
</para>

<para>
For at bruge Python sammen med PostgreSQL skal du først have
installeret selve Python, og dernæst et PostgreSQL-modul til Python.
Python kommer med de fleste distributioner og måske allerede
installeret på din maskine. PostgreSQL-modulet findes sammen med
PostgreSQL, f.eks. her: <ulink
url="ftp://ftp.sunsite.dk/disk1/www.postgresql.org/pub/binary/v7.0/redhat-RPM/RPMS/redhat-6.x/">ftp://ftp.sunsite.dk/disk1/www.postgresql.org/pub/binary/v7.0/redhat-RPM/RPMS/redhat-6.x/</ulink>.
Installationen er følgende:
</para>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh python-1.5.1*.rpm</userinput>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh postgresql-python-7*.rpm</userinput>
</screen>

<para>
Her er et lille eksempel i Python der læser fra PostgreSQL.  Eksemplet
bruger den tabel der blev oprettet i
<xref linkend="db-pgsql"/> om PostgreSQL.
Tabellen <database>linuxbog</database> åbnes og alle poster udskrives.
</para>

<programlisting>
#!/usr/bin/python
# Inkluder fra postgresql (pg) modulet
from pg import DB
# &Aring;bne en forbindelse til databasen "nobody"
dbc = DB("nobody")
# Udfør SQL kommando
dbqo = dbc.query("SELECT * FROM linuxbog ORDER BY kapitel")
# For alle poster (linjer), udskriv kapitel og titel
for data in dbqo.dictresult():
    print str(data["kapitel"]) + " : " + data["titel"]
# Luk forbindelsen til databasen
dbc.close()
</programlisting>

<para>
Gem filen som <filename>pgsql.py</filename> og gør den kørbar
med kommandoen <command>chmod +x pgsql.py</command>.
Og prøv så programmet.
</para>

<screen>
<prompt>[tyge@hven tyge]$ </prompt><userinput>./pgsql.py</userinput>
</screen>

<para>
Læs mere om Python <!--i XREF linkend="python-sect1" og på--> hjemmesiden
<ulink url="http://www.python.org/">http://www.python.org/</ulink>.
</para>

</sect2><!-- db-pgsql-python -->
</sect1><!-- db-pgsql -->

<sect1 id="db-mysql">
<title>MySQL</title>
<indexterm><primary>MySQL</primary></indexterm>
<indexterm><primary>Databaser</primary><secondary>MySQL</secondary></indexterm>
<indexterm><primary>SQL</primary><secondary>MySQL</secondary></indexterm>

<!-- af Frank M.G. Jørgensen <gajda@iname.com> -->

<para>
MySQL er et stærkt SQL-database program, som folkene bag ikke tøver
med at udråbe som "en af de hurtigste databaser, overhovedet"
</para>

<para>
Siden MySQL i sommeren 2000 ændrede sine licensbetingelser, sådan at alle
fremtidige versioner af MySQL bliver udgivet under GPL-licensen,
er MySQL efterhånden blevet et fast indslag i alle de store Linux-distributioner.
</para>

<!-- RPM-INSTALLATION -->
<para>
Hos MySQL anbefaler man dog, at Mandrake-(8.x) og RedHat(7.x)-brugere installerer
MySQL ved hjælp af rpm-pakker hentet fra MySQL's websted, da distributions-pakkerne
er kompileret med en version af gcc, der er kendt for at være problematisk
i forhold til MySQL. Det kan derfor have ført til fejlbehæftede rpm-pakker, og
det sikreste er derfor at hente pakkerne hos MySQL.
</para>

<para> 
Hvis formålet med øvelsen er at "prøvekøre" en MySQL-installation, kan der dog næppe
ske noget ved at installere pakkerne fra distributions-cd-rommen..
Hvis du vælger, at installere fra cd-rom'en - og har plads nok - så installér blot alle
MySQL-pakkerne, så skulle du være kørende.
</para>

<para>
Hvis du vælger at hente de anbefalede pakker fra nettet, kan de hentes på adressen:
<ulink url="http://www.mysql.com">www.mysql.com</ulink>,
eller fra sunsite.dk's danske spejling, <ulink
url="http://sunsite.dk/mysql/">sunsite.dk/mysql/</ulink> De
nyeste versioner af MySQL er udviklingsversionerne, og bør derfor
undgås. Den version, der er benævnt "stable release", eller "recommended"
(i skrivende stund version 3.23.49) er den du ønsker at hente.
</para>


<para>
For at opnå en brugbar installation skal du som minimum hente og installere følgende pakker:
</para>

<itemizedlist mark="bullet" spacing="compact">
<listitem><para>MySQL-X.XX.XX.i386.rpm</para></listitem>
<listitem><para>MySQL-client-X.XX.XX.i386.rpm</para></listitem>
</itemizedlist>

<para>
Når du nu er i gang, så vil følgende pakker sikkert gøre livet nemmere på lang sigt
(de er for eksempel krævede i forbindelse med installationen af PHP med MySQL-understøttlse - læs herom senere)
</para>

<itemizedlist mark="bullet" spacing="compact">
<listitem><para>MySQL-devel-X.XX.XX.i386.rpm</para></listitem>
<listitem><para>MySQL-shared-X.XX.XX.i386.rpm</para></listitem>
</itemizedlist>


<para>
Pakkerne installeres på følgende måde
</para>

<screen>
<prompt>[root@hven /downloads]# </prompt><userinput>rpm -ivh MySQL-X.XX.XX.i386.rpm</userinput>
<prompt>[root@hven /downloads]# </prompt><userinput>rpm -ivh MySQL-client-X.XX.XX.i386.rpm</userinput>
<prompt>[root@hven /downloads]# </prompt><userinput>rpm -ivh MySQL-devel-x.XX.XX.i386.rpm</userinput>
<prompt>[root@hven /downloads]# </prompt><userinput>rpm -ivh MySQL-shared-X.XX.XX.i386.rpm</userinput>
</screen>

<para>
Hvor X.XX.XX erstattes med versionsnummeret.
</para>

<para>
Nu er MySQL installeret, og der er blevet skabt de relevante opstartsfiler således, at MySQL
startes automatisk under opstart af maskinen. For at tjekke om programmet allerede kører, kan du
prøve at indtaste
</para>

<programlisting>
[root@hven /root]# mysqladmin version
</programlisting>

<para>
Hvis du får vist versionsnummer, uptime mm., kører MySQL allerede. Hvis MySQL ikke kører, kan du
starte den med:
</para>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>/etc/rc.d/init.d/mysql start &amp;</userinput>
</screen>

<para>
Nu er du parat til at gå i gang. Der er allerede under installationen
 oprettet en bruger, "root"
(denne "root" har ikke noget med maskinens "root" at
 gøre - der er tale om MySQL's "superbruger")
som har adgang til at foretage ændringer i databaserne.
Denne bruger skal nu have et password:
</para>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>mysqladmin -u root password 'hemmeligt'</userinput>
</screen>

<para>
Lad os nu prøve at oprette en database, som vi kalder "bog". Først starter vi klientprogrammet:
</para>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>mysql -u root --password=hemmeligt</userinput>
</screen>

<para>
Nu er vi i forbindelse med MySQL og prompten skifter til en MySQL-prompt.
</para>

<para>
Her følger så lidt (My)SQL-gymnastik. Først skal vi oprette en database
</para>

<screen>
<prompt>mysql&gt; </prompt><userinput>CREATE DATABASE bog;</userinput>
</screen>

<para>
Dernæst vælger vi den nye base
</para>

<screen>
<prompt>mysql&gt; </prompt><userinput>USE bog</userinput>
</screen>

<para>
Hvorpå vi opretter en simpel tabel i basen
</para>

<screen>
<prompt>mysql&gt; </prompt><userinput>CREATE TABLE linuxbog(kapitel INT, titel varchar(40));</userinput>
</screen>

<para>
En database uden indhold er der ikke meget sjov ved,
så vi fylder lidt data på tabellen
</para>

<screen>
<prompt>mysql&gt; </prompt><userinput>INSERT INTO linuxbog (kapitel,titel) VALUES (0,'Forord');</userinput>
<prompt>mysql&gt; </prompt><userinput>INSERT INTO linuxbog (kapitel,titel) VALUES (2,'Introduktion');</userinput>
</screen>

<para>
Der er ikke noget "kapitel 0", så vi retter vores indtastning til "kapitel 1"
</para>

<screen>
<prompt>mysql&gt; </prompt><userinput>UPDATE linuxbog SET kapitel=1 WHERE kapitel=0;</userinput>
</screen>

<para>
Nu vil vi gerne se, hvilke data, der rent faktisk er i vores tabel
</para>

<screen>
<prompt>mysql&gt; </prompt><userinput>SELECT * FROM linuxbog ORDER BY kapitel;</userinput>
</screen>

<para>
Og så sletter vi kapitel 1 (hvis du undlader at udføre de to sidste
trin, kan databasen bruges
sammen med PHP-eksemplet i <xref linkend="db-mysql-php"/>.
</para>

<screen>
<prompt>mysql&gt; </prompt><userinput>DELETE FROM linuxbog WHERE kapitel=1;</userinput>
</screen>

<para>
Og her sletter vi tabellen
</para>

<screen>
<prompt>mysql&gt; </prompt><userinput>DROP TABLE linuxbog;</userinput>
</screen>

<para>
Hvis du synes, at kommandolinje-klienten er lidt tung at danse med, så er du ikke den eneste.
Heldigvis findes der flere alternativer. På MySQL's websted kan du
under »download«-sektionen finde en lang liste over "contributed
software", og på <ulink url="http://freshmeat.net">freshmeat.net</ulink>
kan du ligeledes finde mange forskellige grafiske klientprogrammer. Et 
program, der ser meget lovende ud er MySQL's eget MyCC, som i 
skrivende stund kan hentes i en alpha-test-udgave fra MySQL's 
»download«-sektion. Har du mod på at installere apache webserveren og PHP (se nedenfor) kan du
hente det glimrende webbaserede program, phpMyAdmin, som gør
livet ikke så lidt nemmere for den nye bruger (også for den
øvede - for den sags skyld). Pakken kan
hentes i forskellige komprimerede formater hos<ulink
url="http://www.phpwizard.net/projects/phpMyAdmin/">www.phpwizard.net/projects/phpMyAdmin/ </ulink>
</para>

<!-- YDERLIGERE OPLYSNING -->
<para>
MySQL er mere end blot et database program; det er en database-server.
Det betyder, at man - hvis man er oprettet som bruger og er blevet
tildelt de passende rettigheder - ved hjælp af et klient-program kan
koble sig på serveren via internet, lave opslag, intaste data, ændre
data etc.  Disse muligheder falder udenfor dette kapitels rammer, men
der findes et par tutorials på bl.a <ulink
url="http://www.devshed.com">http://www.devshed.com</ulink>, der er
værd at læse desangående.
</para>

<sect2 id="db-mysql-php">
<title>PHP + MySQL</title>
<indexterm><primary>PHP</primary><secondary>MySQL</secondary></indexterm>
<indexterm><primary>MySQL</primary><secondary>PHP</secondary></indexterm>

<para>
PHP er et fortolket sprog, der kan bruges til at skabe dynamiske
websider. En af de helt store fordele ved PHP er evnen til at
kommunikere med forskellige databaseprogrammer, og PHP "taler"
usædvanlig godt med MySQL.
</para>

<para>
Før du kan bruge PHP, skal din webserver understøtte sproget.
På et RedHat-system (7.x) opnås dette nemmest ved at installere
følgende rpm-pakker fra distributions-cd-rommen:
</para>

<itemizedlist mark="bullet" spacing="compact">
<listitem><para>apache-1.3.xx</para></listitem>
<listitem><para>php-4.0.x.i386.rpm</para></listitem>
<listitem><para>php-mysql-4.0.x.i386.rpm</para></listitem>
</itemizedlist>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh apache_1.3.XX.i386.rpm</userinput>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh php-4.0.x.i386.rpm</userinput>
<prompt>[root@hven /root]# </prompt><userinput>rpm -ivh php-mysql-4.0.x.i386.rpm</userinput>
</screen>

<para>
Start Apache med kommandoen
</para>

<screen>
<prompt>[root@hven /root]# </prompt><userinput>/etc/rc.d/init.d/httpd start</userinput>
</screen>

<para>
Nu kan det ske, at Apache fortæller, at den ikke kan "determine local host...". I så fald skal
du åbne /etc/httpd/conf/httpd.conf i din favorit-editor og finde frem til linjen
</para>

<programlisting>
#ServerName localhost
</programlisting>

<para>
Fjern #-symbolet, gem og start Apache igen.
</para>

<!-- PHP-EKSEMPEL -->
<para>
Her er et lille eksempel på, hvorledes Apache, PHP og MySQL kan arbejde
sammen om at hente data fra en
database i MySQL og præsentere dem på en webside.
Databasen der bruges, er basen "bog", som blev
oprettet i <xref linkend="db-mysql"/>.
</para>

<programlisting>
&lt;HTML&gt;
	&lt;HEAD&gt;
		&lt;TITLE&gt;LinuxBog MySQL PHP&lt;/TITLE&gt;	
	&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;?php  // Her skiftes der fra alm. HTML til PHP-kode

$conn = mysql_connect("localhost","root","hemmeligt");  // &Aring;ben en forbindelse til MySQL

$sql="SELECT * FROM linuxbog ORDER BY kapitel";  // Udfør en læsning fra tabellen linuxbog

$res = mysql_db_query("bog",$sql);

echo "&lt;TABLE border=1&gt;&lt;TR&gt;&lt;TD colspan=2 bgcolor=#CCCCCC&gt;";  //start en tabel
echo "&lt;CENTER&gt;Linuxbog&lt;/CENTER&gt;&lt;/TD&gt;&lt;/TR&gt;";

  for ($n = 0; $n < mysql_numrows($res); $n++ ) {  // For alle poster (linjer), udskriv indholdet
                                                                      // i en lille tabel
    $post = mysql_fetch_array($res);
    
    echo "&lt;TR&gt;&lt;TD&gt;$post[kapitel]&lt;/TD&gt;&lt;TD&gt; $post[titel]&lt;/TD&gt;&lt;/TR&gt;\n";
  }
  
echo "&lt;/TABLE>";  // afslut tabel

mysql_freeresult($res);  // Frigiv hukommelse

mysql_close($conn);  // Luk forbindelsen

?&gt;  <!--- // Her skifter vi tilbage til HTML igen -->

&lt;/BODY&gt;&lt;/HTML&gt;

</programlisting>

<para>
Kopier eventuelt dette eksempel, og indsæt det i et tomt dokument, som du gemmer som "test.php" i
Apaches dokumentrod (/home/httpd/html/test.php). Kald filen igennem en webbrowser (http://localhost/test.php), 
og se hvad der sker.
</para>

<para>
Du kan læse meget mere om PHP på <ulink url="http://www.php.net">www.php.net</ulink>, og du kan
finde tutorials og programmer på
<ulink url="http://www.devshed.com">www.devshed.com</ulink>,
<ulink url="http://www.hotwired.com">www.hotwired.com</ulink>
og mange, mange andre steder på nettet.
</para>

</sect2><!-- db-mysql-php -->
<!-- andre sprog skydes ind her -->
</sect1><!-- db-mysql -->

</chapter><!-- databaser -->


