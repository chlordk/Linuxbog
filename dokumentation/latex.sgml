<chapter id="latex">
<title>LaTeX</title>

<indexterm>
<primary>
LaTeX
</primary>
</indexterm>

<para>
Dette afsnit er ment som en introduktion til LaTeX. Der kræves ingen
forudsætninger ud over at du skal kunne bruge en computer. LaTeX
minder i de grundlæggende <emphasis>principper</emphasis> om HTML
eller SGML (DocBook), så kender du lidt til dét, får du ingen
problemer (ellers kan det sagtens læres!).
</para>

<!--
<para>
Gennem eksempler og små øvelser kommer du igang med at bruge LaTeX og
bliver forhåbentligt hurtigt fortrolig med de grundlæggende elementer
i systemet. Har du ikke LaTeX på din computer, bliver det også
gennemgået hvordan du får det... det er <emphasis>gratis</emphasis>
;-)
</para>
-->

<para>
Målgruppen for dette kapitel er absolutte nybegyndere udi LaTeX, der
bare gerne vil igang. Alle kan være med og du behøver ikke være en ørn
til Linux for at kunne lave noget <emphasis>professionelt</emphasis> i
LaTeX. Faktisk har LaTeX som sådan slet ikke noget med Linux/Unix at
gøre, man kan også få LaTeX til Windows, MacOS, Amiga og andre
systemer, faktisk er LaTeX nok det mest portable format for formateret
tekst man kan finde!
</para>

<para>
Dette kapitel beskæftiger sig overhovedet ikke med det der ellers er
en af de største styrker ved LaTeX, nemlig mulighederne for at skrive
matematiske formler. &Aring;rsagen er ganske enkelt at det ville fordoble
omfanget af kapitlet, og det har der ganske enkelt ikke været tid
til. Derudover er det ikke det sværeste at lære når man først har
forstået de grundlæggende ting.
</para>

<para>
<emphasis>Rigtig god fornøjelse!</emphasis>
</para>

<sect1 id="latex-indledning">
<title>Indledning om LaTeX</title>

<para>
I (slet ikke så) gamle dage talte man om
bogtrykker<emphasis>kunsten</emphasis> og overlod fremstilling af
trykt materiale til dem (bogtrykkerne) der havde forstand på det. Efter
at computere er blevet udbredt forventer de fleste uden videre at
kunne producere professionelt udseende tekster.
</para>

<para>
Det er ikke så naivt som det kunne lyde, men det kræver enten at man
lærer en hel del om emnet, eller at man anvender et egnet
værktøj. Sådanne findes der kun ét af: LaTeX.
</para>

<para>
Udover at være det bedste værktøj til produktion af professionelt
udseende tekster, er LaTeX det eneste værktøj der er bare
nogenlunde velegnet til produktion af tekniske tekster, det er
det til gengæld også suverænt til.
</para>

<figure id="latex-logo" float="1">
<title>LaTeX-logoet</title>
<graphic fileref="latex2e.&magic;"  scale="60"></graphic>
</figure>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Navn, udtale og logo
</secondary>
</indexterm>
<para>
Enhver tekst om LaTeX skal indeholde et afsnit om navnet, og denne er
naturligvis ingen undtagelse. LaTeX er en udvidelse til TeX, og navnet
er følgelig afledt deraf, de sidste tre bogstaver er i virkeligheden
de tre store græske bogstaver Tau, Epsilon og Chi, og de skal derfor
udtales som sådan. Derfor udtales LaTeX [latæk]. Med mindre man har
mulighed for at gengive logoet præcist (se figur <xref
linkend="latex-logo"/>) bør man skrive LaTeX, med et lille a og et
lille e, som det er gjort her. Det siger sig selv at man har mulighed
for at producere det rigtige logo når man skriver i LaTeX, det gøres
med kommandoen <command>\LaTeX</command> (det var så din første
LaTeX-kommando).
</para>

<para>
Klassiske tekstbehandlingsprogrammer er bygget op, så det du har på
skærmen svarer til det du får ud på printeren. Disse programmer
kaldes tit "What You See Is What You Get"-programmer (WYSIWYG). Dette kan
<emphasis>både</emphasis> være en fordel, og en ulempe. Fordelen er
klar, hvis man ikke er så tryg ved at bruge en computer, eller hvis
det altid er meget små ting man skal have skrevet ned. Men lige så
snart teksterne bliver lidt længere eller en lille smule mere avancerede,
viser begrænsningerne i det koncept sig.
</para>

<para>
I modsætning hertil kunne LaTeX kaldes et "What You Need Is What You
Get"-program. Det skal forstås sådan at medmindre man selv beder om
det, får man noget der ser pænt ud! LaTeX kan virke skræmmende første
gang man støder på det, og det kan virke omstændigt hvis det er meget
en kort tekst man skal have skrevet, men hvis man blot har en
standardpræambel (det vender vi tilbage til) er det kun selve teksten
der skal skrives.
</para>

<para>
Er man flere, der arbejder på et dokument/rapport, sparer man tid ved
at sætte sig ind i LaTeX. Her kan man nemlig dele et dokument op i
lige så mange filer man vil. Det gør, at man kan skrive mange på én
gang, uden at skulle tænke på om de andre gemmer oven i, og man
mister sin tekst. Endvidere skal man ikke sidde og fedte med
indholdsfortegnelsen, for at få den til at passe, rette alle
henvisninger til sidst, lave hele litteraturlisten fra starten - og
mange mange andre ting!
</para>

<para>
Der er dog en grund til ikke at lære LaTeX: Erfaringen viser at man
kommer til at ærgre sig over at man ikke lærte LaTeX for længe siden,
fordi det ville have sparet en for en masse arbejde gennem årene.
</para>

<!-- Kan noget af dette bruges ?
<para>
Faktisk havde mine venner og jeg snakket om ''det der'' LaTeX, men der
var ingen af os som havde prøvet at bruge det. Jeg søgte lidt på
internettet, og fandt også lidt, men ikke rigtigt noget man kunne
bruge til noget - Specielt var det noget med nogle pakker som man
skulle ''hente ind'' - dét lød avanceret, så LaTeX fik lov til at
ligge.
</para>

<para>
Da jeg startede på AAU fandt jeg så ud af at en studerende engang
hvade skrevet lidt om LaTeX. Jeg printede det hele ud og læste
det. Dér var også en for-skrevet ''preamble'' med ''de der'' pakker -
så man ikke skulle starte fra grunden. Jeg havde brugt Linux i et par
år, så det var ikke noget problem at få det oversat og skrevet ud.
</para>
-->

<para>
LaTeX har to ulemper: Den ene er at det man bliver nødt til at sætte
sig ned og læse en times tid (f.eks. denne tekst) for at lære det. Den
anden er at man for at se hvad man egentlig har lavet skal have et program
som kan vise .dvi-filerne - sidstnævnte er mest et problem, hvis man
skriver noget i LaTeX til folk der kun kan bruge Windows. Der findes
dog DVI-fremvisere til Windows, efter sigende skulle Yap (Yet Another
Previewer) være god. Yap er en del af MikTeX 2.x hvis hjemmeside hedder
<ulink url="http://www.miktex.org/">http://www.miktex.org/</ulink>.
</para>

<para>
Et LaTeX-dokument skrives som en tekstfil i ens favoriteditor (hvad
enten den så hedder Emacs, vi, pico eller noget helt fjerde). Det
betyder at du føler dig hjemme når du skriver din tekst, og ikke hele
tiden skal huske hvordan man gør dit og dat.
</para>

<para>
LaTeX-dokumentet er som sagt ren tekst. Denne kan betragtes som
kildeteksten til f.eks. et program. LaTeX-dokumentet skal oversættes,
før man får et resultat, det er her man bruger programmet
<command>latex</command> (bemærk at programmet som de fleste andre
Unix-programmer har et navn med rent små bogstaver &ndash; Dette er det
eneste tilfælde hvor det kan tillades ikke at skrive LaTeX).
</para>

<para>
 Uddata fra <command>latex</command> er en dvi-fil (DVI står for
 DeVice Independent), som man oftest vil vælge at bruge
 <command>xdvi</command> til at se.  Hvis man skal se på dvi-filer,
 der inkluderer postscript-figurer, skal man dog være opmærksom på at
 det kan ske at <command>xdvi</command> ikke viser figurerne korrekt.
 I det tilfælde bør man bruge <command>dvips</command> til at
 oversætte dvi-filen til Postscript, og få vist postscript-filen med
 Ghostview (<command>gv</command>). Hvis LaTeX-dokumentet hedder
 <filename>fil.tex</filename> vil det for eksempel kunne gøres
 således:
 <screen>
<prompt>[tyge@hven tyge]$ </prompt><userinput>latex fil</userinput>
...
<prompt>[tyge@hven tyge]$ </prompt><userinput>dvips fil -o</userinput>
...
<prompt>[tyge@hven tyge]$ </prompt><userinput>gv fil.ps &amp;</userinput>
 </screen>
 I <ulink
 url="http://&linuxbogurl;/dokumentation/eksempler/latex_eks/">&linuxbogurl;/dokumentation/eksempler/latex_eks/</ulink>
 ligger der et lille LaTeX-dokument kaldet
 <filename>eks1.tex</filename>, som du passende kan prøve at hente, og
 udsætte for følgende:
 <screen>
<prompt>[tyge@hven tyge]$ </prompt><userinput>latex eks1.tex</userinput>
...
<prompt>[tyge@hven tyge]$ </prompt><userinput>xdvi eks1.dvi &amp;</userinput>
 </screen>
</para>

<para>
Denne bog tager kun det mest basale med, for bare at komme igang! Ting
der ikke er uddybet, kan undersøges nærmere i ''<ulink
url="http://www.sunsite.auc.dk/ftp/pub/tex/ctan/info/lshort/english/lshort.ps">The
Not So Short Introduction to LaTeX</ulink>'', som kan hentes gratis på
nettet.
</para>

<!-- Egentlig lidt ligegyldigt, men jeg synes det er sjovt -->
<para>
Inden vi går i gang, har vi lige et citat fra en
underviser på Aalborg Universitet<!--scenter-->:
</para>

<para>
<emphasis>Microsoft Word er et rigtig godt program... specielt hvis
man vil have plads på sin harddisk &ndash; så kan man jo slette
det!</emphasis>
</para>

</sect1> <!-- latex-indledning -->

<sect1 id="latex-opbygning">
<title>Opbygning af et LaTeX-dokument</title>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Opbygning af et dokument
</secondary>
</indexterm>

<para>
Som sagt skriver man sit dokument i en editor efter eget valg, og
oversætter det herefter. Før vi går i detaljer med indholdet af den
fil man kan oversætte, skal vi lige se på den overordnede opbygning af
filen.
</para>

<para>
Den grundlæggende struktur i et LaTeX-dokument fremgår af følgende 
<programlisting>
<emphasis>Præambel</emphasis>
\begin{document}
<emphasis>Indhold</emphasis>
\end{document}
</programlisting>
Hvad <emphasis>indhold</emphasis> dækker over er ikke så svært at
regne ud, derimod siger ordet <emphasis>præambel</emphasis> måske ikke
umiddelbart så meget.
</para>

<para>
Præamblen er det sted man fortæller LaTeX hvilken type tekst det er
man skriver (om det er en artikel, en rapport eller måske en hel bog),
og andre ting om teksten som helhed (f.eks. hvilken skriftstørrelse
man ønsker). Det er også her man fortæller hvilke ekstra pakker man
ønsker at gøre brug af (der findes pakker til de mærkeligste
ting). Hvis man er avanceret er det også her man definerer sin egne
kommandoer.
</para>

<para>
I langt de fleste tilfælde vil man skrive det samme i sin præambel som
sidst, og derfor anvender har de fleste LaTeX-brugere en
standardpræambel, som de har opbygget over tid, oftest på grundlag af
en de har fået af en anden. Den mulighed skal du naturligvis også
have, så derfor er der til denne tekst udarbejdet et par (faktisk 4)
præambler til diverse formål. Præamblerne kan hentes gratis på <ulink
url="http://&linuxbogurl;/dokumentation/eksempler/latex_eks/">&linuxbogurl;/dokumentation/eksempler/latex_eks/</ulink>,
til gengæld vil vi i denne tekst ikke gøre ret meget ud af indholdet
af præamblen (men måske kommer der et afsnit til senere). Disse
præambler er tilpasset denne tekst, eftersom vi ikke kommer til at
beskæftige os med produktion af stikordsregister giver præamblerne heller ikke
adgang til de nødvendige kommandoer til dette. Bemærk at LaTeX ikke er
særlig glad for danske bogstaver i filnavne og derfor er præambel
stavet på engelsk i filnavnene.
</para>

<para>
Der er forskellige måder at bruge sin standardpræambel på. En løsning
er at kopiere den ind i hver eneste LaTeX-fil man skriver (det kan man
få nogle editorer bl.a. emacs <!-- kommentar fra HCG: fortæl mig lige
hvordan man gør --> til at gøre automatisk. En anden løsning (som vi
vil gøre brug af) er at bede LaTeX inkludere den, det kan man gøre med
kommandoen <command>\input{preamble}</command> (det var din anden
LaTeX-kommando).</para>

<para>
Nu kan vi faktisk lave et minimalt LaTeX-dokument:
<programlisting>
\input{preamble}
\begin{document}
Hej SSLUG!
\end{document}
</programlisting>
Hvis du prøver at køre det her gennem LaTeX er resultatet en side med
teksten "Hej SSLUG!", ikke så ophidsende men nu er vi da i gang.
</para>
</sect1> <!-- latex-opbygning -->

<sect1 id="latex-basale-kommandoer">
<title>Basale kommandoer</title>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Basale kommandoer
</secondary>
</indexterm>

<para>
I ethvert LaTeX dokument har du brug for en række kommandoer. Alt
efter hvad dit dokument omhandler, er disse mere eller mindre
avancerede. Det lyder måske skræmmende at skulle lære en række
kommandoer, men du får hurtigt lært de fleste af dem du nogensinde vil
få brug for. Generelt er alle kommandoer man bruger i LaTeX logiske,
det betyder at du skal koncentrere dig om hvad teksten er i stedet for
hvordan den skal se ud.
</para>

<para>
Først en række kommandoer du kan bruge til at dele din tekst op i
afsnit. Husk at en fornuftig opdeling gør teksten mere overskuelig. De
kommer her i den rækkefølge der svarer til deres naturlige orden.
</para>

<itemizedlist mark="bullet">
<listitem>
<para>
<command>\chapter{Kapitlets navn}</command> (Kun i rapporter
og bøger) Begynder et nyt kapitel, bemærk at LaTeX selv holder styr på
hvad nummer du er kommet til, så det er kun navnet du skal tænke på!
Dette gælder også de kommende kommandoer.
</para>
</listitem>

<listitem>
<para>
<command>\section{Afsnitsoverskrift}</command>
Denne kommando laver et nyt afsnit med en selvstændig overskrift 
</para>
</listitem>

<listitem>
<para>
<command>\subsection{Underafsnitsoverskrift}</command>
Laver en undersektion med en selvstændig overskrift.
</para>
</listitem>

<listitem>
<para>
<command>\subsubsection{Underunderafsnitsoverskrift}</command>
Laver en underundersektion med sin egen overskrift.
</para>
</listitem>
</itemizedlist>

<para>Bemærk at LaTeX selv holder styr på hvad nummer du er kommet
til, det betyder at det <emphasis>kun</emphasis> er sektionens navn du
selv skal angive. LaTeX sørger også for at nummerere ordentligt i
forhold til de overordnede inddelinger. Det betyder også at man skal
sørge for at et afsnit på et givet niveau er indeholdt i et afsnit på
et højere niveau. Hvis du f.eks. kommer til at begynde en
<command>\subsection</command> før den første
<command>\section</command> vil den få nummer 0.1 (måske med et
kapitelnummer foran), ikke videre elegant.
</para>

<para>En kommando der er beslægtet med de nævnte er
<command>\tableofcontents</command>, som indsætter en
<emphasis>indholdsfortegnelse</emphasis> for hele dit
dokument. Indholdsfortegnelsen bliver dannet udfra oplysninger der
blev samlet sidste gang du kørte dit dokument gennem LaTeX, derfor
skal du første gang du oversætter dokumentet huske at
<emphasis>oversætte to gange</emphasis>, hvis du vil have en
indholdsfortegnelse med indhold. Ved efterfølgende kørsler plejer
LaTeX at opdage hvis der er noget der har flyttet sig og opfordrer så
til at man kører LaTeX endnu engang.  Hvis man har et meget stort
dokument kan man endog komme ud for at skulle køre det igennem LaTeX
tre gange før indholdsfortegnelsen bliver rigtig.
</para>

<para>
Hvis man har en sektion man ikke vil have med i sin
indholdsfortegnelse har alle kommandoerne en *-variant
(<command>\chapter*, \section*,</command> osv.)  som får LaTeX til at
undlade at give sektionen et nummer og udelade den fra
indholdsfortegnelsen.
</para>

</sect1> <!-- latex-basale-kommandoer -->

<sect1 id="latex-formatering">
<title>Formatering</title>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Formatering af tekst
</secondary>
</indexterm>

<para>
Nu er tiden vist kommet til at se lidt på hvordan vi får skrevet noget
reelt tekst, og hvordan vi kan formatere det.
</para>

<para>
I udgangspunktet drejer det sig naturligvis om bare at skrive den
tekst man vil have. Det er selvfølgelig nødvendigt at man sætter
mellemrum mellem ordene, men det er ligegyldigt om man sætter et eller
flere. Man kan også skrive hvert ord på sin egen linje, LaTeX er
ligeglad, afstanden mellem ordene bliver regnet ud så man får en lige
højre margen. Det eneste man ikke må er at lave blanke linjer, det
fortolker LaTeX som at man ønsker et nyt afsnit. Bemærk at kommandoer
der ikke tager et argument som f.eks. <command>\LaTeX</command>
"sluger" de efterfølgende mellemrum, så hvis man vil have mellemrum
bagefter skal man sætter <command>{}</command> efter disse
kommandoer. Dette betyder at udsagnet "LaTeX, LaTeX og mere LaTeX",
skal skrives som
<programlisting>
\LaTeX, \LaTeX{} og mere \LaTeX.
</programlisting>
</para>

<para>
Med undtagelse af det første afsnit efter en af
sektioneringskommandoerne nævnt ovenfor, indrykker LaTeX selv den
første linje i et afsnit. Formålet er gøre det nemmere at se hvor der
begynder et afsnit, hvilket f.eks. er rart at kunne når man skimmer en
tekst.
</para>

<para>
Der er 10 tegn der har en speciel betydning i LaTeX, og som følgelig
kan være lidt besværlige at lave, det drejer sig om $, &amp;, %,#, _,
{, }, ~, ^ og \. De syv første kan indsættes ved simpelthen at sætte
en bagstreg (\) foran, dvs. med 
<command>\$</command>,
<command>\amp;</command>, 
<command>\%</command>,
<command>\#</command>, 
<command>\_</command>, 
<command>\{</command> og
<command>\}</command>. De sidste tre er lidt sværere at lave, og der
findes flere løsninger (det gør der også for nogle af de 7 første),
som har hver deres fordele. En løsning er kommandoerne
<command>\textasciitilde</command>,
<command>\textasciicircum</command> og
<command>\textbackslash</command>.
</para>

<para>
Man fremhæver tekst med kommandoen <command>\emph{tekst der skal
fremhæves}</command>. Så vil LaTeX sædvanligvis skrive teksten med
kursiv, og hvis man af en eller anden grund allerede skriver med
kursiv, med ikke-kursiv. Bemærk at man beder om at få
<emphasis>fremhævet</emphasis> teksten, ikke om at få den skrevet med
kursiv/fed/... Det er der flere fordele ved, en er at det gør det
meget nemt at ændre hvordan fremhævet tekst skal se ud, en anden er at
man bruger den samme kommando lige meget om det er i almindelig tekst,
eller f.eks. i en matematisk sætning som man i forvejen bruger kursiv
til.
</para>

<para>
Bemærk at nogen bruger formen <command>{\em tekst}</command>, det er en
gammeldags måde at gøre det samme på, og kræver at man har overblik
over virkefeltet. Det kan ikke anbefales at bruge denne form.
</para>

<para>
Da der nærmest ikke er nogen grænse for hvor mange årsager der kan
være til at markere et stykke tekst, og det (med undtagelse af
fremhævning) i hvert fald ikke er de samme fra tekst til tekst, har
LaTeX ikke logiske kommandoer til markering af andre årsager. Derimod
findes et udvalg af kommandoer til at bestemme hvordan teksten fysisk
skal se ud, som man så kan benytte til at definere sine egne logiske
kommandoer. 
</para>

<!--Endvidere findes der gode argumenter for at bruge kursivering til at
fremhæve med (det bryder skriftbilledet og tvinger derfor øjet til at
omstille sig, med lavere læsehastighed til følge)-->

<para>
Hvis man f.eks. skriver en tekst med en masse filnavne, kan man bruge
en definition i stil med
</para>
<programlisting>
\newcommand{\filnavn}[1]{\textbf{#1}}
</programlisting>
<para>
der fortæller at filnavne skal sættes med fed
(<command>\textbf</command> bruges til at lave fed skrift).  Denne
definition bør placeres i præamblen. Hvis du bruger
<command>\input</command> for at benytte en standardpræambel, er det
smartest at placere definitionen mellem
<command>\input{preambel}</command> og
<command>\begin{document}</command>.  Kommandoen
<command>\newcommand</command> er noget mere avanceret end antydet
her, men det vil vi ikke gå ind i nu.
</para>

<para>
Der findes naturligvis andre muligheder end fed skrift, her er en
oversigt over hvad man kan bruge i stedet for
<command>\textbf</command> i definitionen ovenfor (uden at lave andre
ændringer):
</para>

<table id="latex-fysiske-kommandoer">
<title>Oversigt over de kommandoer man kan bruge til at påvirke teksts
	udseende</title>
<tgroup cols="2">
<thead>
  <row>
    <entry>Kommando</entry>
    <entry>Effekt</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry><command>\textbf</command></entry>
    <entry>Fed skrift</entry>
  </row>
  <row>
    <entry><command>\texttt</command></entry>
    <entry>Skrivemaskineskrift</entry>
  </row>
  <row>
    <entry><command>\textsl</command></entry>
    <entry>Hældende skrift (ikke det samme som kursiv)</entry>
  </row>
  <row>
    <entry><command>\textsf</command></entry>
    <entry>Sans serif-skrift</entry>
  </row>
  <row>
    <entry><command>\textsc</command></entry>
    <entry>Kapitæler (Formindskede store bogstaver)</entry>
  </row>
</tbody>
</tgroup>
</table>
</sect1> <!-- latex-formatering -->

<sect1 id="latex-omgivelser">
<title>Omgivelser</title>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Omgivelser
</secondary>
</indexterm>

<para>
Omgivelser (på engelsk: environments) er nogle kommandoer, som man
bruger til at omgive større mængder tekst, som af en eller andre grund
udgår en enhed. Et eksempel herpå er f.eks. punktopstilling. Denne
omgivelse hedder "itemize".
</para>

<para>
Man begynder en punktopstilling med
<command>\begin{itemize}</command>, og afslutter den med
<command>\end{itemize}</command>. Imellem disse to kommandoer begynder
man et nyt punkt med <command>\item</command>. En hel punktopstilling
      kommer altså til at se sådan her ud:
<programlisting>
\begin{itemize}
\item Første punkt
\item Andet punkt
  \begin{itemize}
  \item Første underpunkt til andet punkt
  \item Andet underpunkt til andet punkt
  \end{itemize}
\item Tredje punkt
\end{itemize}
</programlisting>
hvor man også kan se at man sagtens kan have punktopstillingen i flere
niveauer. LaTeX sørger selv for at bruge forskellige symboler foran
punkterne på forskellige niveauer.
</para>

<para>
Vil du gerne have nummereret punktopstilling hedder omgivelsen
"enumerate". LaTeX holder selvfølgelig selv styr på hvilke numre de
forskellige punkter har, du skal bare sætte dem i den rigtige
rækkefølge. Ligesom før kan du sagtens have punktopstillinger (både
nummererede og unummererede) inden i et punkt, for nummererede
punktopstillinger bruger LaTeX så a,b,c...
</para>

<para>
En tredje form for punktopstilling kan laves med omgivelsen
<command>description</command>, der fungerer stort set som
<command>itemize</command> og <command>enumerate</command>. Der er dog
den forskel at <command>\item</command> tager et argument og giver
hængende indrykning.
</para>

<para>
En sidste omgivelse det kan være nyttigt at stifte bekendskab med på
nuværende tidspunkt er <command>center</command>, som centrerer
indholdet på linjen. Eftersom LaTeX normalt sørger for en lige højre
margen, er <command>center</command> sjældent anvendelig på længere
tekststykker. En praktisk anvendelse kunne være
<programlisting>
\begin{center}
Med venlig hilsen
\end{center}
</programlisting>
i slutningen af et brev.
</para>
</sect1> <!-- latex-omgivelser -->

<sect1 id="latex-henvisninger">
<title>Henvisninger m.m.</title>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Henvisninger
</secondary>
</indexterm>

<para>
Fodnoter laves med <command>\footnote{Fodnotetekst}</command> på det
sted i teksten hvor fodnoten skal være.  Behøver man at skrive at du
blot skal skrive fodnoten, og så holder LaTeX styr på dem.
</para>

<para>
Hvis man har brug for at have krydshenvisninger til teksten, sætter man
et mærke på det sted man har brug for at henvise til med
<command>\label{Mærkenavn}</command>. Det kan man så henvise til med
<command>\ref{Mærkenavn}</command>. Som udgangspunkt kommer henvisningen
til at bestå af nummeret på den nærmest foregående sektioneringskommando
(se afsnit <xref linkend="latex-basale-kommandoer"/>), men i forbindelse
med figurer (se afsnit <xref linkend="latex-billeder"/>), tabeller,
ligninger og andre ting der har særskilte numre benyttes disse. Hvis man
hellere vil have en henvisning til den side mærket er på, bruges
<command>\pageref{Mærkenavn}</command>. Hvis man både vil have en
henvisning til afsnit og sidetal, er kommandoen
<command>\vref</command><footnote><para><command>\vref</command> er ikke
en standardkommando i LaTeX, men stammer fra pakken varioref, som
inkluderes hvis du benytter enten preambel2.tex eller
preambel4.tex</para></footnote> et godt bud, den kan bl.a. også finde ud
af at skrive foregående/næste side i stedet for en sidetal, hvis det er
relevant.
</para>

<para>
Du kan lave en litteraturliste i dit dokument med omgivelsen
<command>thebibliography</command>, hvori
<command>\bibitem{navn}</command> bruges til at angive hver kilde. Så
kan du indsætte en reference til den pågældende kilde med
<command>\cite{navn}</command>. Et eksempel:
<programlisting>
\begin{thebibliography}{9}
\bibitem{tnss} Tobias Oetiker et al.: \emph{The not so short...}
\bibitem{lamport} Leslie Lamport: \emph{\LaTeX{} A Document
  Preparation System}
\end{thebibliography}
</programlisting>
vil lave en litteraturliste med de to bøger i, og gøre det muligt at
henvise til dem med henholdsvis <command>\cite{tnss}</command> og
<command>\cite{lamport}</command>. Nitallet efter
<command>\begin{thebibliography}</command> fortæller LaTeX, hvor langt
det største mærke er, LaTeX tager længden af den tekst der står der og
bruger den til at skabe et pænt udseende, som oftest vil man skrive
enten 9 eller 99 der.
</para>

</sect1> <!-- latex-henvisninger -->

<sect1 id="latex-billeder">
<title>Billeder</title>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Billeder og grafik
</secondary>
</indexterm>

<para>
 Der findes mange måder at sætte billeder ind i dokumenterne på, min
 anbefaling er at konvertere alt til indkapslet Postscript
 (EPS/Encapsulated PostScript), og sætte dem ind med følgende kode:

<programlisting>
\begin{figure}[htbp]
\begin{center}
\includegraphics{billede.eps}
\end{center}
\caption{Billedtekst.}
\label{billedmærke}
\end{figure}
</programlisting>
</para>

<para>
Hvis man bruger pdfLaTeX (kommandonavn: <command>pdflatex</command>) er
det muligt at inkludere jpg-, png- og gif-filer direkte, men til gengæld
ikke eps.
</para>

<para>
Omgivelsen <command>figure</command> fortæller LaTeX at indholdet er en
figur, som den skal placere et sted hvor det vil se pænt ud, efter de
retningslinjer der er angivet i kantede parenteser bagefter. Eksemplet
viser de fire muligheder der er, <command>h</command> beder om at få
figuren placeret her, <command>t</command> beder om at få det øverst på
en side, <command>b</command> om at få det nederst på en side og
<command>p</command> siger at LaTeX må placere det på en side der kun
indeholder figurer. Rækkefølgen er helt ligegyldig. Hvis man ikke
angiver nogen retningslinjer er standardindstillingen
<command>tbp</command>.
</para>

<para>
At LaTeX som standard placerer figurer der hvor det bliver pænest bør
ikke være et problem, hvis man sørger for en fornuftig billedtekst, og
det relevante sted i teksten indsætter en reference med
<command>\ref{billedmærke}</command>.
</para>

<sect2 id="latex-Xfig">
<title>Xfig</title>

<para>
Skal du tegne dine egne billeder, kan du med fordel anvende
programmet Xfig. Det kan gemme i LaTeX-format og postscript (m.fl.),
hvilket resulterer i nogle <emphasis>meget</emphasis> skarpe og flotte
figurer. Programmet kræver lige som LaTeX lidt tid at sætte sig ind i
&ndash; men det er tiden værd!! 
</para> 
</sect2> <!-- latex-Xfig -->

<sect2 id="latex-metapost">
 <title>MetaPost</title>

 <para>
  En anden mulighed er at lave sin grafik i MetaPost. Det er sublimt
  til præcisionsarbejde, det har en glimrende pakke til at tegne
  grafer og så kan man inkludere LaTeX-formateret tekst!  Læs mere om
  MetaPost på <ulink
  url="http://cm.bell-labs.com/who/hobby/MetaPost.html">http://cm.bell-labs.com/who/hobby/MetaPost.html</ulink>
 </para>
</sect2> <!-- latex-metapost -->
</sect1> <!-- latex-billeder -->

<sect1 id="latex-tabeller">
<title>Tabeller</title>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Tabeller
</secondary>
</indexterm>

<para>
Tabeller kan laves ved hjælp af omgivelsen <command>tabular</command>.
Efter <command>\begin{tabular}</command> skal man i krøllede parenteser
angive hvordan indholdet i de forskellige søjler skal justeres, og om
der skal være en streg mellem to søjler. Man angiver at en søjle skal
være venstrejusteret ved med et <command>l</command>, at den skal være
centreret med et <command>c</command>, at den skal være højrejusteret
med et <command>r</command> og at der skal være en streg mellem to
søjler med en <command>|</command>. Hvis man vil have en tabel med en
venstrestillet, en centreret og to højrestillede søjler og en streg
mellem de to højrestillede, bliver det alt i alt til:
<programlisting>
\begin{tabular}{lcr|r}
</programlisting>
</para>

<para>
Indholdet angives række for række, med de enkelte felter adskilt af
<command>&</command> og rækker adskilles af <command>\\</command>.
Vandrette linjer mellem to rækker laves med kommandoen
<command>\hline</command>. 
</para>

<para>
Ofte har man ikke behov for at få tabellen placeret et bestemt sted, men
snarere et sted hvor det ser pænt ud. Her kan man så benytte en
mekanisme fuldstændig analog til den for billeder, den hedder blot
<command>table</command> i stedet for <command>figure</command>. 
</para>

<para>
Et fuldstændigt eksempel på en tabel som LaTeX får lov at bestemme
placeringen af:
<programlisting>
\begin{table}[htpb]
\begin{tabular}{|l|l|r|}
\hline
Firmanavn & Adresse & Postnummer \\
\hline
Vagabondos & Tagensvej 100 & 2200 \\
\hline
DKUUG & Fruebjergvej 3 & 2100 \\
\hline
Niels Bohr Instituttet & Blegdamsvej 17-21 & 2100 \\
\hline
\end{tabular}
\caption{Steder af betydning for SSLUG}
\label{tabelmærke}
\end{table}
</programlisting>
</para>

</sect1> <!-- tabeller -->

<sect1 id="latex-diverse">
<title>Diverse</title>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Kommentarer
</secondary>
</indexterm>

<para>
Man kan indsætte kommentarer (som ikke kommer med i det oversatte
dokument) i sin LaTeX-fil, det gøres med et %-tegn, som gør resten af
linjen til en kommentar. Det kan f.eks. bruges til at huske sig selv
på at et afsnit ikke er færdigskrevet, eller til at placere tydelige
identifikationer af at man f.eks. begynder på et nyt afsnit, det kan
f.eks. gøres som:
<programlisting>
...

%---------- Her begynder et nyt afsnit kaldet: Næste afsnit ----------
\section{Næste afsnit}
</programlisting>
Hvis man så senere har behov for at rette noget i det afsnit, er det
nemmere at finde på grund af denne linje.
</para>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Vandrette streger
</secondary>
</indexterm>
<indexterm>
<primary>
Tankestreger
</primary>
<secondary>
i LaTeX
</secondary>
</indexterm>

<para>
Der er forskel på vandrette streger! En bindestreg er kortere og lidt
bredere end en tankestreg, og de laves derfor på forskellig vis.  En
bindestreg laver man med en enkelt <command>-</command>, mens en
tankestreg laves med to -'er efter hinanden
(dvs. <command>--</command>). To -'er bruges også til at angive
intervaller som f.eks. 1991&ndash;2002. På dansk laves en tankestreg med
mellemrum omkring, altså som "tekst &ndash; tekst", mens det på
amerikansk laves uden mellemrum og med tre streger
(<command>---</command>) "tekst&mdash;tekst".
</para>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Gåseøjne
</secondary>
</indexterm>

<para>
Det rette udseende og placering af gåseøjne kan diskuteres længe.
Dansk tradition er at åbne med "nitaller forneden" og lukke med "sekstaller
foroven", sådanne gåseøjne laves med <command>"`</command>
og <command>"'</command>. 
Engelsk tradition er at åbne med "sekstaller foroven" og lukke med
"nitaller foroven", sådanne laves med <command>``</command> og
<command>''</command>. 
</para>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Dags dato
</secondary>
</indexterm>

<para>
Hvis du har brug for dags dato, så fås den med kommandoen
<command>\today</command>.
</para>

<para>
En enkel overskrift laves med kommandoen
<command>\maketitle</command>, som forudsætter at du har defineret en
titel med <command>\title{Dokumentets titel}</command>, forfatter med
<command>\author{Dit navn}</command>, og evt. en dato med
<command>\date{Dato}</command>. Hvis datoen blot skal være dags dato, er det
ikke nødvendigt at definere denne, det er nemlig standard. Det kan
måske være en idé at sætte <command>\author{Dit navn}</command> ind i
din præambel, så behøver du ikke skrive det hver gang.
</para>

<sect2 id="latex-preamble">
<title>Præambler</title>

<indexterm>
<primary>
LaTeX
</primary>
<secondary>
Eksempelpræambler
</secondary>
</indexterm>

<para>
 Som skrevet tidligere, vil vi ikke gøre noget ud af indholdet af
 præamblen. Her følger blot nogle korte beskrivelse af de
 standardpræambler der er lavet til denne tekst, og som kan findes på
 <ulink
 url="http://&linuxbogurl;/dokumentation/eksempler/latex_eks/">&linuxbogurl;/dokumentation/eksempler/latex_eks/</ulink>.
</para>

<para>
Den første præambel (<filename>preamble1.tex</filename>) er tænkt til
korte tekster (uden teknisk indhold). Det betyder at den siger til
LaTeX at dokumentet er en artikel, hvilket igen betyder at du ikke kan
lave kapitler. Derudover kan du ikke indsætte billeder eller bruge
kommandoen <command>\vref</command>.
</para>

<para>
Den anden præambel (<filename>preamble2.tex</filename>) er tænkt til
længere tekster uden teknisk indhold. Det betyder at LaTeX får at vide
at den skal opfatte teksten som en rapport, hvorfor du kan lave
kapitler. Faktisk skulle du have mulighed for at bruge alle de ting du
har læst om her.
</para>

<para>
Derudover indeholder kataloget to præambler mere
	(<filename>preamble3.tex</filename> og
	<filename>preamble4.tex</filename>) som er tænkt til
	henholdsvis kortere og længere tekster med et mere teknisk
	indhold. Eftersom vi her ikke har beskæftiget os med de
	muligheder er de nok ikke interessante i første omgang.
</para>

</sect2> <!-- latex-preamble -->
</sect1> <!-- latex-diverse -->


<sect1 id="latex-afslutning">
<title>Afsluttende bemærkninger</title>

<para>
Om jeg så havde haft alverdens papir til rådighed bliver jeg aldrig
færdig med at fortælle om LaTeX. Det skyldes (som jeg håber du har
fornemmet indtil nu) at kombinationsmulighederne er ganske ufattelige.
Selv efter at have brugt LaTeX til stort set alt i over 6 år, kan jeg
stadig lære nye ting (en del af det er dog nærmere ren TeX), og ved
der er masser af ting jeg ikke forstår. Selvom dette kun er en kort
introduktion håber jeg dog at du har fået noget ud af det. Har du det
har du gjort mig glad! :-)
</para>

<para>
 Der er skrevet meget litteratur om LaTeX, men ikke ret meget på
 dansk, og slet ikke noget der ikke har fået mig til at krumme tæer
 over alle de uvaner der blev videregivet til de uvidende stakler der
 kom for skade at læse det.  Derfor denne tekst.  Hvis du nu har fået
 lyst til at lære mere om LaTeX, så er her en række bøger der er ret
 populære:
</para>

<itemizedlist mark="bullet">
<listitem>
 <para>
<emphasis>The Not So Short Introduction To LaTeX2e</emphasis>, af
Tobias Oetiker m.fl.  Dette er en gratis bog, som du kan finde på
internettet. Jeg vil anbefale dig at hente den hjem og skrive den ud,
for der er et godt stikordsregister bag i. Du kan finde den på
adressen <ulink
url="http://www.sunsite.auc.dk/ftp/pub/tex/ctan/info/lshort/english/lshort.ps">http://www.sunsite.auc.dk/ftp/pub/tex/ctan/info/lshort/english/lshort.ps</ulink>.
 </para>
</listitem>
<listitem>
 <para>
<emphasis>The LaTeX Companion</emphasis>, Denne bog indeholder alt
hvad der har med "normale" dokumenter at gøre.  Der bliver henvist til
den, fra Oetiker og fra selve oversætteren af LaTeX, hvis du har lavet
en fejl. Koster lige omkring 500,- kr.
</para>
</listitem>
<listitem>
<para>
<emphasis>Guide to LaTeX</emphasis>, af Helmut Kopka og Patrick
W. Daly. En bog der ser ud til at give en grundig dækning af et rimelig
bredt spektrum af emner. Denne bog koster omkring 650,- kr.
</para>
</listitem>
<listitem> 
 <para>
<emphasis>The LaTeX Graphics Companion</emphasis>, af Michel Goossens
m.fl.  Denne bog indeholder alt hvad der har med grafik at gøre, hvad
enten det er billeder, grafer, noder, streger, kurver eller figurer -
simpelthen alt. Koster lige omkring 500,- kr.
</para>
</listitem>
<listitem> 
 <para>
<emphasis>The LaTeX Web Companion</emphasis>, Denne bog handler om
hvordan man integrerer sine kundskaber i LaTeX på internettet. Den er
ret ny og rimelig spændende.  Koster ligeledes lige omkring 500,- kr.
</para>
</listitem>
</itemizedlist>

<para>
Alle bøgerne udgives af Addison-Wesley, og en del af overskuddet går
til LaTeX3-projektet, så ved at købe dem støtter du også udviklingen
af nye og bedre versioner af LaTeX.
</para>

</sect1> <!-- latex-afslutning -->
</chapter> <!-- latex -->
