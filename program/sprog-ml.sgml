<?xml encoding="UTF-8" ?>

<sect1 id="sprog-ml">
 <title>ML</title>

 <indexterm>
  <primary>ML</primary>
 </indexterm>

 <indexterm>
  <primary>funktionsprogrammeringssprog</primary><secondary>ML</secondary>
 </indexterm>

 <indexterm>
  <primary>oversatte sprog</primary><secondary>ML</secondary>
 </indexterm>

 <para>
  ML er et funktionsprogrammeringssprog der har stærkt typetjek med
  polymorfi, højereordensfunktioner, funktionsdefinition ved
  mønstergenkendelse, håndterbare undtagelser (eng. exceptions),
  strikt evaluering og et avanceret modulsystem.  Det betyder at
  rigtig mange programmeringsfejl bliver opdaget allerede når man
  oversætter et program, ikke først når man kører det.  ML blev
  oprindelig (ca. 1974) udviklet som metasprog (meta-language) til
  logiske bevissystemer, men sproget viste sig at være særdeles
  velegnet til en lang række andre formål.
 </para>

 <para>
  I dag (2001) findes der to væsentlige varianter af sproget ML:
  Standard ML (SML) og Objective Caml (OCaml).  Der findes ganske
  omfattende biblioteker af nyttige funktioner til såvel Standard ML (se
  <ulink url="http://www.dina.kvl.dk/~sestoft/sml/sml-std-basis.html">SML
  Basis Library</ulink>) som OCaml.  Desuden har de enkelte implementationer
  deres egne udvidelser til f.eks. databaseadgang, generering af
  HTML-kode, PNG-billeder, osv.
 </para>

 <para>
  ML er især udbredt på universiteter og forskningsinstitutioner, og
  benyttes i mindre grad i industriel sammenhæng.  I Danmark undervises
  der i Standard ML ved blandt andet Danmarks Tekniske Universitet,
  Københavns Universitet (DIKU), Aarhus Universitet, Aalborg Universitet
  og IT-højskolen i København.
 </para>

 <sect2 id='sprog-brug-af-ml'>
  <title>Brug af ML</title>

  <para>
   Der findes flere implementationer af SML. Både SML of New Jersey og
   MoscowML giver mulighed for at lege med SML ved en 'læs-beregn-udskriv
   løkke' hvor man interagerer direkte med fortolkeren. Man 
   skriver sine udtryk ind, fortolkerne beregner dem og skriver svaret ud.
   En session med SML kunne derfor se således ud:
  </para>

<screen>
Standard ML of New Jersey v110.42 [FLINT v1.5], October 16, 2002
<prompt>- </prompt><userinput>val prim = [18,43,23,10,88];</userinput>
val prim = [18,43,23,10,88] : int list
<prompt>- </prompt><userinput>fun sum []      = 0</userinput>
<prompt>= </prompt><userinput>  | sum (x::xs) = x + sum xs;</userinput>
val sum = fn : int list -&gt; int
<prompt>- </prompt><userinput>val res = sum prim;</userinput>
val res = 182 : int
<prompt>- </prompt>
</screen>

 </sect2>

 <sect2 id='sprog-ml-eksempel'>
  <title>Eksempel på SML</title>

  <para>
   Det følgende eksempel forsøger vise en række af de ting der er
   specielle for SML og andre funktionsorienterede sprog. SML udleder
   selv typer for funktioner, og de udledte typer er her indsat over
   funktionsdefinitionerne i kommentarer <literal>(* ... *)</literal>.
  </para>

  <para>
   Først defineres en funktion <literal>map</literal>:
 
<programlisting>
(* Type: ('a -&gt; 'b) -&gt; 'a list -&gt; 'b list *)
fun map f nil = nil
  | map f (x::xs) = f(x) :: map f xs;
</programlisting>
  </para>

  <para>
   Typen fortæller at funktionen <literal>map</literal> som argumenter
   tager en anden funktion der tager et argument af typen
   <literal>'a</literal> og returnerer en værdi af typen
   <literal>'b</literal>. Det andet argument til
   <literal>map</literal> er en liste hvor elementerne har typen
   <literal>'a</literal> og så returnerer map en liste af elementer af
   typen <literal>'b</literal>. Men hvad er <literal>'a</literal> og
   <literal>'b</literal>?
  </para>

  <para>
   <literal>'a</literal> er en typevariabel. Hvis man kalder
   <literal>map</literal> med en funktion der tager et heltal som
   argument vil <literal>'a</literal> blive bundet til typen
   <literal>int</literal>. Dette kaldes
   typepolymorfi. <literal>map</literal> arbejder bare på lister og er
   ligeglad med hvad funktionen <literal>f</literal> gør ved
   elementerne.
 </para>

  <para>
   Funktionen er defineret med mønstergenkendelse. Det vil sige at der
   er listet en række tilfælde af definitionen op hvor SML så vil
   vælge den første der passer. <literal>nil</literal> og
   <literal>(x::xs)</literal> er mønstre som SML sammenligner med hvad
   funktionen bliver kaldt med. <literal>nil</literal> er den tomme
   liste og <literal>(x::xs)</literal> er en liste hvor det første
   element bliver bundet til variablen <literal>x</literal> og resten
   af listen bliver bundet til variablen <literal>xs</literal>.
  </para>

  <para>
   <literal>::</literal> er en infix-operator der laver
   listesammensætning.  <literal>map</literal> tager altså en funktion
   og en liste og udføre funktionen på alle elementerne i listen. Da
   <literal>map</literal> tager en anden funktion som argument kaldes
   den en højereordensfunktion.
  </para>

  <para>
   Følgende enkle funktion tager et heltal og ganger det med 2:

<programlisting>
(* Type: int -&gt; int *)
fun double n = 2 * n;
</programlisting>
  </para>

  <para>
   Ikke noget specielt her.
  </para>

  <para>
   Nu vil vi så anvende ovenstående to funktioner til at lave en
   funktion der tager en liste af heltal og fordobler dem:

<programlisting>
(* Type: int list -&gt; int list *)
val doublelist = map double;
</programlisting>
  </para>

  <para>
   Bemærk at vi her bruger <literal>val</literal> og ikke
   <literal>fun</literal>. Det er fordi vi egentligt ikke laver en ny
   funktion men tildeler navnet <literal>doublelist</literal> en værdi
   (funktioner er nemlig lige så meget værdier som heltal er).
  </para>

  <para>
   Det næste man bemærker er at <literal>map</literal> kaldes med kun
   et argument. Men <literal>map</literal> havde da to argumenter?
   Dette kaldes 'currying'. Vi kalder <literal>map</literal> med det
   første argument, det returnerer en funktion der tager resten af
   argumenterne.
  </para>

<!--
For pedanten:

Det der egentligt foregår er at map er en funktion der tager ét argument (f)
og returnerer en funktion der tager ét argument (nil/(x::xs)) og returnerer en
liste.

Alle funktioner i SML tager netop et argument, så kan man enten lade dette
være et n-tupple eller også laver man modellen med en funktion der returnere en
funktion der tager det næste som argument.

Det korte af det lange er at jeg tror at det er lidt for langthåret og subtilt
til at det bør stå i bogen i klartekst. Det er allerede ret ambitiøst at tale
om typepolymorfi.
-->

  <para>
   Vi kunne også have undladt at definere funktionen
   <literal>double</literal> og bruge en anonym funktion:

<programlisting>
(* Type: int list -&gt; int list *)
val doublelist = map (fn x =&gt; 2 * x);
</programlisting>
  </para>

  <para>
   Den slags anonyme funktioner bruges ganske ofte i SML.
  </para>
 </sect2>

 <sect2 id='sprog-ml-iteration'>
  <title>Iteration i SML</title>

  <indexterm>
   <primary>iteration</primary>
   <secondary>i SML</secondary>
  </indexterm>

  <indexterm>
   <primary>løkker</primary>
   <secondary>i SML</secondary>
  </indexterm>

  <para>
   SML indeholder ikke de løkkestrukturer man normalt bruger. <!-- i
   procedurale sprog --> Skal man beregne noget iterativt bliver man
   derfor nødt til selv at lave nogle funktioner der klarer det for
   sig. Man kunne for eksempel bruge følgende funktion:

<programlisting>
(* Type: ('a -&gt; 'a) -&gt; int -&gt; 'a -&gt; 'a *)
fun iterate f 0 x = x
  | iterate f i x = iterate f (i-1) (f x);
</programlisting>
  </para>

  <para>
   <literal>iterate</literal> tager en funktion <literal>f</literal>
   og udfører den et antal gange på værdien <literal>x</literal>.
  </para>
 </sect2>
</sect1>
