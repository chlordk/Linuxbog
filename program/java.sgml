<SECT1 id="java">
<title>Java</title>
<indexterm><primary>Java</primary></indexterm>

<para>
Java er et objektorienteret programmeringssprog, der har fået en masse
vind i sejlene i forbindelse med Internettets vækst. Det skyldes at
Java ud over at kunne bruges til udvikling af almindelige
applikationer også giver mulighed for at lave såkaldte applets, små
programmer, der kan køres i en web-browser. Derfor er Java blevet
internettets fortrukne programmeringssprog.
</para>

<para>
<indexterm><primary>JVM</primary></indexterm>
<indexterm><primary>bytecode</primary></indexterm>
Java er lidt anderledes end mange andre
programmeringssprog derved at et Java program oversættes til kode der
ikke i sig selv kan køre på en computer. Programmet oversættes til
såkaldt "bytecodes", som kan fortolkes af en JVM (Java Virtual
Machine). Denne såkaldte "bytecodes" kan dermed køres på alle de
computere der har en JVM. Dvs. Java udviklet på en Linux maskine kan
uden re-kompilering køres på en Solaris, MacOS eller Windows NT
maskine. Samtidigt er der indbygget en Java Virtual Machine i de
fleste web-browsere på markedet.
</para>

<para>
Javas syntaks minder på mange måder om C++, men sproget er mere
renblodet objektorienteret. Desuden følger der mange forskellige
biblioteker (pakker) med Java som en del af sproget. Disse pakker
dækker de fleste af de behov for værktøjer som en programmør måtte
have. Af pakker der kan nævnes er: pakke til at udvikle grafiske
brugergrænseflader, pakke med standardværktøjer såsom vektorer,
matricer, container klasser osv., pakke til netværkskommunikation og
en pakke til 3D visualisering.  Alle de pakker der som standard følger
med sproget Java, eller som kan hentes ned fra Internettet separat,
betyder at man ikke behøver at finde programbiblioteker til at løse
specifikke problemer på Internettet eller købe specifikke
programbiblioteker (såsom MFC til Windows). Bagsiden af medaljen er at
programmeringssproget er meget omfattende og dermed også svært at
lære.
</para>

<para>
Nogle vigtige pakker som er del af Java sproget er:

<itemizedlist mark="bullet" spacing="compact">

<listitem><para>
<filename>java.applet</filename>: pakke til at håndtere udvikling af applikationer der kan
køre i en browser.  
</para></listitem>

<listitem><para>
<filename>java.awt</filename>: pakke til at håndtere GUI udvikling, med klasser til 2D
grafik, knapper, menuer, drag-and-drop etc.
</para></listitem>

<listitem><para>
<filename>java.beans</filename>: pakke til at håndtere komponentbaseret udvikling.
</para></listitem>

<listitem><para>
<filename>java.io</filename>: Input og output kontrol på filer, vektorer og matricer og
serialization.  
</para></listitem>

<listitem><para> <filename>java.lang</filename> : pakke med klasser
som er basale for Java sproget og dets eksekveringsdomæne.  java.math:
pakke til matematik inkluderende klasser til vilkårlig nøjagtighed af
reelle og flydende tal beregninger.  </para></listitem>

<listitem><para> <filename>java.net</filename> : pakke til håndtering
af netværksbaseret kommunikation, herunder Web baseret fil håndtering.
</para></listitem>

<listitem><para>
<filename>java.rmi</filename>: pakke til eksekvering af metoder af klasser på en anden
maskine.  
</para></listitem>

<listitem><para>
<filename>java.sql</filename>: jdbc interface, som er interface til databaser.
</para></listitem>

<listitem><para> <filename>javax.swing</filename> : Swing er GUI
udviklingspakken, er avanceret og afløser AWT (java.awt).
</para></listitem>

<listitem><para>
<filename>org.omg.CORBA</filename>: understøttelse af CORBA standarden.
</para></listitem>
</itemizedlist>

Man kan også blande Java og andre programmeringssprog. Det gøres
vha. JNI som det hedder i Java. Man kan få genereret C og C++ header
filer (stubbe) vha. et JNI værktøj.
</para>

<para>
Sproget blev i sin tid udviklet af Sun Microsystems og stillet gratis
til rådighed. Java stilles til rådighed i form af et såkaldt JRE (Java
Runtime Environment) og en JDK (Java Development Kit). JRE dækker over
det der skal til for at køre Java programmer, mens JDK er det der skal
til for at udvikle Java programmer.  I starten var det ikke alle
operativsystemer der var understøttet, hvorfor firmaer kan licensere
selve Java udviklingskoden (det gør Microsoft blandt andet). Linux var
ikke understøttet i lang tid, men i dag er der givet en gratis licens
til et medlem af Blackdown porting teamet (Steve Byrne), som sammen
med andre porterer nye versioner af Java til Linux. Organisationen der
styrer Java til Linux er Blackdown 
<ulink url="http://www.blackdown.org">http://www.blackdown.org</ulink>.
</para>

<para>Der var specielt i starten, hvor der ikke eksisterede officielle
versioner af Java til Linux, startet et antal projekter med det mål at
udvikle Java-værktøjer under GPL. Med Red Hat følger dels guavac, der
er en selvstændigt udviklet Java-oversætter, dels kaffe, der er en
virtuel Java-maskine (JVM), altså et program der kan afvikle
Java-bytecodes (kaffe er på vej til at blive et komplet udviklingsmiljø,
pakken indeholder bl.a. en Java-oversætter og de mest nødvendige biblioteker.)
Der er også udviklet et antal JIT (Just In Time) JVM'er til Java som
OpenSource produkter. Den bedste og mest kende hedder ShuJIT.  En JIT er en
JVM der kan oversætter "bytecodes" koden til maskinkode, når der er behov
for at eksekvere koden, og ikke før. En JIT afvikler normalt koden hurtigere
end en almindelig JVM fortolker. Desuden har Sun udviklet en meget hurtig JVM
kaldet HotSpot som er ved at blive porteret til Linux.
</para>

<para>I det følgende vil der blive givet en opskrift på hvordan man
installerer Java udviklingsmiljøet (JDK).  Der findes to versioner af
Java, Java 1.1 og Java 2 (som egentlig er Java 1.2 pt. Java 1.2.2RC4
til Linux).  Den store forskel på disse to versioner er at den nyeste
Java 2 har mange nye værktøjer og er sprogmæssigt lidt forskelligt fra
den ældre Java 1.1. Java 1.1 kan være interessant bla. fordi den
eksekverer en hel del hurtigere end den nye Java 2 (på Linux). I det
følgende er det Java 2 der vil blive omtalt da det forventes at de
problemer der er med Java 2 vil blive løst. Endvidere er Java 1.3
tilgængelig til Windows og Solaris, og igang med at blive porteret til
Linux (se 
<ulink url="http://www.blackdown.org">http://www.blackdown.org</ulink>
for status).
</para>


<sect2 id="java-installation">
<title>Installation af Java 2</title>
<para>
Det første skridt er at downloade
<filename>jdk-1.2.2-RC4-linux-i386-glibc-2.1.2.sh</filename>. Denne
pakke kan findes de sædvanlige steder såsom <ulink
url="http://sunsite.auc.dk">http://sunsite.auc.dk</ulink>, på
<ulink url="http://www.blackdown.org">http://www.blackdown.org</ulink>
og 
<ulink url="http://java.sun.com">http://java.sun.com</ulink>. JDK'en som du skal
downloade skal passe til din Linux distribution. Der er forskellige
pakker til netop den version af glibc som du benytter i din
distribution. Du kan se version af glibc du benytter ved at se hvilken
soft link dit <filename>libc.so.6</filename> peger på (enten
<filename>libc-2.1.x</filename> eller
<filename>libc-2.0.x</filename>). Pakken fylder godt 20 Mbyte.
</para>

<para>
Du kan installere shell installation pakken (ender på .sh), men der
findes også almindelige tar og gzippede filer. Installation af shell
installation foregår ved (se nedenfor vedr. hvor det kan betale sig at
installere det):
</para>

<screen>
<prompt>[root@daisy /root]# </prompt> <userinput>cd /usr/local</userinput>
<prompt>[root@daisy /root]# </prompt> <userinput>chmod +x DIN_STI/jdk-1.2.2-RC4-linux-i386-glibc-2.1.2.sh</userinput>
<prompt>[root@daisy /root]# </prompt> <userinput>DIN_STI/jdk-1.2.2-RC4-linux-i386-glibc-2.1.2.sh</userinput>
</screen>

<para>
Hermed er Java udviklings- og eksekveringsmiljøet installeret! Du
skal dog gennem et par ekstra skridt for at det virker
tilfredsstillende.
</para>

<para>
Man mangler Zapf Dingbats fonte i installationen. Disse hentes på
<ulink url="http://www.gimp.org/fonts.html">http://www.gimp.org/fonts.html</ulink>. Installation
af disse er beskrevet på WEB siten. Man skal i korthed downloade URW
fontene <filename>urw-fonts.tar.gz</filename>. Disse skal gunzippes og tar'es i X Window
systemets font katalog:
</para>

<screen>
<prompt>[root@beta /root]# </prompt> <userinput>cd /usr/X11R6/lib/X11/fonts</userinput>
<prompt>[root@beta /root]# </prompt> <userinput>tar xzvf /mnt/cdrom/Java/java3d/linux/urw-fonts.tar.gz</userinput>
<prompt>[root@beta /root]# </prompt> <userinput>chown -R root.root</userinput>
</screen>

<para>
Dernæst skal man ændre sin X Window opsætningsfil. Hvis ens
distribution kører med X Window font server så hedder filen
<filename>/etc/X11/fs/config</filename> (Red Hat) ellers hvis man kører uden font server
skal man rette i <filename>/etc/X11/XF86Config</filename> (Red Hat) som beskrevet nedenfor
(Red Hat 6.x bruger font server) :
</para>

<screen>
        /usr/X11R6/lib/X11/fonts/misc:unscaled,
	/usr/X11R6/lib/X11/fonts/75dpi:unscaled,
	/usr/X11R6/lib/X11/fonts/100dpi:unscaled,
        /usr/X11R6/lib/X11/fonts/URW,
	/usr/X11R6/lib/X11/fonts/misc,
	/usr/X11R6/lib/X11/fonts/Type1,
	/usr/X11R6/lib/X11/fonts/Speedo,
	/usr/share/fonts/default/Type1
</screen>

<para>
Ændringer til X Window Server XF86Config filen er beskrevet på <ulink
url="http://www.gimp.org/fonts">http://www.gimp.org/fonts</ulink>,
og for font server filen skal fjerde linie med URW fontene lægges til
<filename>/etc/X11/fs/config</filename> filen. For at genstarte font
serveren køres scriptet xfs med parameter restart i
<filename>/etc/rc.d/init.d</filename> (som root). Næste gang din Linux
maskine bootes startes X font serveren automatisk med de nye fonte.
</para>

<para>
Nu mangler vi bare at sørge for at dine skal-variable er korrekt sat
op. Det er specielt PATH der skal være sat op så den kan se dine
eksekverbare java programmer. Normalt behøver man ikke sætte andre
shell variable op hvis man har installeret i
<filename>/usr/local/jdk1.2.2</filename>. Kataloget der skal ind i din PATH eller path
variable er <filename>/usr/local/jdk1.2.2/bin</filename>.  Det er dog en god ide også at
sætte JAVA_HOME til <filename>/usr/local/jdk1.2.2</filename>.
</para>

<para>
De to vigtigste eksekverbare filer er <command>javac</command> (som er oversætteren) og
<command>java</command> (som er java's virtuelle maskine JVM).
</para>
</sect2><!-- java-installation -->

<sect2 id="hello-java">
<TITLE>Hello, world!</TITLE>
<INDEXTERM><PRIMARY>Hello, world!</PRIMARY><SECONDARY>Java</SECONDARY></INDEXTERM>

<para>
Et meget lille Java-program kunne f.eks. se sådan ud:
</para> 

<screen>
class HelloWorldApp {
   public static void main(String[] args) {
      System.out.println("Hello, world!");
   }
}
</screen>

<para>
Hvis du gemmer denne i en fil kaldet
<filename>hello.java</filename>, så kan du kompilere den ved:
</para>

<screen>
<prompt>[root@daisy /root]# </prompt> <userinput>javac hello.java</userinput>
</screen>

<para>
Java oversætteren laver en fil kaldet
<filename>HelloWorldApp.class</filename>. Denne fil indeholder
"bytecodes" som kan eksekveres af Java's virtuelle maskine (JVM):
</para>

<screen>
<prompt>[root@daisy /root]# </prompt> <userinput>java HelloWorldApp</userinput>
</screen>

<para>
Det kan bemærkes, at JVM ved, at det er filen med endelsen .class der
skal eksekveres, så dette udelades.
Programmet svarer med output : "Dette er Java!" 
</para>
</sect2><!-- mit-forste-java-program -->

<sect2 id="java3d-installation">
<title>Installation af Java3D</title>
<para>
Der findes masser af andre pakker der er interessant til udvikling af
Java applikationer.  Det er et spørgsmål om hvad man har brug for og
så ellers komme igang med den. Et interessant valg er Java3D. Det er
et meget elegant design af et visualiserings API, så derfor vil jeg
kort beskrive hvordan man installerer det og hvad det kan.
</para>

<para>
For det første hører Java3D til media pakkerne, som indeholder alt til
udvikling af multimedie og Virtual Reality, spil osv.  Java3D er en
pakke der stiller klasser til rådighed til udvikling af 3D
visualiseringssystemer.  Java3D er et elegant værktøj der skulle
stille de fleste 3D visualiseringssystem udviklere tilfreds. Det
baserer sig på scenegraf princippet. Dvs. alle visuelle objecter i en
virtuel verden er hængt op i en scenegraf. Der er knuder, der kan
gruppere dele af det virtuelle univers, knuder der kan lave
transformationer på underliggende knuder, knuder der repræsenterer
egentlige virtuelle objekter, lys og kameraet (øjenpunktet) osv.
</para>

<para>
Der skal en hel del til for at installere Java3D på din Linux
maskine. Først og fremmest baserer Java3D sig på OpenGL. På Linux er
Open Source implementeringen af OpenGL et bibliotek kaldet Mesa
(<ulink url="http://www.mesa3d.org">http://www.mesa3d.org</ulink>). 
Mesa kan også findes som RPM pakke og det er
et krav at versionen skal være Mesa3.1-3 eller nyere. Filen som skal
downloades er <filename>Mesa-3.1-3rh61.i386.rpm</filename> (for Red Hat 6.1). Man kan også
optionelt installere glut (som er et bibliotek til at lave
applikationer med menu kontrol osv. til OpenGL), desuden kan man
installere eksemplerne (<filename>Mesa-glut-3.1-3rh61.i386.rpm</filename> og
<filename>Mesa-demos-3.1-3rh61.i386.rpm</filename>).
</para>


<para>
Desværre er det sådan at Mesa lægger OpenGL lib filerne som
<filename>libGL.so.xxx</filename>, mens Java3d forventer at de hedder
<filename>libMesaGL.so.xxx</filename>. Derfor skal du i /usr/lib lave
et ekstra link:
</para>

<screen>
<prompt>[root@daisy /root]# </prompt> <userinput>cd /usr/lib</userinput>
<prompt>[root@daisy /root]# </prompt> <userinput>ln -s libGL.so.1.2.0 libMesaGL.so.3</userinput>
</screen>

<para>
Nu er det så tid til at installere Java3D. Det er ikke så svært. Det
vigtigste er at hvis man lægger Java3D samme sted som Java 2 SDK er
det problemfrit, ellers skal man sørge for at få environment variable
CLASSPATH til at inkludere stien til Java3D filerne.
</para>

<para>
Filen du skal downloade fra 
<ulink url="http://java.sun.com">http://java.sun.com</ulink> er <filename>java3d1.1.1pre-v1-linux-sdk.tar.bz2</filename>. 
Du kan kun bruge java3D sammen med java 2 (den der er beskrevet i det foregående). 
</para>

<para>
Filen skal unzippes ved: 
</para>

<screen>
<prompt>[root@daisy /root]# </prompt> <userinput>bunzip2 java3d1.1.1pre-v1-linux-sdk.tar.bz2</userinput>
</screen>

<para>
Dernæst skal du installere den vha. tar. Inden du gør det skal du
gennem et par skridt for ikke at løbe ind i alt for mange problemer
siden hen. Du vil gerne have Java3D til at ligge sammen med din
jdk1.2.2 installation. Problemet er at Java3D installationen er pakket
i et katalog der hedder jdk1.2, derfor skal du før omdøbe dit jdk1.2.2
katalog til jdk1.2 dernæst pakker du Java3D filen ud (<command>tar xvf
java3d1.1.1pre-v1-linux-sdk.tar</command> hvor du skal stå i
<filename>/usr/local</filename> hvis det er der du installerede
jdk'en). Tilsidst omdøber du jdk1.2 kataloget til jdk1.2.2 igen. Nu er
du kørende mht. java3d !
</para>

<para>
Det er specielt to ting der er lagt ned i din java installation. Det
er delvist java biblioteksfiler i
<filename>/usr/local/jdk1.2.2/jre/lib/ext</filename> og Java3D demo
filer.
</para>

<para>
Inden vi beskriver et lille programeksempel vil jeg omtale såkaldte
loaders til java3d.  Det er sådan at det kan være et meget omfattende
arbejde og er egentlig imod 3D visualeringsparadigmet, at programmere
sig til den visuelle verden. Det man bør gøre er, at definere den
virtuelle verden i en separat fil i et eller andet format. Der findes
til Java3D en lang række loadere til at læse sådanne filer. Et meget
kendt format er VRML, som på en måde er internettets foretrukne 3D
virtuelle model format. Java er ikke født med en VRML loader, men
heldigvis findes den gratis på 
<ulink url="http:/www.vrml.org">http:/www.vrml.org</ulink>. Du kan også
downloade java3d vrml loader eksempelprogrammer i kildekode. Den java
jar (java biblioteksfil), som hedder <filename>vrml97.jar</filename> skal lægges ned i
<filename>/usr/local/jdk1.2.2/jre/lib/ext</filename>, så kan man bruge den i forbindelse
med udvikling af java3d programmer der benytter load af VRML filer.
</para>

<para>
For eksempler på Java3D programmer henvises der til installationen af
java3d, hvor der er inkluderet 37 programeksempler inkluderende vrml
eksempelprogrammer.
</para>

<para>
På internettet kan der desuden findes et utal af modeller af visuelle
objekter, i alle mulige typer af formatter, herunder VRML.
</para>
</sect2><!-- java3d-installation -->

<sect2 id="java-dok">
<title>Java Dokumentation og specifikationen</title>
<para>
Der er en meget god dokumentation af sproget og alle de pakker man får
med i Java sproget. Dokumentationen kan enten, hvis man har tilgang
til internettet mens man programmerer, findes på 
<ulink url="http://java.sun.com">http://java.sun.com</ulink> 
eller kan downloades og installeres. Dokumentationen til de basale
Java pakker er skrevet i HTML og fylder godt 100 MByte installeret.
For at øge overskueligheden er her et direkte link til Sun's Java
API Specifikation <ulink url="http://java.sun.com/docs/index.html">
http://java.sun.com/docs/index.html</ulink>. Sun har også lavet en 
tutorial, som kan findes på 
<ulink url="http://java.sun.com/docs/books/tutorial/">http://java.sun.com/docs/books/tutorial/</ulink>. Et andet godt sted
at finde dokumentation omkring Java er på <ulink 
url="http://www.blackdown.org/java-linux/docs.html">http://www.blackdown.org/java-linux/docs.html</ulink>.

</para>

<para>
Der er skrevet ufatteligt meget om programmeringssproget Java. De
officielle Java bøger fra Sun <ulink
url="http://java.sun.com">http://java.sun.com</ulink> er gode når man
kender en del til Java i forvejen.
</para>

<para>
For Linux brugere er der for nyligt udkommet en udmærket bog som giver
et godt overblik: "Java Programming on Linux" af Nathan Meyers udgivet
af Waite Group Press i år 2000 se 
<ulink url="http://www.javalinux.net">http://www.javalinux.net</ulink>.
</para>
</sect2><!-- java-dok -->

<sect2 id="java-vaerktoejer">
<title>Java Værktøjer</title>
<para>
Der findes en masse værktøjer som kan hjælpe dig i udviklingen af Java
programmer. Et godt sted at lede Java Software er på BlackDown <ulink
url="http://www.blaockdown.org/java-linux/productlist.html">http://www.blaockdown.org/java-linux/productlist.html</ulink>.
For det første er der understøttelse for java i emacs og ddd. Der er et
Java Udviklingsmøljø til emacs (JDE), som kan findes på <ulink 
url="http://sunsite.auc.dk/jde/">http://sunsite.auc.dk/jde/<ulink>. Med
JDE er det muligt at få syntax highlightning, menuer som: compile, run
debug mv. Derudover er der masser af såkaldte IDE'er. Det er grafiske
værktøjer som benyttes til at skrive programmer med, debugge osv. Det
er virkeligt en smags sag om man kan lide at bruge en IDE eller om man
vil håndkode vha. f.eks. emacs. Derudover er IDE'erne meget
forskellige og det er smag og behag hvilken der bekommer den enkelte.
To virkelig gode gratis IDE'er er: Inprise JBuilder <ulink
url="http://www.borland.com/jbuilder/foundation/">http://www.borland.com/jbuilder/foundation/</ulink> (en
efterfølger af Borlands C++ linie) og FORTE som er købt af SUN
<ulink url="http://www.sun.com/forte/ffj/">http://www.sun.com/forte/ffj/</ulink>.
</para>
</sect2><!-- java-vaerktoejer -->

</SECT1><!-- java -->
