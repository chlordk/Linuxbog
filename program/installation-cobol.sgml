<SECT1 ID="installation-cobol">
<TITLE>Cobol</TITLE>
<INDEXTERM><PRIMARY>Cobol</PRIMARY><secondary>installation af</secondary></INDEXTERM>

<!--
<PARA>
Cobol er det ældste højniveausprog der stadig anvendes.
Cobol kom i 1951 og blev støttet af den amerikanske regering.
Den legendariske Mary Grace Hopper var leder af Cobol-projektet,
men hun har nok sat mest præg på IT-verden med begrebet 'bug'.
Et insekt (bug) havde sat sig fast i et relæ, som så gjorde
et der kom en programfejl.
Med indførsel af transitorer i computere skulle man så tro at
vi slap for 'bugs', men nej :-)
</PARA>

<PARA>
Det er hovedsageligt indenfor mainframe/forretningsverden at Cobol
anvendes idag. Der er skrevet alt for mange linier Cobol til at
det bare lige oversættes til et andet sprog.
Når der skal tilføjes lidt ekstra funktionalitet, forsætter man selvfølgelig
med Cobol, i stedet for at starte helt forfra.
</PARA>

<PARA>
Nu hvor man kan få Linux til IBM mainframes, kan Cobol gå hen og få en
helt ny anvendelse.
En mainframe kan afvikle OS/390 og Linux samtidigt. Her kunne det så være
interessant at flytte et program fra OS/390-miljøet over til Linux-miljøet
og integrere programmet med de mange værktøjer der er under Linux.
</PARA>
-->

<PARA>
Til dette eksempel er anvendt tinycobol, se
<ULINK URL="http://tiny-cobol.sourceforge.net/">http://tiny-cobol.sourceforge.net/</ULINK> .
</PARA>

<!--
<SECT2 ID="hello-cobol">
<TITLE>Hello, world!</TITLE>
<INDEXTERM><PRIMARY>Hello, world!</PRIMARY><SECONDARY>Cobol</SECONDARY></INDEXTERM>

<SCREEN>
IDENTIFICATION DIVISION.
PROGRAM-ID.    HELLO.
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
SPECIAL-NAMES.
    DECIMAL-POINT IS COMMA.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
 
PROCEDURE DIVISION.
 
DISPLAY "Hello, world!"
 
STOP RUN.
</SCREEN>

</SECT2>
-->

</SECT1>
