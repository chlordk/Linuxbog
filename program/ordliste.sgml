<?xml encoding="UTF-8" ?>

<glossary id="program-ordliste">
 <title>Ordliste</title>

 <glossentry id="def-deklarative-sprog">
  <glossterm>Deklarative sprog</glossterm>

  <glossdef>
   <para>
    En gruppe sprog bestående af funktionsorienterede sprog og
    logikorienterede sprog, hvor man beskriver forholdet mellem variable
    istedet for at opstille en række beregningsskridt computeren skal
    gennemføre. Et eksempel på logikprogrammering er prolog og eksempler
    på funktionorienteret programmering er <link linkend="sprog-scheme">
    Scheme</link> og <link linkend="sprog-haskell">Haskell</link>.
    (Sammenlign med <glossterm linkend="def-imperative-sprog">imperative
    sprog</glossterm>).
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-fri-standard">
  <glossterm>fri standard</glossterm>

  <glossdef>
   <para>
    En fri standard overholder de samme krav som en
    <glossterm linkend="def-fri-specifikation">fri specifikation</glossterm>, og
    derudover skal der gælde at den er:

    <orderedlist>
     <listitem><para>Udarbejdet i et åbent forum.</para></listitem>
    </orderedlist>
   </para>

   <para>
    Se i øvrigt Peter Makholms skriblerier om åbne og frie standarder
    (<ulink
    url="http://peter.makholm.net/skriblerier/openstandards">http://peter.makholm.net/skriblerier/openstandards</ulink>)
    for en uddybning af denne definition.
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-fri-specifikation">
  <glossterm>fri specifikation</glossterm>

  <glossdef>
   <para>
    En fri specifikation overholder følgende krav:

    <orderedlist>
     <listitem><para>Ingen restriktion på anvendelse.</para></listitem>

     <listitem><para>Ingen restriktion på implementation.</para></listitem>

     <listitem><para>Bevarelse af specifikationens integritet.</para></listitem>

     <listitem><para>Fri tilgængelighed til specifikationen.</para></listitem>
    </orderedlist>
   </para>

   <para>
    ad 1) En specifikation må ikke sætte begrænsninger på hvor specifikationen
    kan finde anvendelse, og heller ingen begrænsninger på hvad man må
    gøre ud over hvad specifikationen foreskriver. (cirka open
    source-definitionen punkt 5 og 6)
   </para>

   <para>
    ad 2) Der må ikke være restriktioner på hvem der må implementere
    specifikationen, hvordan den implementeres, eller hvordan
    implementationen licensieres. Dette hindrer blandt andet at åbne
    specifikationer anvender patenterede algoritmer.  (cirka open
    source-definitionen punkt 5 og 6, giver mulighed for at anvende
    OSD-licenser på implementationen)
   </para>

   <para>
    ad 3) En specifikation må kræve at der tydeligt skal gøres opmærksom på
    hvor implementationen går ud over hvad specifikationen implementerer.
    (cirka open source-definitionens punkt 4)
   </para>

   <para>
    ad 4) Det skal være tilladt af videredistribuere hele eller dele
    af specifikationen.  (cirka open source-definitionens punkt 1)
   </para>

   <para>
    Se i øvrigt Peter Makholms skriblerier om åbne og frie standarder
    (<ulink
    url="http://peter.makholm.net/skriblerier/openstandards">http://peter.makholm.net/skriblerier/openstandards</ulink>)
    for en uddybning af denne definition.
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-frit-programmel">
  <glossterm>frie programmer</glossterm>

  <glossdef>
   <para>
    Programmer der distribueres efter <ulink
    url="http://www.opensource.dk/docs/definition.html">"Open
    Source"-reglerne</ulink>. Kort fortalt går det ud på at hvis du
    har fået et <emphasis>frit program</emphasis>, så:

    <itemizedlist>
     <listitem>
      <para>
       Må du frit sælge eller videregive programmet.
      </para>
     </listitem>

     <listitem>
      <para>
       Har du ret til at få kildeteksten til programmet.
      </para>
     </listitem>

     <listitem>
      <para>
       Har du ret til at videreudvikle programmet.
      </para>
     </listitem>
    </itemizedlist>
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-gnu-compiler-collection">
  <glossterm>GNU Compiler Collection (GCC)</glossterm>

  <glossdef>
   <para>
    GNU-projektets oversættersystem. Det kan oversætte adskillige
    programmeringssprog til nok endnu flere forskellige platforme.
    Fidusen ved GCC er at oversættersystemet er delt i to dele;
    "forenden", hvor der findes en til hvert programmeringssprog, og
    "bagenden", hvor der findes en til hver platform. Og
    kommunikationen mellem for- og bagende sker på en form der er
    uafhængig af både programmeringssprog og platform.
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-hoballokering">
  <glossterm>hoballokering (eng: heap allocation)</glossterm>

  <glossdef>
   <para>
    Når allokering af data foregår fra en på forhånd afgrænset del af
    hukommelsen. Hvor i hukommelsen data bliver langt har intet med
    programmets yderligere struktur at gøre.
   </para>

   <para>
    I C får bruger man hoballokeret hukommelse når man bruger
    funktionen <command>malloc</command>. Se også 
    <glossterm linkend="def-stakallokering">stakallokering</glossterm>.
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-imperative-sprog">
  <glossterm>Imperative sprog</glossterm>

  <glossdef>
   <para>
    Sprog hvor man beskirver en række trin der skal udføres for at foretage
    en beregning. Eksempler på impperative sprog er <link linkend="sprog-ada">
    Ada</link> og <link linkend="sprog-c">C</link>
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-pid">
  <glossterm>PID</glossterm>

  <glossdef>
   <para>
    Forkortelse af det engelske udtryk "process identification". Se
    <glossterm linkend="def-procesnummer">procesnummer</glossterm>.
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-procesnummer">
  <glossterm>procesnummer</glossterm>

  <glossdef>
   <para>
    Et tal som styresystemet bruger til at identificere en proces,
    dvs. et startet program. Hvis du starter flere eksemplarer af det
    samme program, vil hvert eksemplar have sit procesnummer. Så længe
    en proces bruger ressourcer, for eksempel hukommelse, på systemet,
    vil man kunne referere til den ved dens procesnummer, uanset om
    den egentlig er aktiv.
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-stak">
  <glossterm>stak (datastruktur)</glossterm>

  <glossdef>
   <para>
    En måde at organisere data på der svarer til en stak papirer på
    et skrivebord. Du kan kun se det øverste objekt på stakken, og for
    at få adgang til et objekt længere nede i stakken, må du først
    fjerne alle dem der ligger ovenpå.
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-stakallokering">
  <glossterm>stakallokering</glossterm>

  <glossdef>
   <para>
    Når variable bliver allokeret i 
    <glossterm linkend="def-stak">en stak</glossterm>.
    Man kan godt tilgå
    variable der er allokeret længere nede i stakken, men variable bliver
    deallokeret i streng modsat rækkefølge end de bliver allokeret. 
   </para>

   <para>
    Stakallokering bliver ofte brugt til lokale variable i funktioner. 
    Se også <glossterm linkend="def-hoballokering">hoballokering</glossterm>
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-aaben-standard">
  <glossterm>åben standard</glossterm>

  <glossdef>
   <para>
    En åben standard overholder de samme krav som en <glossterm
    linkend="def-fri-standard">fri standard</glossterm>, men behøver
    ikke nødvendigvis at kunne distribueres frit.  Se i øvrigt <ulink
    url="http://www.aaben-standard.dk/">åben standard-webstedet</ulink>.
   </para>
  </glossdef>
 </glossentry>

 <glossentry id="def-aaben-specifikation">
  <glossterm>åben specifikation</glossterm>

  <glossdef>
   <para>
    En åben specifikation overholder de første tre krav til en <glossterm
    linkend="def-fri-specifikation">fri specifikation</glossterm>, men behøver
    ikke nødvendigvis at kunne distribueres frit.
   </para>
  </glossdef>
 </glossentry>
</glossary>
