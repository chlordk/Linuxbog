<sect1 ID="sprog-cpp">
 <title>C++</title>

 <indexterm>
  <primary>C++</primary>
 </indexterm>
 <indexterm>
  <primary>objektorienterede sprog</primary><secondary>C++</secondary>
 </indexterm>
 <indexterm>
  <primary>imperative sprog</primary><secondary>C++</secondary>
 </indexterm>
 <indexterm>
  <primary>oversatte sprog</primary><secondary>C++</secondary>
 </indexterm>

 <para>
  Praktisk taget C-kompatibelt.
  Objektorienteret.
 </para>

 <para>
  Skal et program køre hurtigt, så er C og C++ gode valg af
  programmeringssprog. Både C og C++ har dog en syntaks der dels er svær at
  forstå for begyndere og dels kræver stor opmærksomhed hvis man vil undgå
  fejl i sine programmer. Både i C og i C++ er det op til brugeren at allokere
  hukommelse til
  datastrukturer, og sørge for at programmet kun skriver inden for den
  allokerede hukommelse. Dette er en egenskab ved C der historisk har ledt til
  mange problematiske programmeringsfejl, og en grund til at det kan tage lang
  tid at finde fejl i C- og C++-programmer. C har også en meget primitiv
  repræsentation af strenge. C++ er lidt bedre på dette punkt, men for
  eksempel Perl er et langt stærkere sprog til behandling af store mængder
  tekst. I det hele taget har C (og til en vis grad også C++) et lavt
  abstraktionsniveau og en alvorlig mangel på beskyttelse mod utilsigtede
  oversættelser mellem de forskellige datatyper.
 </para>

 <para>
  <indexterm>
   <primary>ISO-standard</primary><secondary>C++</secondary>
  </indexterm>

  Der findes i dag en ISO-standard for programmeringssproget C++
  (ISO/IEC-####), men det er desværre ikke almindeligt at C++-oversættere
  udsættes for en formel efterprøvning af om de lever op til standarden.
  Dertil kommer at en gruppe forskere og oversætterudviklere hos IBM har sået
  tvivl om om det overhovedet er muligt at lave en C++-oversætter, der svarer
  til ISO-standarden.
 </para>
</sect1>
