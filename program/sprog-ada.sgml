<?xml encoding="ISO-8859-1" ?>

<sect1 id="sprog-ada">
 <title>Ada</title>

 <indexterm>
  <primary>Ada</primary>
 </indexterm>
 <indexterm>
  <primary>objektorienterede sprog</primary><secondary>Ada</secondary>
 </indexterm>
 <indexterm>
  <primary>imperative sprog</primary><secondary>Ada</secondary>
 </indexterm>
 <indexterm>
  <primary>oversatte sprog</primary><secondary>Ada</secondary>
 </indexterm>
 <indexterm>
  <primary>ISO/IEC</primary>
  <secondary>8652:1995, Ada</secondary>
 </indexterm>

 <para>
  Ada er et sprog der er udviklet til store projekter hvor det er
  vigtigt at der ikke er fejl i systemerne, men det kan også med
  fordel bruges til mindre projekter.  Den nye GNU Visual Debugger er
  et eksempel på et "mindre" Ada-projekt.  Blandt de større kan man
  for eksempel nævne Boeing 777-serien eller det nye franske
  hangarskib "Charles de Gaulle".
 </para>

 <para>
  <indexterm><primary>systemprogrammering</primary></indexterm>

  En af Adas styrker er systemprogrammering hvor man ofte har brug for at
  implementere abstraktioner af systemspecifikke ting som bitmønstre og
  portadresser på en effektiv måde.
 </para>

 <para>
  <indexterm><primary>flytbarhed</primary></indexterm>
  <indexterm><primary>arkitekturuafhængighed</primary></indexterm>

  I det omfang man ikke direkte gør sig umage med at skrive et
  Ada-program til en bestemt arkitektur (processor, andet isenkram og
  eventuelt styresystem), kan man regne med at det fungerer ens på
  alle systemer.  Dele af Ada er selvfølgelig nødt til at være
  systemspecifikke &ndash; det gælder for eksempel hvor store heltal man kan
  regne med &ndash; men enhver Ada-oversætter skal komme med dokumentation
  af hvordan de systemspecifikke dele er lavet i den.
 </para>

 <para>
  <indexterm>
   <primary>C</primary><secondary>kalde fra Ada</secondary>
  </indexterm>
  <indexterm>
   <primary>Cobol</primary><secondary>kalde fra Ada</secondary>
  </indexterm>
  <indexterm>
   <primary>Fortran</primary><secondary>kalde fra Ada</secondary>
  </indexterm>
  <indexterm>
   <primary>C++</primary><secondary>kalde fra Ada</secondary>
  </indexterm>
  <indexterm>
   <primary>Java</primary><secondary>kalde fra Ada</secondary>
  </indexterm>

  Ada har indbygget adgang til biblioteker skrevet i andre sprog.
  <ulink
  url="http://www.adaic.com/standards/ada95.html">Standarden</ulink>
  beskriver grænsesnittet til Cobol, C og Fortran, men GNU Ada kommer
  også med grænsesnit til Java og C++.  Du har således let adgang til
  at genbruge gammel kode skrevet i andre sprog.
 </para>

 <para>
  <indexterm><primary>GNU Ada</primary></indexterm>
  <indexterm><primary>GNAT</primary></indexterm>
  <indexterm>
   <primary>ISO-standard</primary>
   <secondary>Ada</secondary>
  </indexterm>

  GNU Ada oversætteren (også kendt som GNAT) blev udviklet parallelt
  med den seneste ISO-standard for Ada (ISO/IEC 8652:1995) og var
  allerede da standarden udkom i februar 1995, overordentlig brugbar.
  I dag er det en oversætter i en kvalitet der gør at mange store
  firmaer vælger GNU Ada når de har brug for en Ada-oversætter.  GNU
  Ada fås blandt andet til Linux, DOS, Digital Unix, AIX, OS/2 og
  Windows. Udviklerne bag GNU Ada gør meget ud af at oversætteren
  følger ISO-standarden for Ada.  &mdash;  Det at følge standarderne
  er i det hele taget noget man går meget op i i Ada-miljøet.  Siden
  GCC 3.1 har GNAT været integreret i den officielle GCC-distribution.
 </para>

<!--
<sect2 id="hello-ada">
 <title>Hej verden!</title>

 <indexterm>
  <primary>Hello, world!</primary>
  <secondary>Ada</secondary>
 </indexterm>
 <indexterm>
  <primary>Hej verden!</primary>
  <secondary>Ada</secondary>
 </indexterm>

 <para>
  Vi følger traditionen og begynder med "Hello World"-programmet, der ofte er
  det eksempel man bruger, når man skal præsentere et programmeringssprog.
  Programmet skriver en kort tekst, Hej SSLUG, ud på skærmen og afslutter.
  Indtast følgende tekst (brug <command>emacs</command>,
  <command>pico</command> eller <command>vi</command>), og gem det som
  <filename>hej_sslug.adb</filename>.
 </para>

<programlisting>
with Ada.Text_IO; use Ada.Text_IO;

procedure Hej_SSLUG is
begin
   Put_Line ("Hej SSLUG");
end Hej_SSLUG;
</programlisting>

 <para>
  <indexterm>
   <primary>oversætte</primary>
   <secondary>Ada-programmer</secondary>
  </indexterm>
  I kataloget, hvor filen er gemt, kan programmet nu oversættes ved at skrive
<screen>
<prompt>hven% </prompt><userinput>gnatmake hej_sslug</userinput>
</screen>
 </para>

 <para>
  <indexterm><primary>gnatmake</primary></indexterm>
  Ada-oversætteren kaldes med kommandoen <command>gnatmake</command>.
 </para>

 <para>
  Det oversatte Ada-program, <filename>hej_sslug</filename>, køres ved at
  skrive navnet i en <command>xterm</command> eller lignende:
 </para>

<screen>
<prompt>hven% </prompt><userinput>./hej_sslug</userinput>
Hej SSLUG
<prompt>hven% </prompt>
</screen>

 <para>
  Punktummet og skråstregen foran programmets navn bruges til at fortælle
  systemet at programmet ligger i det aktuelle katalog og ikke et af de steder,
  hvor systemet forventer at finde programmer.
 </para>
</sect2>

<sect2 id="hello-ada-parallel">
 <title>Hej verden! &ndash; Parallelprogrammering</title>
-->

 <para>
  <indexterm>
   <primary>parallelprogrammering</primary>
   <secondary>Ada</secondary>
  </indexterm>

  Ada har, i modsætning til de fleste andre programmeringssprog,
  indbygget mulighed for at skrive programmer hvor forskellige dele
  af programmet kører parallelt med hinanden.  Man kan for eksempel
  benytte parallelprogrammering hvis man vil lade sit program fordele
  sig på alle computerens processorer, eller hvis forskellige dele af
  programmet skal køre på forskellige maskiner.
 </para>

 <para>
  Du kan finde en installationsvejledning til GNU Ada i <xref
  linkend="installation-ada"/> og henvisninger til bøger og websteder
  om Ada i <xref linkend="boeger-ada"/>.
 </para>

 <!-- "Hej internet" - Applet -->
 <!-- "Hej X"        - Gtkada og gettext -->

 <example id="sprog-ada-flaskesang">
  <title>»99 bottles of beer on the wall«</title>

  <para>
   Som et eksempel på hvordan man bruger forskellige kontrolstrukturer i Ada,
   kan vi se på dette lille program der udskriver teksten til sangen
   »99 bottles of beer on the wall«:
<programlisting>
&eksempler-flaskesang-ada;
</programlisting>
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Den første linje i kildeteksten (<literal>with</literal> ...) importerer
     de pakker vi skal bruge i programmet.
    </para>
   </listitem>

   <listitem>
    <para>
     Selve programmet er en procedure, <literal>Bottles</literal>, der er delt
     op i deklarationer (fra <literal>procedure Bottles
     is</literal> til <literal>begin</literal>) og ordrer
     (fra <literal>begin</literal> til <literal>end Bottles</literal>).
    </para>
   </listitem>

   <listitem>
    <para>
     I dette tilfælde er der to deklarationer; en procedure til at skrive
     antallet af flasker pænt med korrekte entals- og flertalsformer, og en
     <literal>use</literal>-deklaration der gør de nævnte pakkers indhold
     direkte synligt i resten af proceduren (så man ikke behøver at foranstille
     pakkernes navn).
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Hvis du gemmer <ulink
   url="http://&linuxbogurl;/program/eksempler/bottles.ada">programmets
   kildetekst</ulink> i filen <filename>bottles.adb</filename> og i øvrigt
   har installeret GCC's Ada-oversætter, så kan du oversætte det med
   kommandoen:
<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>gnatmake bottles.ada -cargs -gnati1 -gnatf -gnato -fstack-check</userinput>
</screen>
   og dernæst udføre det med kommandoen:
<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>./bottles</userinput>
99 bottles
[...]
No bottles of beer on the wall.
</screen>
  </para>
 </example>

 <example id="sprog-ada-gnatmake">
  <title>Kommandolinjetilvalg til GCC</title>

  <para>
   I eksemplet <xref linkend="sprog-ada-flaskesang"/> bruger vi kommandoen
   <command>gnatmake</command> med en lang række tilvalg der er nødvendige
   for at få GCC's Ada-oversætter til at opføre sig korrekt (som der står i
   Ada-standarden).  Dem er der ikke nogen grund til selv at skulle skrive
   hver gang man skal oversætte et program.  Hvis man indsætter koden:
<programlisting>
function gm () {
   gnatmake ${*} -cargs -gnati1 -gnatf -gnato -fstack-check
}
</programlisting>
   i <filename>${HOME}/.zshrc</filename>, vil man i Zsh kunne nøjes med at
   skrive:
<screen>
<prompt>[tyge@hven ~]$ </prompt><userinput>gm bottles.ada</userinput>
</screen>
   når man skal oversætte programmet fra eksemplet <xref
   linkend="sprog-ada-flaskesang"/>.
  </para>

  <para>
   Det kan være nyttigt med lidt mere detaljerede fejlmeddelelser end »der er
   en fejl på linje 17«.  Derfor bør man udvide definitionen ovenfor med
   tilvalget <literal>-gnatv</literal>:
<programlisting>
function gm () {
   gnatmake ${*} -cargs -gnatv -gnati1 -gnatf -gnato -fstack-check
}
</programlisting>
  </para>
 </example>
</sect1>
