<?xml encoding="ISO-8859-1" ?>

<sect1 id="sprog-ocaml">
 <title>Objective Caml</title>

 <indexterm>
  <primary>OCaml (Objective Caml)</primary>
 </indexterm>
 <indexterm>
  <primary>Objective Caml</primary>
 </indexterm>
 <indexterm>
  <primary>funktionsorienterede sprog</primary>
  <secondary>Objective Caml</secondary>
 </indexterm>
 <indexterm>
  <primary>oversatte sprog</primary>
  <secondary>Objective Caml</secondary>
 </indexterm>

 <para>
  OCaml er et temmelig specielt programmeringssprog, idet det tillader at
  man blander flere paradigmer end sædvanligt; objektorienteret, imperativt
  og funktionsorienteret.
  ...
 </para>

 <sect2 id="sparres-noter-om-ocaml">
  <title>Nogle løse noter om OCaml</title>

  <para>
   Fra 1987.
  </para>

  <para>
   Statisk typet, (men) vælger automatisk den mest generelle type
   (betydning) af et udtryk.
  </para>

  <para>
   Funktioner er en slags data.
  </para>

  <para>
   Heltal regnes "modulo" $2^30$ på 32-bit-systemer og modulo $2^62$
   på 64-bit-systemer $(2^30-1)+1 = -(2^30)$.
  </para>

  <para>
   Skelner mellem "strukturel" og "fysisk" lighed ("=" og "=="). Med
   "fysisk" lighed menes der at det rent faktisk er de samme data, der
   ligger det samme sted i hukommelsen, mens "strukturel" lighed blot
   er to forskellige variable, der tilfældigvis har samme værdi. Det
   svarer til om man ser på "A=B" eller "A'Access=B'Access" i Ada.
  </para>

  <para>
   Underforstået parallelisering i syntaksen:
<programlisting>
<keyword>let</keyword> navn_1 = udtryk_1 <keyword>and</keyword> navn_2 = udtryk_2 <keyword>and</keyword> ... ;;
</programlisting>
   beregnes principielt parallelt.
  </para>

  <para>
   Prioritet: "f a b" svarer til "(f a) b". Der er desværre mange
   alternative formuleringsformer. :-(
  </para>

  <para>
   Bortset fra parametrene evalueres en funktion når den defineres.
  </para>

  <para>
   Polymorfe funktioner...
  </para>

  <para>
   Har en flerdimensionel "case"-struktur i form af "match ... with
   ...".
  </para>
 </sect2>
</sect1>
