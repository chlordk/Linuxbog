<!-- $Id$ -->
<chapter id="vaerktoej">
 <title>Programmørens værktøjskasse</title>

 <para>
  En programmørs værktøjskasse bør indeholde:

  <itemizedlist>
   <listitem>
    <para>
     Et versionsstyringssystem. For eksempel CVS (<xref
     linkend="vaerktoej-cvs">). I virkeligheden bør man bruge et
     versionsstyringssystem til alle projekter, der varer længere end
     et par dage, eller har flere deltagende forfattere.
    </para>
   </listitem>

   <listitem>
    <para>
     Et tekstbehandlingsprogram. For eksempel <command>vi</command>
     (<xref linkend="vaerktoej-vi">), Emacs (<xref
     linkend="vaerktoej-emacs">), Grasp (<xref
     linkend="vaerktoej-grasp">, mest til Ada, C og C++), Anjuta
     (<xref linkend="vaerktoej-anjuta">, bl.a. til C, C++, Perl, PHP,
     Python og SQL) eller KDevelop (<xref
     linkend="vaerktoej-kdevelop">, kun til C++).
    </para>
   </listitem>

   <listitem>
    <para>
     Et udskriftssystem. Det kan for eksempel være
     <command>a2ps</command> (<xref linkend="vaerktoej-a2ps">) eller
     det der er indbygget i Grasp (<xref linkend="vaerktoej-grasp">).
    </para>
   </listitem>

   <listitem>
    <para>
     Et fejlsøgningsværktøj (GVD <xref linkend="vaerktoej-gvd"> eller
     gdb <xref linkend="vaerktoej-gdb">)
    </para>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  Derudover kan det være praktisk med:

  <itemizedlist>
   <listitem>
    <para>
     En brugergrænsefladebygger (GLADE <xref
     linkend="vaerktoej-glade">).
    </para>
   </listitem>

   <listitem>
    <para>
     En kontrolstrukturplotter.  Det kan for eksempel være Grasp
     (<xref linkend="vaerktoej-grasp">), der kan bruges til at få en
     grafisk oversigt over kontrolstrukturerne i Ada-, C- og
     C++-programmer.
    </para>
   </listitem>

   <listitem>
    <para>
     Et oversættelseskontrolsystem.  Det kan for eksempel være GNU
     Make (<xref linkend="vaerktoej-make">), der kan bruges til at
     holde styr på hvilke filer det er på tide at opdatere
     (automatisk).
    </para>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  Og hvis du programmerer i C, C++ eller C# vil du temmelig sikkert
  også få brug for en læksøger.  Det kan for eksempel være
  <command>efence</command> (<xref linkend="vaerktoej-efence">).
 </para>

 <para>
  Og det ideelle ville selvfølgelig være, hvis man kunne få hele
  <emphasis>sin</emphasis> værktøjskasse integreret i ét
  udviklingsmiljø.  Emacs (<xref linkend="vaerktoej-emacs">) er nok
  det mest populære integrerede udviklingsmiljø til Linux.  I
  standardopsætningen snakker Emacs fint med CVS og en utroligt bred
  samling oversættere, samtidig med at det giver syntaksfremhævning og
  sprogspecifikke genvejstaster til langt de fleste
  programmeringssprog.  Det at Emacs grundlæggende er et tekstbaseret
  program generer vist en del mennesker, men på den anden side kan
  Emacs bruges til så meget, at man hurtigt kommer til at undre sig
  over, hvordan man kan klare sig uden.  Hvis du har valgt at
  programmere i C++ er KDevelop (<xref linkend="vaerktoej-kdevelop">)
  et andet muligt valg af integreret udviklingsmiljø.  KDevelop er et
  decideret grafisk udviklingsmiljø og ser en del smartere ud end
  Emacs.  Desværre er det begrænset til programmering i C++.  Anjuta
  (<xref linkend="vaerktoej-anjuta">) er et nyt integreret grafisk
  udviklingsmiljø.  Anjuta kan håndtere adskillige
  programmeringssprog, men dog ikke nær så mange som Emacs (det er
  vist også en svær opgave).
 </para>

 &program-vaerktoej-cvs;
 &program-vaerktoej-diff;
 &program-vaerktoej-gdb;
 &program-vaerktoej-gvd;
 &program-vaerktoej-glade;
 &program-vaerktoej-gettext;
 &program-vaerktoej-efence;
 &program-vaerktoej-make;
 &program-vaerktoej-autoconf;
 &program-vaerktoej-anjuta;
 &program-vaerktoej-kdevelop;
 &program-vaerktoej-emacs;
 &program-vaerktoej-vi;
 &program-vaerktoej-grasp;
 &program-vaerktoej-a2ps;
</chapter>
